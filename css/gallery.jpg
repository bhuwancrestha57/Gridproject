tem.UInt32,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.UInt32@)">
      <summary>Registers a new command target (<see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />).</summary>
      <param name="dwReserved">[in] Must be zero.</param>
      <param name="pCmdTrgt">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface to register.</param>
      <param name="pdwCookie">[out] Pointer to a cookie (VSCOOKIE). Used when unregistering the command target.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget.UnregisterPriorityCommandTarget(System.UInt32)">
      <summary>Unregisters the command target identified by a cookie.</summary>
      <param name="dwCookie">[in] Cookie (VSCOOKIE) identifying the command target to unregister. Returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterPriorityCommandTarget.RegisterPriorityCommandTarget(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.RegisterProjectType(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory,System.UInt32@)">
      <summary>Registers a project type.</summary>
      <param name="rguidProjType">[in] Unique identifier of the project type as it appears in the registry.</param>
      <param name="pVsPF">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface.</param>
      <param name="pdwCookie">[out] Abstract handle used to retrieve this entry from the environment and to unregister the project type.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.UnregisterProjectType(System.UInt32)">
      <summary>Unregisters a project type.</summary>
      <param name="dwCookie">[in] Abstract handle returned from the environment when the project type was registered by the call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectTypes.RegisterProjectType(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver.ResolveRelativePath(System.UInt32,System.String,System.String@)">
      <summary>Resolves a relative path to an absolute path for a document.</summary>
      <param name="dwReserved">[in] Reserved for future use. Must be zero.</param>
      <param name="pszRelPath">[in] Relative path to the document.</param>
      <param name="pbstrAbsPath">[out, retval] Absolute path to the document.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after a change in an attribute of a document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is placed in the Hide state.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose window has been hidden.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface representing the frame containing the document's window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after application of the first lock of the specified type to the specified document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document that has had its first lock applied. See Remarks.</param>
      <param name="dwRDTLockType">[in] Specifies the type of document lock. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] The number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] The number of edit locks remaining.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnAfterSave(System.UInt32)">
      <summary>Called after saving a document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document that has just been saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose window is about to be shown.</param>
      <param name="fFirstShow">[in] Non-zero (<see langword="TRUE" />) if the document window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the frame containing the document's window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose last lock is about to be removed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] The number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] The number of edit locks remaining.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after a change in a document attribute of a document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after a document attribute changes. This is an advanced version of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> method.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <param name="pHierOld">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that previously owned the document.</param>
      <param name="itemidOld">[in] Indicates the previous item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentOld">[in] Name of the old document.</param>
      <param name="pHierNew">[in] The current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that now owns the document.</param>
      <param name="itemidNew">[in] Indicates the new item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentNew">[in] Name of the new document.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame containing the document's window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after applying the first lock of the specified type to the specified document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Specifies the type of document lock. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of edit locks remaining.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="fFirstShow">[in] Non-zero (<see langword="TRUE" />) if the doc window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame that contains the document's window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of read locks remaining.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of edit locks remaining.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChange(System.UInt32,System.UInt32)">
      <summary>Called after an attribute of a document in the Running Document Table (RDT) changes.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterAttributeChangeEx(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String)">
      <summary>Called after a document attribute is changed. This is an advanced version of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents2.OnAfterAttributeChange(System.UInt32,System.UInt32)" /> method.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have changed.</param>
      <param name="grfAttribs">[in] Flags corresponding to the changed attributes. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <param name="pHierOld">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that previously owned the document.</param>
      <param name="itemidOld">[in] The previous item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentOld">[in] Name of the old document.</param>
      <param name="pHierNew">[in] The current <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that owns the document.</param>
      <param name="itemidNew">[in] Indicates the new item identifier. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pszMkDocumentNew">[in] Name of the new document.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterDocumentWindowHide(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called after a document window is hidden.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface representing the document window's frame.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterFirstDocumentLock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called after application of the first lock of the specified type to a document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] The document lock type. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of remaining read locks.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of remaining edit locks.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterSave(System.UInt32)">
      <summary>Called after a document in the Running Document Table (RDT) is saved.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeDocumentWindowShow(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Called before displaying a document window.</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="fFirstShow">[in] Non-zero (<see langword="TRUE" />) if the doc window is being displayed for the first time.</param>
      <param name="pFrame">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface object representing the frame that contains the document's window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeLastDocumentUnlock(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Called before releasing the last lock of the specified type on the specified document in the Running Document Table (RDT).</summary>
      <param name="docCookie">[in] Abstract value representing the document whose attributes have been changed.</param>
      <param name="dwRDTLockType">[in] Type of lock being released. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwReadLocksRemaining">[in] Specifies the number of remaining read locks.</param>
      <param name="dwEditLocksRemaining">[in] Specifies the number of remaining edit locks.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeSave(System.UInt32)">
      <summary>Called before saving a document.</summary>
      <param name="docCookie">[in] Abstract value representing the document about to be saved..</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.AdviseRunningDocTableEvents(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents,System.UInt32@)">
      <summary>Enables the client to receive notifications of changes to the Running Document Table (RDT).</summary>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents" /> interface that receives the event notifications.</param>
      <param name="pdwCookie">[out] Returns an abstract value that identifies the client to be advised of RDT events. Use this cookie later in a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnadviseRunningDocTableEvents(System.UInt32)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.FindAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@,System.UInt32@)">
      <summary>Locates a document in the RDT using the document file name, then obtains a read or edit lock on that document.</summary>
      <param name="dwRDTLockType">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] Path to the located document.</param>
      <param name="ppHier">[out, optional] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the located document.</param>
      <param name="pitemid">[out, optional] Returns an item identifier of the located document. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="ppunkDocData">[out, optional] Returns the <see langword="IUnknown" /> interface. See Remarks for details.</param>
      <param name="pdwCookie">[out, optional] Returns an abstract value for the document.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)">
      <summary>Returns information about a document registered in the RDT, given the cookie.</summary>
      <param name="docCookie">[in] Abstract value representing the document for which information was requested.</param>
      <param name="pgrfRDTFlags">[out] Returns flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="pdwReadLocks">[out] Returns the number of read locks on the document.</param>
      <param name="pdwEditLocks">[out] Returns the number of edit locks on the document.</param>
      <param name="pbstrMkDocument">[out] Returns the path and file name of the document.</param>
      <param name="ppHier">[out, optional] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="pitemid">[out, optional] Item identifier of the document. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="ppunkDocData">[out, optional] Returns an <see langword="IUnknown" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetRunningDocumentsEnum(Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments@)">
      <summary>Enumerates through all documents in the RDT.</summary>
      <param name="ppenum">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumRunningDocuments" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.LockDocument(System.UInt32,System.UInt32)">
      <summary>Obtains a read or edit lock on a document when it is opened.</summary>
      <param name="grfRDTLockType">[in] Flag whose value is taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="dwCookie">[in] Abstract value representing the open document for which a read or an edit lock is to be obtained.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.ModifyDocumentFlags(System.UInt32,System.UInt32,System.Int32)">
      <summary>Modifies the RDT document flags for a registered document.</summary>
      <param name="docCookie">[in] Unique value representing the document.</param>
      <param name="grfFlags">[in] Valid document flags. See Remarks for valid modifications. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /></param>
      <param name="fSet">[in]. Flag indicating that the document flag has been set.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)">
      <summary>Notifies the client when changes are made to the document.</summary>
      <param name="dwCookie">[in] Abstract value representing the document that is changed.</param>
      <param name="grfDocChanged">[in] RDT attributes whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnAfterSave(System.UInt32)">
      <summary>Fires after a document in the RDT has been saved.</summary>
      <param name="dwCookie">[in] Abstract value representing the document that is saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyOnBeforeSave(System.UInt32)">
      <summary>Fires before a document in the RDT is saved.</summary>
      <param name="dwCookie">[in] Abstract value representing the document that is to be saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterAndLockDocument(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.UInt32@)">
      <summary>Creates an entry in the running document table when a document is created or opened.</summary>
      <param name="grfRDTLockType">[in] Flags taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" />, <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS2" />, and <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS3" /> enumerations. The flags must include either <see langword="RDT_EditLock" /> or <see langword="RDT_ReadLock" />.</param>
      <param name="pszMkDocument">[in] Path to the document.</param>
      <param name="pHier">[in] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy that owns the document. Can only be a null value if a read lock has been obtained.</param>
      <param name="itemid">[in] Item identifier of the document in the hierarchy. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="punkDocData">[in] The <see langword="IUnknown" /> interface of the document. A null value indicates no document object that can be persisted.</param>
      <param name="pdwCookie">[out] Returns an abstract value representing the document in the RDT.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterDocumentLockHolder(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,System.UInt32@)">
      <summary>Registers a document lock holder in the running document table.</summary>
      <param name="grfRDLH">[in] This is zero or a flag taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER" /> enumeration.</param>
      <param name="dwCookie">[in] Abstract value representing the open document for which the read or edit lock is to be released.</param>
      <param name="pLockHolder">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder" /> interface representing the document lock holder for the registered document.</param>
      <param name="pdwLHCookie">[out] Unique value representing the document lock holder.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)">
      <summary>Renames and/or changes the ownership of a document.</summary>
      <param name="pszMkDocumentOld">[in] Path to the previous document.</param>
      <param name="pszMkDocumentNew">[in] Path to the current document.</param>
      <param name="pHier">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that is to take ownership. Use <see langword="HIERARCHY_DONTCHANGE" /> if not changing ownership.</param>
      <param name="itemidNew">[in] Item identifier of the current document if the hierarchy is to take ownership. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />. Use <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if not changing ownership.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.SaveDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)">
      <summary>Saves the documents.</summary>
      <param name="grfSaveOpts">[in] Save options whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS" /> enumeration.</param>
      <param name="pHier">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface that owns the document.</param>
      <param name="itemid">[in] Item identifier of the saved documents. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="docCookie">[in] Abstract value representing the saved documents.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnadviseRunningDocTableEvents(System.UInt32)">
      <summary>Disables the client from receiving notifications of changes to the RDT.</summary>
      <param name="dwCookie">[in] Abstract value that identifies the client that is to be disabled from receiving RDT events. See Remarks.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnlockDocument(System.UInt32,System.UInt32)">
      <summary>Releases a read or edit lock on the open document.</summary>
      <param name="grfRDTLockType">[in] Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration. Use the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS.RDT_RequestUnlock" /> flag with this method to indicate what should happen if this is the last unlock, because the last unlock will cause the document to be saved. </param>
      <param name="dwCookie">[in] Abstract value representing the open document for which the read or edit lock is to be released.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.UnregisterDocumentLockHolder(System.UInt32)">
      <summary>Unregisters a document lock holder in the running document table.</summary>
      <param name="dwLHCookie">[in] Unique identifier for the document lock holder. See Remarks.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSaveOptionsDlg.ShowSaveOptionsDlg(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Shows a dialog box from which to choose additional save format options.</summary>
      <param name="dwReserved">[in] Reserved. Do not use.</param>
      <param name="hwndDlgParent">[in] The window to use as the save options dialog’s parent.</param>
      <param name="pszFilename">[in] The absolute path of the file that is to be saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.BrowseForProject(System.String@,System.Int32@)">
      <summary>Obsolete: returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pbstrDirectory">Do not use.</param>
      <param name="pfOK">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.CancelAfterBrowseForProject">
      <summary>Obsolete: returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.GetSccGlyph(System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
      <summary>This method is called by projects to discover the source control glyphs to use on files and the files' source control status; this is the only way to get status.</summary>
      <param name="cFiles">[in] Count of files. It should be greater than 0 if there are files under source code control. Currently, the environment supports only a count of 1.</param>
      <param name="rgpszFullPaths">[in] Array of paths to files; cannot be <see langword="null" />.</param>
      <param name="rgsiGlyphs">[out] Array of icons corresponding to <paramref name="rgpszFullPaths" />; cannot be <see langword="null" />. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> for additional information.</param>
      <param name="rgdwSccStatus">[out] Specifies status for corresponding <paramref name="rgpszFullPaths" /> entry. For a list of possible values, see File Status Code Enumerator. This parameter can be <see langword="null" />.</param>
      <returns>The method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if at least one of the files is controlled, <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if none is controlled.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.GetSccGlyphFromStatus(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsStateIcon[])">
      <summary>This function determines which glyph to display, given a combination of status flags.</summary>
      <param name="dwSccStatus">[in] A combination of flags from the SccStatus enumeration. For a list of possible values, see File Status Code Enumerator.</param>
      <param name="psiGlyph">[out] Returns the icon to display as a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.If this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, it must set <paramref name="psiGlyph" /> to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> value other than <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsStateIcon.STATEICON_NOSTATEICON" /> (which is always considered an invalid icon index).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.IsInstalled(System.Int32@)">
      <summary>This function determines whether the source control package is installed. Source control packages should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> and <paramref name="pbInstalled" /> = nonzero.</summary>
      <param name="pbInstalled">[out] Returns nonzero (<see langword="true" />) if the source control package is installed; otherwise, returns zero (<see langword="false" />). Source control packages should always set this to nonzero (<see langword="true" />).</param>
      <returns>Source control packages should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.RegisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2,System.String,System.String,System.String,System.String)">
      <summary>This method is called by projects that are under source control when they are first opened to register project settings.</summary>
      <param name="pscp2Project">[in] Pointer to the project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2" /> interface. This interface must be on the same object that supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
      <param name="pszSccProjectName">[in] A string that identifies the project location on the server.</param>
      <param name="pszSccAuxPath">[in] A string that identifies the path to the server.</param>
      <param name="pszSccLocalPath">[in] A string that identifies the local path to the project.</param>
      <param name="pszProvider">[in] A string that identifies the source control package.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccManager2.UnregisterSccProject(Microsoft.VisualStudio.Shell.Interop.IVsSccProject2)">
      <summary>Called by projects registered with the source control portion of the environment before they are closed.</summary>
      <param name="pscp2Project">[in] Pointer to the project's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2" /> interface. 
            Note   This interface must be on the same object that supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject3" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.</summary>
      <param name="itemid">[in] Identifier for the <see langword="VSITEMID" /> being queried.</param>
      <param name="pCaStringsOut">[out] Pointer to an array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" /> strings containing the file names for this item.</param>
      <param name="pCaFlagsOut">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" /> array of flags stored in <see langword="DWORD" />s indicating that some of the files have special behaviors.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.If a project returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject3.GetMkDocument(System.UInt32,System.String@)" /> will be called to discover the file associated with the node. If each of a project's nodes refers to a single file, and there are no special files, then a project can safely always return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])">
      <summary>This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy.</summary>
      <param name="itemid">[in] Identifier of the item being queried. Value is taken from the <see langword="VSITEMID" /><see langword="DWORD" />.</param>
      <param name="pszSccFile">[in] One of the files associated with the node..</param>
      <param name="pCaStringsOut">[out] Special files associated with the file indicated by the <paramref name="pszSccFile" /> value. These are returned in a <see cref="T:Microsoft.VisualStudio.OLE.Interop.CALPOLESTR" /> array.</param>
      <param name="pCaFlagsOut">[out] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.CADWORD" /> structure. </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])">
      <summary>This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes.</summary>
      <param name="cAffectedNodes">[in] Count of changed nodes.</param>
      <param name="rgitemidAffectedNodes">[in] An array of <see langword="VSITEMID" /> identifiers of the changed nodes.</param>
      <param name="rgsiNewGlyphs">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> glyphs representing the new state of the corresponding item in <paramref name="rgitemidAffectedNodes" />.</param>
      <param name="rgdwNewSccStatus">[in] An array of status flags from the File Status Code Enumerator (SccStatus) corresponding to <paramref name="rgitemidAffectedNodes" />. </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSccProject2.SetSccLocation(System.String,System.String,System.String,System.String)">
      <summary>This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.</summary>
      <param name="pszSccProjectName">[in] String, opaque to the project, that identifies the project location on the server. Persist this string in the project file.</param>
      <param name="pszSccAuxPath">[in] String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>
      <param name="pszSccLocalPath">[in] String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>
      <param name="pszSccProvider">[in] String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnCmdUIContextChanged(System.UInt32,System.Int32)">
      <summary>Reports that the command UI context has changed.</summary>
      <param name="dwCmdUICookie">[in] DWORD representation of the GUID identifying the command UI context passed in as the <paramref name="rguidCmdUI" /> parameter in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCmdUIContextCookie(System.Guid@,System.UInt32@)" />.</param>
      <param name="fActive">[in] Flag that is set to <see langword="true" /> if the command UI context identified by <paramref name="dwCmdUICookie" /> has become active and <see langword="false" /> if it has become inactive.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnElementValueChanged(System.UInt32,System.Object,System.Object)">
      <summary>Reports that an element value has changed.</summary>
      <param name="elementid">[in] DWORD value representing a particular entry in the array of element values associated with the selection context. For valid <paramref name="elementid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID" />.</param>
      <param name="varValueOld">[in] VARIANT that contains the previous element value. This parameter contains element-specific data, such as a pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface if <paramref name="elementid" /> is set to <see langword="SEID_ResultsList" /> or a pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface if <paramref name="elementid" /> is set to <see langword="SEID_UndoManager" />.</param>
      <param name="varValueNew">[in] VARIANT that contains the new element value. This parameter contains element-specific data, such as a pointer to the <see langword="IOleCommandTarget" /> interface if <paramref name="elementid" /> is set to <see langword="SEID_ResultsList" /> or a pointer to the <see langword="IOleUndoManager" /> interface if <paramref name="elementid" /> is set to <see langword="SEID_UndoManager" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <summary>Reports that the project hierarchy, item and/or selection container has changed.</summary>
      <param name="pHierOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project hierarchy for the previous selection.</param>
      <param name="itemidOld">[in] Identifier of the project item for previous selection. For valid <paramref name="itemidOld" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pMISOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to access a previous multiple selection.</param>
      <param name="pSCOld">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to access Properties window data for the previous selection.</param>
      <param name="pHierNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project hierarchy for the current selection.</param>
      <param name="itemidNew">[in] Identifier of the project item for the current selection. For valid <paramref name="itemidNew" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pMISNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface for the current selection.</param>
      <param name="pSCNew">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface for the current selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.AdviseBroadcastMessages(Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents,System.UInt32@)">
      <summary>Enables clients to receive messages that are typically broadcast only to the main application window.</summary>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents" /> interface. You will receive notification of its implementation.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle required to unadvise the client of broadcast messages in the environment.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.AdviseShellPropertyChanges(Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents,System.UInt32@)">
      <summary>Enables clients to receive notifications of property changes to the environment.</summary>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle to the client that will be notified of changes to environment properties</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetPackageEnum(Microsoft.VisualStudio.Shell.Interop.IEnumPackages@)">
      <summary>Returns a standard enumerator to iterate through the VSPackages currently loaded by the environment.</summary>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumPackages" /> interface that specifies the enumerator of the loaded VSPackage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.GetProperty(System.Int32,System.Object@)">
      <summary>Returns an environment property.</summary>
      <param name="propid">[in] Identifier of the environment property. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID" />.</param>
      <param name="pvar">[out] Pointer to a VARIANT structure containing the value of the specified property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.IsPackageInstalled(System.Guid@,System.Int32@)">
      <summary>Determines whether a VSPackage identified by guidPackage is installed and registered with the system.</summary>
      <param name="guidPackage">[in] Unique identifier of the VSPackage.</param>
      <param name="pfInstalled">[out, retval] <see langword="true" /> if the VSPackage is installed in the registry.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.IsPackageLoaded(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsPackage@)">
      <summary>Determines whether a VSPackage identified by the package GUID (<paramref name="guidPackage" />) is loaded in the environment.</summary>
      <param name="guidPackage">[in] GUID identifying a specific VSPackage.</param>
      <param name="ppPackage">[out] Pointer to a pointer to a package object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadPackage(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsPackage@)">
      <summary>Triggers a VSPackage implementation DLL to be loaded into the environment.</summary>
      <param name="guidPackage">[in] Unique identifier of the VSPackage.</param>
      <param name="ppPackage">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" /> interface of the VSPackage that has just been loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadPackageString(System.Guid@,System.UInt32,System.String@)">
      <summary>Directly loads a localized string from a VSPackage satellite DLL.</summary>
      <param name="guidPackage">[in] Unique identifier of the VSPackage whose UI DLL contains the string specified to load.</param>
      <param name="resid">[in] Identifier of the string table resource.</param>
      <param name="pbstrOut">[out, retval] Pointer to the requested string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.LoadUILibrary(System.Guid@,System.UInt32,System.UInt32@)">
      <summary>Triggers the satellite DLL to load if it has not already done so.</summary>
      <param name="guidPackage">[in] Unique identifier of the satellite DLL to be loaded.</param>
      <param name="dwExFlags">[in] Flags that are directly passed to the Microsoft Win32 LoadLibrary API.</param>
      <param name="phinstOut">[out, retval] Pointer to the HINSTANCE of the loaded library.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.SetProperty(System.Int32,System.Object)">
      <summary>Sets an environment property.</summary>
      <param name="propid">[in] Identifier of the environment property. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID" />.</param>
      <param name="var">[in] VARIANT structure that contains information on how to set the property identified by <paramref name="propid" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.UnadviseBroadcastMessages(System.UInt32)">
      <summary>Disables clients from receiving messages typically broadcast only to the main application window.</summary>
      <param name="dwCookie">[in] Abstract handle used to unadvise the client of broadcast messages in the environment.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShell.UnadviseShellPropertyChanges(System.UInt32)">
      <summary>Disables clients from receiving notifications of property changes to the environment.</summary>
      <param name="dwCookie">[in] Abstract handle used to unadvise the client of property changes to the environment.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsShellPropertyEvents.OnShellPropertyChange(System.Int32,System.Object)">
      <summary> Called when a shell property changes.</summary>
      <param name="propid">[in] ID of the property that changed.</param>
      <param name="var">[in] the new value of the property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory.LoadDocument(System.String,System.Guid@,System.IntPtr@)">
      <summary>Loads the given file into a document data object and returns the given interface on that object.</summary>
      <param name="pszMkDocument">[in] Pointer to a string containing the path and file name.</param>
      <param name="riid">[in] Pointer to a GUID that is the REFIID of the interface desired.</param>
      <param name="ppDocData">[out] Pointer to the desired interface on the object implementing <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.DefaultExtension(System.String@)">
      <summary>Retrieves the file extension that is given to the output file name.</summary>
      <param name="pbstrDefaultExtension">[out, retval] Returns the file extension that is to be given to the output file name. The returned extension must include a leading period. </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator.Generate(System.String,System.String,System.String,System.IntPtr[],System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress)">
      <summary>Executes the transformation and returns the newly generated output file, whenever a custom tool is loaded, or the input file is saved.</summary>
      <param name="wszInputFilePath">[in] The full path of the input file. May be <see langword="null" /> in future releases of Visual Studio, so generators should not rely on this value.</param>
      <param name="bstrInputFileContents">[in] The contents of the input file. This is either a UNICODE BSTR (if the input file is text) or a binary BSTR (if the input file is binary). If the input file is a text file, the project system automatically converts the BSTR to UNICODE.</param>
      <param name="wszDefaultNamespace">[in] This parameter is meaningful only for custom tools that generate code. It represents the namespace into which the generated code will be placed. If the parameter is not <see langword="null" /> and not empty, the custom tool can use the following syntax to enclose the generated code.
               ' Visual Basic Namespace [default namespace]
          
            ... End Namespace
          
            // Visual C#
          
            namespace [default namespace] { ... }
          </param>
      <param name="rgbOutputFileContents">[out] Returns an array of bytes to be written to the generated file. You must include UNICODE or UTF-8 signature bytes in the returned byte array, as this is a raw stream. The memory for <paramref name="rgbOutputFileContents" /> must be allocated using the .NET Framework call, System.Runtime.InteropServices.AllocCoTaskMem, or the equivalent Win32 system call, CoTaskMemAlloc. The project system is responsible for freeing this memory.</param>
      <param name="pcbOutput">[out] Returns the count of bytes in the <paramref name="rgbOutputFileContent" /> array.</param>
      <param name="pGenerateProgress">[in] A reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGeneratorProgress" /> interface through which the generator can report its progress to the project system.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Adds a type of virtual project that is not created by clicking Open Project on the New menu to open the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the virtual project object. This object must support at least the following interfaces: <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /></param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)">
      <summary>Assigns the original GUID to the project when it is recreated the next time the solution is opened.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <param name="rguidProjectID">[in] Unique project identifier (GUID).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.AdviseSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents,System.UInt32@)">
      <summary>Establishes client notification of solution events.</summary>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CanCreateNewProjectAtLocation(System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a new project can be created at a given location.</summary>
      <param name="fCreateNewSolution">[in] If <see langword="true" />, then a new solution will be created.</param>
      <param name="pszFullProjectFilePath">[in] Project path (including file name and extension) of the location to create the new project.</param>
      <param name="pfCanCreate">[out] If <see langword="true" />, then a new project of a given name can be created at the specified location. If <see langword="false" />, then a project of the same name already exists at the specified location.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CloseSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically closes a document, a project, or the entire solution.</summary>
      <param name="grfCloseOpts">[in] Close options for the solution (.sln) file. For a list of <paramref name="grfCloseOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to close.</param>
      <param name="docCookie">[in] Document that was closed. This value is returned from the running document table, by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateNewProjectViaDlg(System.String,System.String,System.UInt32)">
      <summary>Controls options for the Create New Project dialog box.</summary>
      <param name="pszExpand">[in] Tree view node that is selected.</param>
      <param name="pszSelect">[in] List view item that is selected.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateProject(System.Guid@,System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@)">
      <summary>Creates or opens a project.</summary>
      <param name="rguidProjectType">[in] Unique identifier for the project type obtained when the project factory is registered. Can be GUID_NULL, if a value for <paramref name="lpszMoniker" /> is specified. This parameter indicates the type of project to create or to add to the solution. If the value is GUID_NULL, then the environment attempts to determine the project type based on the extension of the file.</param>
      <param name="lpszMoniker">[in] Pointer to the file moniker. If this method is used to open a project, then specify the path to the project on disk (including project name and file extension). If the method is being used to create a project, then specify the full path to the template file that will be cloned.</param>
      <param name="lpszLocation">[in] Pointer to the path specifying the location for the new project. This parameter is used only when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE" /> is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is <see langword="null" /> (for open project). If the project is a directory-based project, then this is the directory for the project. The project file for the project is saved in this directory. If the project is not directory-based, then this location is used only to save the project file and perhaps as the default directory for newly created items. The <paramref name="szLocation" /> parameter is defined to always include the trailing slash (\). Then, the project factory does not have to look for paths that look like "C:\" versus "C:\MyProjects\Project1" when constructing the path name of the project file.</param>
      <param name="lpszName">[in] Pointer to the new project name. This parameter is used only when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE" /> is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is <see langword="null" /> (for open project). The project name does not include a file extension.</param>
      <param name="grfCreateFlags">[in] Controls how a project is created or opened. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="iidProject">[in] Interface identifier of the returned <paramref name="ppProject" />. This value can be iid_NULL to specify no return.</param>
      <param name="ppProject">[out, iid_is(iidProject)] Pointer to the newly created project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.CreateSolution(System.String,System.String,System.UInt32)">
      <summary>Creates a new solution.</summary>
      <param name="lpszLocation">[in, unique] Path to the solution, excluding the filename.</param>
      <param name="lpszName">[in] Filename, excluding the extension.</param>
      <param name="grfCreateFlags">[in, unique] Controls how a new solution is created. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GenerateNextDefaultProjectName(System.String,System.String,System.String@)">
      <summary>This method obtains the default name for the next project in the solution (ProjectN).Generates the next default project name given a specific path.</summary>
      <param name="pszBaseName">[in] Root name of the project.</param>
      <param name="pszLocation">[in] Location of the project (path).</param>
      <param name="pbstrProjectName">[out] Pointer to returned project name.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GenerateUniqueProjectName(System.String,System.String@)">
      <summary>Generates a unique project name, given a root project name.</summary>
      <param name="lpszRoot">[in] Root project name. Passing in <see langword="null" /> causes the environment to use an appropriate default value for the name, like Project.</param>
      <param name="pbstrProjectName">[out] Pointer to the project name based on the root project name specified in the <paramref name="lpszRoot" /> parameter. This value is unique within the solution.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Returns the unique identifier for a project in the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project for which the identifier is requested.</param>
      <param name="pguidProjectID">[out] Pointer to the unique identifier of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetItemInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project item reference.</summary>
      <param name="pszProjref">[in] Project item reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetItemOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy and hierarchy item pair for the specified project reference string.</summary>
      <param name="pszProjref">[in] Pointer to the existing project item reference string, if applicable. Can be <see langword="null" />.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pitemid">[out] Pointer to the item identifier referred to by the project reference. For a list of enumerated <paramref name="pitemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identifier describing the reason for a change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectEnum(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Returns an enumerator for all the projects in the solution.</summary>
      <param name="grfEnumFlags">[in] Specifies the projects to enumerate within a solution. For a list of <paramref name="grfEnumFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS" />.</param>
      <param name="rguidEnumOnlyThisType">[in] If the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE" /> flag is specified, the enumerator iterates projects of this type only. Otherwise, this parameter is ignored.</param>
      <param name="ppenum">[out] Pointer to the project enumerator.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectFactory(System.UInt32,System.Guid[],System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory@)">
      <summary>Returns a project factory.</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidProjectType">[in, out] Unique identifier (GUID) of the project type. This parameter can be <see langword="null" /> if a value is specified for <paramref name="pszMkProject" />.</param>
      <param name="pszMkProject">[in] Path to the project. This parameter can be <see langword="null" /> if a value is specified for <paramref name="pguidProjectType" />.</param>
      <param name="ppProjectFactory">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface of the requested project factory.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectFilesInSolution(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
      <summary>Compiles a list of the specified projects in the solution.</summary>
      <param name="grfGetOpts">[in] Options for returning the array of solution projects. For a list of <paramref name="grfGetOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS" />.</param>
      <param name="cProjects">[in] Number of projects in the solution, based on the option specified for the <paramref name="grfGetOpts" /> parameter.</param>
      <param name="rgbstrProjectNames">[out] Pointer to array of projects within the solution.</param>
      <param name="pcProjectsFetched">[out] Pointer to the number of project names placed in the array.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project reference.</summary>
      <param name="pszProjref">[in] Project reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information is passed back to the caller through this parameter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfGuid(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique identifier.</summary>
      <param name="rguidProjectID">[in] Unique identifier (GUID) for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by the identifier.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy for the specified project reference string.</summary>
      <param name="pszProjref">[in] Pointer to the existing project reference string, if applicable. Can be <see langword="null" />.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identified describing the reason for the change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectOfUniqueName(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique name.</summary>
      <param name="pszUniqueName">[in] Unique name for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by <paramref name="pszUniqueName" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjectTypeGuid(System.UInt32,System.String,System.Guid@)">
      <summary>Returns the project type, given a GUID.</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pszMkProject">[in] Pointer to the path of the project.</param>
      <param name="pguidProjectType">[out, retval] Pointer to the project type.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjrefOfItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy and hierarchy item pair.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemid">[in] Valid item identifier within the project; not a <see langword="VSITEMID" /> value.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProjrefOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified hierarchy.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetProperty(System.Int32,System.Object@)">
      <summary>Returns the specified property of the solution.</summary>
      <param name="propid">[in] Property identifier for the required property information. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="pvar">[out] Pointer to property information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetSolutionInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the required solution file information.</summary>
      <param name="pbstrSolutionDirectory">[out] Pointer to the solution directory.</param>
      <param name="pbstrSolutionFile">[out] Pointer to the solution file name.</param>
      <param name="pbstrUserOptsFile">[out] Pointer to the solutions options file name.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetUniqueNameOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns the unique name, given a project in the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pbstrUniqueName">[out] Pointer to the unique name of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.GetVirtualProjectFlags(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32@)">
      <summary>Determines how the virtual project was added to the Solution Explorer.</summary>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified virtual project.</param>
      <param name="pgrfAddVPFlags">[out] Pointer to options for how virtual project was added to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32)">
      <summary>Completes the renaming of a project.</summary>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionFile(System.UInt32,System.String)">
      <summary>Opens a solution file of the type .sln, .dsw, or .vbg.</summary>
      <param name="grfOpenOpts">[in] Options for opening a solution file. For a list of <paramref name="grfOpenOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS" />.</param>
      <param name="pszFilename">[in] Pointer to the name of the solution file to open.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.OpenSolutionViaDlg(System.String,System.Int32)">
      <summary>Controls options for the Open Solution dialog box.</summary>
      <param name="pszStartDirectory">[in] Start directory pointed to by the Open Solution dialog box.</param>
      <param name="fDefaultToAllProjectsFilter">[in] If <see langword="true" />, then the All Project filter is defaulted to instead of the solution filter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.QueryEditSolutionFile(System.UInt32@)">
      <summary>Determines whether the solution file can be changed.</summary>
      <param name="pdwEditResult">[out] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_NoEdit_UserCanceled" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.QueryRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether the project can be renamed.</summary>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pfRenameCanContinue">[out] If <see langword="true" />, then the project can be renamed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.RemoveVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Removes a virtual project from the solution.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfRemoveVPFlags">[in] Options for removing the virtual project from the solution. For a list of <paramref name="grfRemoveVPFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.SaveSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically saves a document, a project, or the entire solution.</summary>
      <param name="grfSaveOpts">[in] Save Options. For a list of <paramref name="grfSaveOpts" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to save.</param>
      <param name="docCookie">[in] Abstract handle to the element that was saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.SetProperty(System.Int32,System.Object)">
      <summary>Generically sets properties of the solution.</summary>
      <param name="propid">[in] Identifier of the solution property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="var">[out] Pointer to VARIANT that contains the property settings.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution.UnadviseSolutionEvents(System.UInt32)">
      <summary>Disables a client from receiving notifications of solution events.</summary>
      <param name="dwCookie">[in] Abstract handle to the client that is to be disabled from being notified of solution events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AddVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Adds a type of virtual project that is not created by clicking OpenProject on the New menu to open the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the virtual project object. This object must support at least the following interfaces: <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /></param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AddVirtualProjectEx(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.Guid@)">
      <summary>Assigns the original GUID to the project when it is recreated the next time the solution is opened.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfAddVPFlags">[in] Determines whether to add a new virtual project to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <param name="rguidProjectID">[in] Unique project identifier (GUID).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.AdviseSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents,System.UInt32@)">
      <summary>Establishes client notification of solution events.</summary>
      <param name="pSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CanCreateNewProjectAtLocation(System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a new project can be created at a given location.</summary>
      <param name="fCreateNewSolution">[in] If <see langword="true" />, then a new solution will be created.</param>
      <param name="pszFullProjectFilePath">[in] Project path (including file name and extension) of the location to create the new project.</param>
      <param name="pfCanCreate">[out] If <see langword="true" />, then a new project of a given name can be created at the specified location. If <see langword="false" />, then a project of the same name already exists at the specified location.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CloseSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically closes a document, a project, or the entire solution.</summary>
      <param name="grfCloseOpts">[in] Close options for the solution (.sln) file. For a list of <paramref name="grfCloseOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to close.</param>
      <param name="docCookie">[in] Document that was closed. This value is returned from the running document table, by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.GetDocumentInfo(System.UInt32,System.UInt32@,System.UInt32@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.IntPtr@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateNewProjectViaDlg(System.String,System.String,System.UInt32)">
      <summary>Controls options for the Create New Project dialog box.</summary>
      <param name="pszExpand">[in] Tree view node that is selected.</param>
      <param name="pszSelect">[in] List view item that is selected.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateProject(System.Guid@,System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@)">
      <summary>Creates or opens a project.</summary>
      <param name="rguidProjectType">[in] Unique identifier for the project type obtained when the project factory is registered. Can be GUID_NULL, if a value for <paramref name="lpszMoniker" /> is specified. This parameter indicates the type of project to create or to add to the solution. If the value is GUID_NULL, then the environment attempts to determine the project type based on the extension of the file.</param>
      <param name="lpszMoniker">[in] Pointer to the file moniker. If this method is used to open a project, then specify the path to the project on disk (including project name and file extension). If the method is being used to create a project, then specify the full path to the template file that will be cloned.</param>
      <param name="lpszLocation">[in] Pointer to the path specifying the location for the new project. This parameter is used only when CPF_CLONEFILE is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is <see langword="null" /> (for open project). If the project is a directory-based project, then this is the directory for the project. The project file for the project is saved in this directory. If the project is not directory-based, then this location is used only to save the project file and perhaps as the default directory for newly created items. The <paramref name="szLocation" /> parameter is defined to always include the trailing slash (\). Then, the project factory does not have to look for paths that look like "C:\" versus "C:\MyProjects\Project1" when constructing the path name of the project file.</param>
      <param name="lpszName">[in] Pointer to the new project name. This parameter is used only when CPF_CLONEFILE is specified for the <paramref name="grfCreateFlags" /> parameter; otherwise it is <see langword="null" /> (for open project). The project name does not include a file extension.</param>
      <param name="grfCreateFlags">[in] Controls how a project is created or opened. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="iidProject">[in] Interface identifier of the returned <paramref name="ppProject" />. This value can be iid_NULL to specify no return.</param>
      <param name="ppProject">[out, iid_is(iidProject)] Pointer to the newly created project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.CreateSolution(System.String,System.String,System.UInt32)">
      <summary>Creates a new solution.</summary>
      <param name="lpszLocation">[in, unique] Path to the solution, excluding the filename.</param>
      <param name="lpszName">[in] Filename, excluding the extension.</param>
      <param name="grfCreateFlags">[in, unique] Controls how a new solution is created. For a list of <paramref name="grfCreateFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GenerateNextDefaultProjectName(System.String,System.String,System.String@)">
      <summary>Generates the next default project name given a specific path.</summary>
      <param name="pszBaseName">[in] Root name of the project.</param>
      <param name="pszLocation">[in] Location of the project (path).</param>
      <param name="pbstrProjectName">[out] Pointer to returned project name.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GenerateUniqueProjectName(System.String,System.String@)">
      <summary>Generates a unique project name, given a root project name.</summary>
      <param name="lpszRoot">[in] Root project name. Passing in <see langword="null" /> causes the environment to use an appropriate default value for the name, like Project.</param>
      <param name="pbstrProjectName">[out] Pointer to the project name based on the root project name specified in the <paramref name="lpszRoot" /> parameter. This value is unique within the solution.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetGuidOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Returns the unique identifier for a project in the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project for which the identifier is requested.</param>
      <param name="pguidProjectID">[out] Pointer to the unique identifier of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetItemInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project item reference.</summary>
      <param name="pszProjref">[in] Project item reference for which information is required.</param>
      <param name="propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Property information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetItemOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy and hierarchy item pair for the specified project reference string.</summary>
      <param name="pszProjref">[in] Pointer to the existing project item reference string, if applicable. Can be <see langword="null" />.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pitemid">[out] Pointer to the item identifier referred to by the project reference. For a list of enumerated <paramref name="pitemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identifier describing the reason for a change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectEnum(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumHierarchies@)">
      <summary>Returns an enumerator for all the projects in the solution.</summary>
      <param name="grfEnumFlags">[in] Specifies the projects to enumerate within a solution. For a list of <paramref name="grfEnumFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS" />.</param>
      <param name="rguidEnumOnlyThisType">[in] If the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE" /> flag is specified, the enumerator iterates projects of this type only. Otherwise, this parameter is ignored.</param>
      <param name="ppenum">[out] Pointer to the project enumerator.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectFactory(System.UInt32,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory@)">
      <summary>Returns a project factory.</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidProjectType">[in, out] Unique identifier (GUID) of the project type. This parameter can be <see langword="null" /> if a value is specified for <paramref name="pszMkProject" />.</param>
      <param name="pszMkProject">[in] Path to the project. This parameter can be <see langword="null" /> if a value is specified for <paramref name="pguidProjectType" />.</param>
      <param name="ppProjectFactory">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectFactory" /> interface of the requested project factory.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectFilesInSolution(System.UInt32,System.UInt32,System.String[],System.UInt32@)">
      <summary>Compiles a list of the specified projects in the solution.</summary>
      <param name="grfGetOpts">[in] Options for returning the array of solution projects. For a list of <paramref name="grfGetOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS" />.</param>
      <param name="cProjects">[in] Number of projects in the solution, based on the option specified for the <paramref name="grfGetOpts" /> parameter.</param>
      <param name="rgbstrProjectNames">[out] Pointer to array of projects within the solution.</param>
      <param name="pcProjectsFetched">[out] Pointer to the number of project names placed in the array.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectInfoOfProjref(System.String,System.Int32,System.Object@)">
      <summary>Obtains the required property for the specified project reference.</summary>
      <param name="pszProjref">[in] Project reference for which information is required.</param>
      <param name="Propid">[in] Property identifier. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="Pvar">[out] Property information is passed back to the caller through this parameter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfGuid(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique identifier.</summary>
      <param name="rguidProjectID">[in] Unique identifier (GUID) for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by the identifier.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfProjref(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.String@,Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON[])">
      <summary>Returns a hierarchy for the specified project reference string.</summary>
      <param name="pszProjref">[in] Pointer to the existing project reference string, if applicable. Can be <see langword="null" />.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface referred to by the project reference.</param>
      <param name="pbstrUpdatedProjref">[out] Pointer to the updated project reference string.</param>
      <param name="puprUpdateReason">[out] Identified describing the reason for the change in the project reference string. For a list of <paramref name="puprUpdateReason" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUPDATEPROJREFREASON" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectOfUniqueName(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the project in the solution, given a unique name.</summary>
      <param name="pszUniqueName">[in] Unique name for the project.</param>
      <param name="ppHierarchy">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project referred to by <paramref name="pszUniqueName" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjectTypeGuid(System.UInt32,System.String,System.Guid@)">
      <summary>Returns the project type, given a GUID.</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pszMkProject">[in] Pointer to the path of the project.</param>
      <param name="pguidProjectType">[out, retval] Pointer to the project type.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjrefOfItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy and hierarchy item pair.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface.</param>
      <param name="itemid">[in] Valid item identifier within the project; not a <see langword="VSITEMID" /> value.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProjrefOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns a project reference string for the specified hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified hierarchy.</param>
      <param name="pbstrProjref">[out] Pointer to the project reference string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetProperty(System.Int32,System.Object@)">
      <summary>Returns the specified property of the solution.</summary>
      <param name="propid">[in] Property identifier for the required property information. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="pvar">[out] Pointer to property information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetSolutionInfo(System.String@,System.String@,System.String@)">
      <summary>Returns the required solution file information.</summary>
      <param name="pbstrSolutionDirectory">[out] Pointer to the solution directory.</param>
      <param name="pbstrSolutionFile">[out] Pointer to the solution file name.</param>
      <param name="pbstrUserOptsFile">[out] Pointer to the solutions options file name.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetUniqueNameOfProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@)">
      <summary>Returns the unique name, given a project in the solution.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pbstrUniqueName">[out] Pointer to the unique name of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.GetVirtualProjectFlags(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32@)">
      <summary>Determines how the virtual project was added to the Solution Explorer.</summary>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the specified virtual project.</param>
      <param name="pgrfAddVPFlags">[out] Pointer to options for how virtual project was added to the Solution Explorer. For a list of <paramref name="grfAddVPFlags" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32)">
      <summary>Completes the renaming of a project.</summary>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OpenSolutionFile(System.UInt32,System.String)">
      <summary>Opens a solution file of the type .sln, .dsw, or .vbg.</summary>
      <param name="grfOpenOpts">[in] Options for opening a solution file. For a list of <paramref name="grfOpenOpts" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS" />.</param>
      <param name="pszFilename">[in] Pointer to the name of the solution file to open.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.OpenSolutionViaDlg(System.String,System.Int32)">
      <summary>Controls options for the Open Solution dialog box.</summary>
      <param name="pszStartDirectory">[in] Start directory pointed to by the Open Solution dialog box.</param>
      <param name="fDefaultToAllProjectsFilter">[in] If <see langword="true" />, then the All Project filter is defaulted to instead of the solution filter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.QueryEditSolutionFile(System.UInt32@)">
      <summary>Determines whether the solution file can be changed.</summary>
      <param name="pdwEditResult">[out] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_EditOK" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult.QER_NoEdit_UserCanceled" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.QueryRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether the project can be renamed.</summary>
      <param name="pProject">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> pointer for the project to rename.</param>
      <param name="pszMkOldName">[in] Old name of the project on disk.</param>
      <param name="pszMkNewName">[in] New name of the project on disk.</param>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pfRenameCanContinue">[out] If <see langword="true" />, then the project can be renamed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.RemoveVirtualProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Removes a virtual project from the solution.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <param name="grfRemoveVPFlags">[in] Options for removing the virtual project from the solution. For a list of <paramref name="grfRemoveVPFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.SaveSolutionElement(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Programmatically saves a document, a project, or the entire solution.</summary>
      <param name="grfSaveOpts">[in] Save Options. For a list of <paramref name="grfSaveOpts" />, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" />.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the document to save.</param>
      <param name="docCookie">[in] Abstract handle to the element that was saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.SetProperty(System.Int32,System.Object)">
      <summary>Generically sets properties of the solution.</summary>
      <param name="Propid">[in] Identifier of the solution property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID" />.</param>
      <param name="Var">[out] Pointer to VARIANT that contains the property settings.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.UnadviseSolutionEvents(System.UInt32)">
      <summary>Disables a client from receiving notifications of solution events.</summary>
      <param name="dwCookie">[in] Abstract handle to the client that is to be disabled from being notified of solution events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution2.UpdateProjectFileLocation(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies a solution of a project file location change.</summary>
      <param name="pHierarchy">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)">
      <summary>Adds the caller to the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents" /> events.</summary>
      <param name="pIVsUpdateSolutionEvents">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents" /> interface on the object requesting notification of solution events.</param>
      <param name="pdwCookie">[out] Pointer to a double word containing the cookie.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.CanCancelUpdateSolutionConfiguration(System.Int32@)">
      <summary>Enables or disables the Cancel menu item.</summary>
      <param name="pfCanCancel">[out] Pointer to a flag indicating whether or nor the update can be cancelled.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.CancelUpdateSolutionConfiguration">
      <summary>Cancels the update solution configuration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.DebugLaunch(System.UInt32)">
      <summary>Launches the startup project specified by the solution as the debug project.</summary>
      <param name="grfLaunch">[in] Specifies launch flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.FindActiveProjectCfg(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg[])">
      <summary>Determines the project configuration that is currently active.</summary>
      <param name="pvReserved1">[in] Reserved. Must be <see langword="null" />.</param>
      <param name="pvReserved2">[in] Reserved. Must be <see langword="null" />.</param>
      <param name="pIVsHierarchy_RequestedProject">[in] Pointer to an <see langword="IVsHierarchy_RequestedProject" /> object.</param>
      <param name="ppIVsProjectCfg_Active">[out] Pointer to a pointer to an <see langword="IVsProjectCfg_Active" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_CodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiCodePage">Do not use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_IsDebug(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebug">Do not use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.get_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Programmatic method to get the startup project that will be run when the F5 key is pressed.</summary>
      <param name="ppHierarchy">[out] Pointer to a pointer to a hierarchy object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.GetProjectDependencies(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32[])">
      <summary>Returns a list of projects that the given hierarchy depends on.</summary>
      <param name="pHier">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <param name="celt">[in] Specifies <paramref name="celt" />.</param>
      <param name="rgpHier">[in, out] Specifies projects to build.</param>
      <param name="pcActual">[out, optional] Pointer to the number of projects.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.put_CodePage(System.UInt32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="uiCodePage">Do not use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.put_IsDebug(System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="fIsDebug">Do not use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.QueryBuildManagerBusy(System.Int32@)">
      <summary>Determines if the build manager is busy.</summary>
      <param name="pfBuildManagerBusy">[out] Pointer to a flag indicating that the build manager is busy.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Determines whether or not the F5 (debug start) key should be enabled.</summary>
      <param name="grfLaunch">[in] Specifies how the debugger is launched. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <param name="pfCanLaunch">[out] Pointer to a flag indicating whether or not the debug operation can be launched.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.set_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Sets the startup project that will be run when the F5 key is pressed.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.StartSimpleUpdateProjectConfiguration(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.UInt32,System.UInt32,System.Int32)">
      <summary>This is a variant of the update command that allows you to build, clean, deploy, or launch a single project configuration.</summary>
      <param name="pIVsHierarchyToBuild">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of the project to build.</param>
      <param name="pIVsHierarchyDependent">[in] Pointer to an optional dependent project in the dependency graph contained in <see langword="IVsHierarchy" />.</param>
      <param name="pszDependentConfigurationCanonicalName">[in] Pointer to a null terminated string containing the optional dependent configuration canonical name.</param>
      <param name="dwFlags">[in] Double word containing the build update flags. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" />.</param>
      <param name="dwDefQueryResults">[in] Double word containing the def query results. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" />.</param>
      <param name="fSuppressUI">[in] Set to <see langword="true" /> to use the default response to any dialogs, which will not be displayed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.StartSimpleUpdateSolutionConfiguration(System.UInt32,System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of solutions.</summary>
      <param name="dwFlags">[in] Double word containing the build update flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" /> for more information.</param>
      <param name="dwDefQueryResults">[in] Double word containing the <paramref name="DefQueryResults" />. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" /> for more information.</param>
      <param name="fSuppressUI">[in] Set to <see langword="true" /> to use the default response to any dialogs, which will not be displayed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UnadviseUpdateSolutionEvents(System.UInt32)">
      <summary>Removes the caller from the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <param name="dwCookie">[in] Double word containing the cookie received from a previous call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.UpdateSolutionConfigurationIsActive(System.Int32@)">
      <summary>Checks for any build, clean, or deploy action in progress.</summary>
      <param name="pfIsActive">[out] Pointer to a flag indicating whether an action is active.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)">
      <summary>Adds the caller to the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <param name="pIVsUpdateSolutionEvents">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents" /> object.</param>
      <param name="pdwCookie">[out] Pointer to a double word containing the cookie.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CalculateProjectDependencies">
      <summary>Forces dependencies to be recalculated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CanCancelUpdateSolutionConfiguration(System.Int32@)">
      <summary>Enables or disables the Cancel menu item.</summary>
      <param name="pfCanCancel">[out] Pointer to a flag indicating whether or nor the update can be cancelled.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.CancelUpdateSolutionConfiguration">
      <summary>Cancels the update solution configuration.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.DebugLaunch(System.UInt32)">
      <summary>Launches the startup project specified by the solution as the debug project.</summary>
      <param name="grfLaunch">[in] Specifies the launch flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.FindActiveProjectCfg(System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg[])">
      <summary>Determines the project configuration that is currently active.</summary>
      <param name="pvReserved1">[in] Reserved. Must be <see langword="null" />.</param>
      <param name="pvReserved2">[in] Reserved. Must be <see langword="null" />.</param>
      <param name="pIVsHierarchy_RequestedProject">[in] Pointer to an <paramref name="IVsHierarchy_RequestedProject" /> object.</param>
      <param name="ppIVsProjectCfg_Active">[out] Pointer to a pointer to an <paramref name="IVsProjectCfg_Active" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_CodePage(System.UInt32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="puiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_IsDebug(System.Int32@)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="pfIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.get_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Programmatic method to get the startup project that will be run when the F5 key is pressed.</summary>
      <param name="ppHierarchy">[out] Pointer to a pointer to a hierarchy object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.GetProjectDependencies(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32[])">
      <summary>Returns a list of projects that the given hierarchy depends on.</summary>
      <param name="pHier">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <param name="celt">[in] Specifies <paramref name="celt" />.</param>
      <param name="rgpHier">[in, out] Specifies projects to build.</param>
      <param name="pcActual">[out, optional] Pointer to the number of projects.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.put_CodePage(System.UInt32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="uiCodePage">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.put_IsDebug(System.Int32)">
      <summary>Obsolete method. Do not use.</summary>
      <param name="fIsDebug">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryBuildManagerBusy(System.Int32@)">
      <summary>Determines if the build manager is busy.</summary>
      <param name="pfBuildManagerBusy">[out] Pointer to a flag indicating that the build manager is busy.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryDebugLaunch(System.UInt32,System.Int32@)">
      <summary>Determines whether or not the F5 (debug start) key should be enabled.</summary>
      <param name="grfLaunch">[in] Specifies how the debugger is launched. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS" /> for more information.</param>
      <param name="pfCanLaunch">[out] Pointer to a flag indicating whether or not the debug operation can be launched.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.QueryProjectDependency(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Checks to see if one project is dependent upon another.</summary>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project to check for dependency on <paramref name="pHierDependentOn" />.</param>
      <param name="pHierDependentOn">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project that <paramref name="pHier" /> may be dependent on.</param>
      <param name="pfIsDependentOn">[out] The flag is set <see langword="true" /> if the dependency relationship exists, otherwise it is set to <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.SaveDocumentsBeforeBuild(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)">
      <summary>A project calls this method to ensure that the buildable/runnable components of projects are saved before starting build or run operations.</summary>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of a project.</param>
      <param name="itemid">[in] Specifies <see langword="VSITEMID" />. This is the <see langword="VSITEMID" /> corresponding to a single document in the project hierarchy.</param>
      <param name="docCookie">[in] Specifies the document cookie; an abstract handle to the document returned when it was registered with <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.set_StartupProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Sets the startup project that will be run when the F5 key is pressed.</summary>
      <param name="pHierarchy">[in] Pointer to a hierarchy object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartSimpleUpdateProjectConfiguration(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.UInt32,System.UInt32,System.Int32)">
      <summary>This is a variant of the update command that allows you to build, clean, deploy, or launch a single project configuration.</summary>
      <param name="pIVsHierarchyToBuild">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object of the project to build.</param>
      <param name="pIVsHierarchyDependent">[in] Pointer to an optional dependent project in the dependency graph contained in <see langword="IVsHierarchy" />.</param>
      <param name="pszDependentConfigurationCanonicalName">[in] Pointer to a null terminated string containing the optional dependent configuration canonical name.</param>
      <param name="dwFlags">[in] Double word containing the build update flags. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2" />.</param>
      <param name="dwDefQueryResults">[in] Double word containing the def query results. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" />.</param>
      <param name="fSuppressUI">[in] Set to <see langword="true" /> to use the default response to any dialogs, which will not be displayed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartSimpleUpdateSolutionConfiguration(System.UInt32,System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of solutions.</summary>
      <param name="dwFlags">[in] Double word containing the build update flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" /> for more information.</param>
      <param name="dwDefQueryResults">[in] Double word containing the <paramref name="DefQueryResults" />. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDQUERYRESULTS" /> for more information.</param>
      <param name="fSuppressUI">[in] Set to <see langword="true" /> to use the default response to any dialogs, which will not be displayed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartUpdateProjectConfigurations(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],System.UInt32,System.Int32)">
      <summary>Builds, cleans, or deploys a list of projects.</summary>
      <param name="cProjs">[in] Count of projects to build.</param>
      <param name="rgpHierProjs">[in] Specifies list of projects to be built.</param>
      <param name="dwFlags">[in] Double word containing the flags. For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" />.</param>
      <param name="fSuppressUI">[in] Set to <see langword="true" /> to use the default response to any dialogs, which will not be displayed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.StartUpdateSpecificProjectConfigurations(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy[],Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[],System.UInt32[],System.UInt32,System.Int32)">
      <summary>Use this method to maintain total control of a build process.</summary>
      <param name="cProjs">[in] Count of projects.</param>
      <param name="rgpHier">[in] Specifies projects to build.</param>
      <param name="rgpcfg">[in] A configuration in the projects specified in <paramref name="rgpHier" />.</param>
      <param name="rgdwCleanFlags">[in] dwOptions parameter for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg2.StartBuildEx(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be <see langword="null" />.</param>
      <param name="rgdwBuildFlags">[in] dwOptions for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg2.StartBuildEx(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be <see langword="null" /></param>
      <param name="rgdwDeployFlags">[in] dwOptions for each corresponding project in <paramref name="rgpHier" /> to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg.StartDeploy(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)" />. Can be <see langword="null" />.</param>
      <param name="dwFlags">[in] Double word containing <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" /> flags.</param>
      <param name="fSuppressUI">[in] Flag should be set <see langword="true" /> to use the default response to any dialogs, which will be suppressed; otherwise <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.UnadviseUpdateSolutionEvents(System.UInt32)">
      <summary>Removes the caller from the list of listeners for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> events.</summary>
      <param name="dwCookie">[in] Double word containing the cookie received from a previous call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager.AdviseUpdateSolutionEvents(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents,System.UInt32@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager2.UpdateSolutionConfigurationIsActive(System.Int32@)">
      <summary>Checks for any build, clean, or deploy action in progress.</summary>
      <param name="pfIsActive">[out] Pointer to a flag indicating whether an action is active.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] <see langword="true" /> if the project is added to the solution after the solution is opened. <see langword="false" /> if the project is added to the solution while the solution is being opened.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] <see langword="true" /> if the solution is being created. <see langword="false" /> if the solution was created previously or is being loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] <see langword="true" /> if the project was removed from the solution before the solution was closed. <see langword="false" /> if the project was removed from the solution while the solution was being closed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] <see langword="true" /> if the project is being removed from the solution before the solution is closed. <see langword="false" /> if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed the closing of the project. <see langword="false" /> if the client approved the closing of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed closing the solution. <see langword="false" /> if the client approved closing the solution.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed unloading the project. <see langword="false" /> if the client approved unloading the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterMergeSolution(System.Object)">
      <summary>Notifies listening clients that all projects have been merged into the open solution.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] <see langword="true" /> if the project is added to the solution after the solution is opened. <see langword="false" /> if the project is added to the solution while the solution is being opened.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] <see langword="true" /> if the solution is being created. <see langword="false" /> if the solution was created previously or is being loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] <see langword="true" /> if the project was removed from the solution before the solution was closed. <see langword="false" /> if the project was removed from the solution while the solution was being closed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] <see langword="true" /> if the project is being removed from the solution before the solution is closed. <see langword="false" /> if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed the closing of the project. <see langword="false" /> if the client approved the closing of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed closing the solution. <see langword="false" /> if the client approved closing the solution.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents2.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed unloading the project. <see langword="false" /> if the client approved unloading the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterCloseSolution(System.Object)">
      <summary>Notifies listening clients that a solution has been closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired after closing all nested projects owned by a parent hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project has been loaded.</summary>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the unloaded project.</param>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that was loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterMergeSolution(System.Object)">
      <summary>Notifies listening clients that all projects have been merged into the open solution.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired after opening all nested projects owned by a parent hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project has been opened.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being loaded.</param>
      <param name="fAdded">[in] <see langword="true" /> if the project is added to the solution after the solution is opened. <see langword="false" /> if the project is added to the solution while the solution is being opened.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnAfterOpenSolution(System.Object,System.Int32)">
      <summary>Notifies listening clients that the solution has been opened.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="fNewSolution">[in] <see langword="true" /> if the solution is being created. <see langword="false" /> if the solution was created previously or is being loaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)">
      <summary>Notifies listening clients that the project is about to be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project being closed.</param>
      <param name="fRemoved">[in] <see langword="true" /> if the project was removed from the solution before the solution was closed. <see langword="false" /> if the project was removed from the solution while the solution was being closed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeCloseSolution(System.Object)">
      <summary>Notifies listening clients that the solution is about to be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired before closing all nested projects owned by a parent hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Fired before opening all nested projects owned by a parent hierarchy.</summary>
      <param name="pHierarchy">[in] Pointer to parent project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Notifies listening clients that the project is about to be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project that will be unloaded.</param>
      <param name="pStubHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the placeholder hierarchy for the project being unloaded.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be closed.</summary>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be closed.</param>
      <param name="fRemoving">[in] <see langword="true" /> if the project is being removed from the solution before the solution is closed. <see langword="false" /> if the project is being removed from the solution while the solution is being closed.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed the closing of the project. <see langword="false" /> if the client approved the closing of the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryCloseSolution(System.Object,System.Int32@)">
      <summary>Queries listening clients as to whether the solution can be closed.</summary>
      <param name="pUnkReserved">[in] Reserved for future use.</param>
      <param name="pfCancel">[out] <see langword="true" /> if the client vetoed closing the solution. <see langword="false" /> if the client approved closing the solution.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents3.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Queries listening clients as to whether the project can be unloaded.</summary>
      <param name="pRealHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project to be unloaded.</param>
      <param name="pfCancel">[out] <see langword="true " />if the client vetoed unloading the project. <see langword="false" /> if the client approved unloading the project.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.LoadPackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
      <summary>Enables the loading of package-level user options that are stored in one or more named streams in the solution .sln file. This method allows the caller to name the option stream (or streams) to be loaded.</summary>
      <param name="pPSO">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts" /> interface.</param>
      <param name="pszKey">[in] Name of the stream to be opened in the options file storage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageSolutionProps(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps,System.String)">
      <summary>Writes properties to the solution .sln file.</summary>
      <param name="fPreLoad">[in] <see langword="true" /> if the solution properties are to be pre-loaded.</param>
      <param name="pHierarchy">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface. A <see langword="null" /> value indicates the global section of the solution file is to be saved.</param>
      <param name="ppSP">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionProps" /> interface.</param>
      <param name="pszKey">[in] Name of the solution file section (the property bag) for which the properties should be written.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionPersistence.SavePackageUserOpts(Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts,System.String)">
      <summary>Writes user options to the solution file. Saves package-level user options to one or more named streams in the solution .sln file.</summary>
      <param name="pPSO">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistSolutionOpts" /> interface.</param>
      <param name="pszKey">[in] Name of the stream to which options are to be saved.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Animation(System.Int32,System.Object@)">
      <summary>Controls the animation of the icon in the status bar.</summary>
      <param name="fOnOff">[in] Set to true to turn on animation, or set to false to turn it off..</param>
      <param name="pvIcon">[in] If the VARIANT is a <see cref="F:System.Runtime.InteropServices.VarEnum.VT_I2" />, it refers to the SBAI_Index of predefined animated icons. If this parameter is a <see cref="F:System.Runtime.InteropServices.VarEnum.VT_I4" />, it refers to an HBITMAP containing the filmstrip image for animation, whose width should be a multiple of its height.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. If this method is called in an instance of Visual Studio running in a remote session, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />, and the icon is not displayed.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Clear">
      <summary>Clears the status text area and the editor information area in the status bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.FreezeOutput(System.Int32)">
      <summary>Inhibits updates to the status text area.</summary>
      <param name="fFreeze">[in] <see langword="true" /> tells the environment to place a freeze on the status bar. No further updates can be made until the freeze is released. <see langword="false" /> releases the freeze.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.GetFreezeCount(System.Int32@)">
      <summary>Returns the number of freeze holds on the status bar.</summary>
      <param name="plCount">[out] Count of the number of freeze holds currently in place on the status bar.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.GetText(System.String@)">
      <summary>Retrieves the current status bar text.</summary>
      <param name="pszText">[out] Current status bar text.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser,System.Int32@)">
      <summary>Determines whether the specified user is the current user of the status bar.</summary>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser" /> interface.</param>
      <param name="pfCurrent">[out] <see langword="true" /> if the user is current.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.IsFrozen(System.Int32@)">
      <summary>Returns the freeze state of the status bar.</summary>
      <param name="pfFrozen">[out] Flag indicating whether the status bar is frozen to new content.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.Progress(System.UInt32@,System.Int32,System.String,System.UInt32,System.UInt32)">
      <summary>Shows the progress of operations that take a determinate amount of time.</summary>
      <param name="pdwCookie">[in, out] ID of the current user, to prevent multiple uses of the progress bar at the same time.</param>
      <param name="fInProgress">[in] <see langword="true" /> while the progress bar is in use; false when complete.</param>
      <param name="pwszLabel">[in] Text to display in status field while the progress bar is in use.</param>
      <param name="nComplete">[in] Number of units currently complete in the progress bar.</param>
      <param name="nTotal">[in] Total number of units for the progress bar operation.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetColorText(System.String,System.UInt32,System.UInt32)">
      <summary>Sets the status bar text with foreground and background colors.</summary>
      <param name="pszText">[in] The text to display in the status text area.</param>
      <param name="crForeColor">[in] The foreground color of <paramref name="pszText" />.</param>
      <param name="crBackColor">[in] The background color of <paramref name="pszText" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetInsMode(System.Object@)">
      <summary>Sets the mode of the editor in the status bar to either insert or overwrite.</summary>
      <param name="pvInsMode">[in] Pointer to a VARIANT indicating the insert mode.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetLineChar(System.Object@,System.Object@)">
      <summary>Displays the line number and character position in the editor information area of the status bar.</summary>
      <param name="pvLine">[in] Line number of the cursor.</param>
      <param name="pvChar">[in] Character position of the cursor.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetLineColChar(System.Object@,System.Object@,System.Object@)">
      <summary>Displays the line number, column number, and character position in the editor information area of the status bar.</summary>
      <param name="pvLine">[in] Line number of the cursor.</param>
      <param name="pvCol">[in] Column number of the cursor.</param>
      <param name="pvChar">[in] Character position of the cursor.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetSelMode(System.Object@)">
      <summary>Sets the block or stream selection mode of the editor in the status bar.</summary>
      <param name="pvSelMode">[in] Pointer to a VARIANT indicating the selection mode.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetText(System.String)">
      <summary>Sets the status bar text in the text area.</summary>
      <param name="pszText">[in] The text to display in the status text area.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbar.SetXYWH(System.Object@,System.Object@,System.Object@,System.Object@)">
      <summary>Displays the (x,y) position and the width and height of the current graphics box in the editor information area of the status bar.</summary>
      <param name="pvX">[in] Pointer to the x ordinate location of the upper-left corner of the current graphic.</param>
      <param name="pvY">[in] Pointer to the y ordinate location of the upper-left corner of the current graphic.</param>
      <param name="pvW">[in] Pointer to the width of the current graphic.</param>
      <param name="pvH">[in] Pointer to the height of the current graphic.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStatusbarUser.SetInfo">
      <summary>Sets the information in the status bar to reflect this status bar user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.CreateNew(System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut@)">
      <summary>Creates a new multi-format file with format index.</summary>
      <param name="szFileName">[in] Null-terminated string containing the file name.</param>
      <param name="nFormatIndex">[in] Integer containing the format index.</param>
      <param name="dwShareMode">[in] Double word containing the share mode.</param>
      <param name="dwCreationDisposition">[in] Double word containing the creation disposition.</param>
      <param name="dwFlagsAndAttributes">[in] Double word containing the flags and attributes.</param>
      <param name="pIVsStructuredFileIOHelper">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> object.</param>
      <param name="szFormatVersion">[in] Null-terminated string containing the format version.</param>
      <param name="szDescription">[in] Null-terminated string containing the description.</param>
      <param name="ppIVsPropertyFileOut">[out] Pointer to a pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileOut" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.FindFormatIndex(System.UInt32,System.UInt32[])">
      <summary>Returns the format index for the CodePage of the data object.</summary>
      <param name="uiCodePage">[in] Specifies CodePage.</param>
      <param name="pnFormatIndex">[out, optional] Pointer to an integer containing the format index.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.GetFormatInfo(System.UInt32,System.UInt32[])">
      <summary>Returns the format information for the format index.</summary>
      <param name="nFormatIndex">[in] Integer containing the format index.</param>
      <param name="puiCodePage">[out, optional] Pointer to CodePage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.GetFormatList(System.String,System.String,System.String@)">
      <summary>Returns the format list for the file types supported by your VSPackage.</summary>
      <param name="szEntityName">[in] Null-terminated string containing the entity name, for example, "Distribution Unit Project File" or "VB Project File.".</param>
      <param name="szFileTypes">[in] Null-terminated string containing the file types. This is a semicolon-separated list of file extensions.</param>
      <param name="ppszFormatList">[out] Specifies the location in which the file format list will be stored.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIO.OpenExisting(System.String,System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn@,System.String[])">
      <summary>Open a previously created structured file data element and returns a pointer to the format index, data element, and pointer to a string containing the format version.</summary>
      <param name="szFileName">[in] Null-terminated string containing the file name.</param>
      <param name="dwShareMode">[in] Double word containing the share mode.</param>
      <param name="dwCreationDisposition">[in] Double word containing the creation disposition.</param>
      <param name="dwFlagsAndAttributes">[in] Double word containing the flags and attributes.</param>
      <param name="pIVsStructuredFileIOHelper">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper" /> object.</param>
      <param name="pnFormatIndex">[out] Pointer to an integer containing the format index.</param>
      <param name="ppIVsPropertyFileIn">[out] Pointer to a pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPropertyFileIn" /> object.</param>
      <param name="pbstrFormatVersion">[out, optional] Pointer to a string containing the format version.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsStructuredFileIOHelper.LoadLocalizedString(System.UInt32,System.String@)">
      <summary>Loads tokens found in persisted files that are to be loaded with localized strings.</summary>
      <param name="ulStringID">A string Identifier</param>
      <param name="pbstr">A pointer to a localized string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSupportItemHandoff.HandoffItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProject3,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)">
      <summary>Supports transferring an item from one project to another.</summary>
      <param name="itemid">[in] Identifier of the item to be transferred.</param>
      <param name="pProjDest">[in] Project to which the document will be transferred.</param>
      <param name="pszMkDocumentOld">[in] String form of the moniker identifier of the document in the project system for the document prior to transfer. The requesting project will pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" /> in the <paramref name="pszDocumentOld" /> parameter.</param>
      <param name="pszMkDocumentNew">[in] String form of the moniker identifier of the document in the project system for the document following transfer. The requesting project will pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RenameDocument(System.String,System.String,System.IntPtr,System.UInt32)" /> as the <paramref name="pszDocumentNew" /> parameter.</param>
      <param name="punkWindowFrame">[in] Pointer to the window frame containing the document view. This parameter is optional if the document is not open.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetCellTooltip(System.Int32,System.Int32,System.String@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="X">[In] A value of type Integer.</param>
      <param name="Y">[In] A value of type Integer.</param>
      <param name="pbstrTooltip">[Out] A pointer to a string.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetEnabledCount(System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="pcEnabled">[in, out]</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetMetrics(Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS[])">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="Psm">[in, out] A pointer to a value of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSWATCHMETRICS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.GetSelection(System.Int32@,System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="pxCur">[In, Out] A pointer to an integer value.</param>
      <param name="pyCur">[In, Out] A pointer to an integer value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RealizePalette(System.IntPtr,System.IntPtr@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="Hdc">[In] An object of type HDC.</param>
      <param name="phpalOld">[Out] A pointer to a value of type CPalette::operator HPALETTE.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RenderCell(Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER[],System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface. </summary>
      <param name="pRender">[In] A pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER" />[].</param>
      <param name="ptcidRet">[In, Out] A pointer to an integer value that represents an MSO control ID.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.SelectCell(System.Int32,System.Int32)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="x">[In] A value of integer type.</param>
      <param name="y">[In] A value of integer type.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.SelectionUpdate(System.Int32@,System.Int32@)">
      <summary>This interface is deprecated as of Visual Studio 2010. The Visual Studio shell no longer recognizes this interface.</summary>
      <param name="pxCur">[In, Out] A pointer to an integer value.</param>
      <param name="pyCur">[In, Out] A pointer to an integer value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.CanDelete(System.Int32@)">
      <summary>Determines whether a task item can be deleted.</summary>
      <param name="pfCanDelete">[out, retval] If <see langword="true" />, then the task item can be deleted. If <see langword="false" />, then the item cannot be deleted.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Returns the category of a task item.</summary>
      <param name="pCat">[out, retval] Category of the task item. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Column(System.Int32@)">
      <summary>Returns the column number of a task within the specified file.</summary>
      <param name="piCol">[out, retval] Number of the column that contains the task item within the file.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Document(System.String@)">
      <summary>Returns the name of the file associated with a task item.</summary>
      <param name="pbstrMkDocument">[out, retval] Path to the document for this task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Checked(System.Int32@)">
      <summary>Determines whether the task item's check box is currently selected or cleared.</summary>
      <param name="pfChecked">[out, retval] If <see langword="true" />, then the check box for the task item is selected. If <see langword="false" />, then the check box is cleared.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Returns the priority level of a task item.</summary>
      <param name="ptpPriority">[out, retval] Priority (high, normal, or low) of the task item. For a list of <paramref name="ptpPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.get_Text(System.String@)">
      <summary>Returns the description of the task item.</summary>
      <param name="pbstrName">[out, retval] Pointer to a description of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.HasHelp(System.Int32@)">
      <summary>Obsolete. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pfHasHelp">
            <see langword="true" /> if the task supports a help topic on itself; otherwise <see langword="false" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.ImageListIndex(System.Int32@)">
      <summary>Returns the index into the image list maintained by a provider.</summary>
      <param name="pIndex">[out, retval] Pointer to the index into the image list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
      <summary>Determines whether a specified task field is set to read-only status.</summary>
      <param name="field">[in] Task field of which to check read-only status. For a list of field values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD" />.</param>
      <param name="pfReadOnly">[out, retval] If <see langword="true" />, then the task field is read-only. If <see langword="false" />, then the task field can be edited by the user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.Line(System.Int32@)">
      <summary>Returns the line number of a task item within a specified document.</summary>
      <param name="piLine">[out, retval] Line number of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateTo">
      <summary>Opens a file associated with a task item and moves to the appropriate position in the file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.NavigateToHelp">
      <summary>If there is a help topic for this task item, this method should open it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnDeleteTask">
      <summary>Notifies the task provider that a user has deleted a task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.OnFilterTask(System.Int32)">
      <summary>Notifies the task provider that a task item has been filtered in or out of view.</summary>
      <param name="fVisible">[in] If <see langword="true" />, then the task is visible. If <see langword="false" />, then the task has been filtered out of view.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Checked(System.Int32)">
      <summary>Sets whether a task item's check box is selected or cleared.</summary>
      <param name="fChecked">[in] If <see langword="true" />, then the check box is selected. If <see langword="false" />, then the check box is cleared.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
      <summary>Sets the priority level of a task item.</summary>
      <param name="tpPriority">[in] Priority level (high, medium, or low) of the task. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" /></param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.put_Text(System.String)">
      <summary>Sets the description for a task item.</summary>
      <param name="bstrName">[in] Description of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem.SubcategoryIndex(System.Int32@)">
      <summary>Returns the index to the subcategory list maintained by the provider.</summary>
      <param name="pIndex">[out, retval] Index position in the subcategory list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.BrowseObject(System.Object@)">
      <summary>OBSOLETE. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="ppObj">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.CanDelete(System.Int32@)">
      <summary>Determines whether a task item can be deleted.</summary>
      <param name="pfCanDelete">[out, retval] If <see langword="true" />, then the task item can be deleted. If <see langword="false" />, then the item cannot be deleted.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Category(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Returns the category of a task item.</summary>
      <param name="pCat">[out, retval] Category of the task item. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Column(System.Int32@)">
      <summary>Returns the column number of a task within the specified file.</summary>
      <param name="piCol">[out, retval] Number of the column that contains the task item within the file.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Document(System.String@)">
      <summary>Returns the name of the file associated with a task item.</summary>
      <param name="pbstrMkDocument">[out, retval] Path to the document for this task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Checked(System.Int32@)">
      <summary>Determines whether the task item's check box is currently selected or cleared.</summary>
      <param name="pfChecked">[out, retval] If <see langword="true" />, then the check box for the task item is selected. If <see langword="false" />, then the check box is cleared.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_CustomColumnText(System.Guid@,System.UInt32,System.String@)">
      <summary>Returns the text of a customized field for the specified task list view.</summary>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="pbstrText">[out] Pointer to a string containing the customized field text.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY[])">
      <summary>Returns the priority level of a task item.</summary>
      <param name="ptpPriority">[out, retval] Priority (high, normal, or low) of the task item. For a list of <paramref name="ptpPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.get_Text(System.String@)">
      <summary>Returns the description of the task item.</summary>
      <param name="pbstrName">[out, retval] Pointer to a description of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.HasHelp(System.Int32@)">
      <summary>Obsolete. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
      <param name="pfHasHelp">Returns <see langword="true" /> if there is a help topic associated with this task; otherwise <see langword="false" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.ImageListIndex(System.Int32@)">
      <summary>Returns the index into the image list maintained by a provider.</summary>
      <param name="pIndex">[out, retval] Pointer to the index into the image list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.IsCustomColumnReadOnly(System.Guid@,System.UInt32,System.Int32@)">
      <summary>Determines if a customized task field is set to read-only status.</summary>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="pfReadOnly">[out] <see langword="true" /> if the customized field has read-only status.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.IsReadOnly(Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD,System.Int32@)">
      <summary>Determines whether a specified task field is set to read-only status.</summary>
      <param name="field">Task field of which to check read-only status. For a list of field values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKFIELD" />.</param>
      <param name="pfReadOnly">out, retval] If <see langword="true" />, then the task field is read-only. If <see langword="false" />, then the task field can be edited by the user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.Line(System.Int32@)">
      <summary>Returns the line number of a task item within a specified document.</summary>
      <param name="piLine">[out, retval] Line number of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.NavigateTo">
      <summary>Opens a file associated with a task item and moves to the appropriate position in the file.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.NavigateToHelp">
      <summary>Opens the associated help topic.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.OnDeleteTask">
      <summary>Notifies the task provider that a user has deleted a task.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.OnFilterTask(System.Int32)">
      <summary>Notifies the task provider that a task item has been filtered in or out of view.</summary>
      <param name="fVisible">[in] If <see langword="true" />, then the task is visible. If false, then the task has been filtered out of view.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Checked(System.Int32)">
      <summary>Sets whether a task item's check box is selected or cleared.</summary>
      <param name="fChecked">[in] If <see langword="true" />, then the check box is selected. If <see langword="false" />, then the check box is cleared.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_CustomColumnText(System.Guid@,System.UInt32,System.String)">
      <summary>Sets the text of a customized field for the specified task list view.</summary>
      <param name="guidView">[in] GUID of the task list view.</param>
      <param name="iCustomColumnIndex">[in] Index of the customized field.</param>
      <param name="bstrText">[in] Pointer to a string containing the customized field text.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Priority(Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY)">
      <summary>Sets the priority level of a task item.</summary>
      <param name="tpPriority">[in] Priority level (high, medium, or low) of the task. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKPRIORITY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.put_Text(System.String)">
      <summary>Sets the description for a task item.</summary>
      <param name="bstrName">[in] Description of the task item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskItem2.SubcategoryIndex(System.Int32@)">
      <summary>Returns the index into the subcategory list maintained by a task provider.</summary>
      <param name="pIndex">[out, retval] Index position in the subcategory list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.AutoFilter(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY)">
      <summary>Filters the task list so only the specified category is shown.</summary>
      <param name="cat">[in] Category to filter on. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.AutoFilter2(System.Guid@)">
      <summary>Filters the task list so only the specified view is shown.</summary>
      <param name="guidCustomView">[in] GUID of the view to filter on.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.DumpOutput(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY,Microsoft.VisualStudio.OLE.Interop.IStream,System.Int32@)">
      <summary>Do not use.</summary>
      <param name="dwReserved">Do not use.</param>
      <param name="cat">Do not use.</param>
      <param name="pstmOutput">Do not use.</param>
      <param name="pfOutputWritten">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Enumerates all of the tasks on the task list.</summary>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RefreshTasks(System.UInt32)">
      <summary>Informs the task list that a task provider has new or updated tasks.</summary>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])">
      <summary>Registers a custom category with the task list.</summary>
      <param name="guidCat">[in] GUID of the custom category you wish to register.</param>
      <param name="dwSortOrder">[in] The requested sort placement within <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> for the custom category.</param>
      <param name="pCat">[out] Pointer to the actual sort placement of the custom category within <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)">
      <summary>Registers a task provider with the task list.</summary>
      <param name="pProvider">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider" /> interface.</param>
      <param name="pdwProviderCookie">[out] Pointer to an ID for the task provider specified by <paramref name="pProvider" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.SetSilentOutputMode(System.Int32)">
      <summary>Sets the UI output mode the task list should follow.</summary>
      <param name="fSilent">[in] If <see langword="true" />, do not display a UI.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UnregisterCustomCategory(Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY)">
      <summary>Unregisters the specified custom category from the task list.</summary>
      <param name="catAssigned">[in] The <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY" /> enumeration assigned to the custom category from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterCustomCategory(System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTASKCATEGORY[])" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UnregisterTaskProvider(System.UInt32)">
      <summary>Unregisters the specified task provider from the task list.</summary>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.UpdateProviderInfo(System.UInt32)">
      <summary>Updates the image and subcategory lists associated with the specified task provider.</summary>
      <param name="dwProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskListEvents.OnCommentTaskInfoChanged">
      <summary>Provides notification that the set of comment task tokens has been modified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Standard enumerator over tasks supplied by this provider.</summary>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ImageList(System.IntPtr@)">
      <summary>Returns the image list for the tasks of this task provider.</summary>
      <param name="phImageList">[out, retval] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.hImageList" />, a handle for this image list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing.</summary>
      <param name="pTaskList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> interface that the task provider is registered to.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.ReRegistrationKey(System.String@)">
      <summary>Do not use.</summary>
      <param name="pbstrKey">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Returns the list of subcategories for the tasks of this task provider.</summary>
      <param name="cbstr">in] Number of subcategories in the list.</param>
      <param name="rgbstr">[out, size_is(cbstr)] Array of BSTRs whose elements represent the subcategories indicated by <paramref name="cbstr" />.</param>
      <param name="pcActual">[out] Pointer to the number of BSTRs contained in the <paramref name="rgbstrarray" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.EnumTaskItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Enumerates the tasks supplied by the task provider.</summary>
      <param name="ppenum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ImageList(System.IntPtr@)">
      <summary>Returns the image list for the tasks of this task provider.</summary>
      <param name="phImageList">[out, retval] Pointer to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA.hImageList" />, a handle for this image list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.MaintainInitialTaskOrder(System.Int32@)">
      <summary>Determines whether or not the task list should maintain the task order given to it by the task provider.</summary>
      <param name="bMaintainOrder">[out] <see langword="true" /> if the task list should maintain the task order provided by the task provider, rather than use the task list's default sort.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.OnTaskListFinalRelease(Microsoft.VisualStudio.Shell.Interop.IVsTaskList)">
      <summary>Notifies the client to unregister the task provider from the task list if it has not been unregistered by the time the task list is closing.</summary>
      <param name="pTaskList">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> interface that the task provider is registered to.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.ReRegistrationKey(System.String@)">
      <summary>Do not use.</summary>
      <param name="pbstrKey">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider2.SubcategoryList(System.UInt32,System.String[],System.UInt32@)">
      <summary>Returns the list of subcategories for the tasks of this task provider.</summary>
      <param name="cbstr">[in] Number of subcategories in the list.</param>
      <param name="rgbstr">[out, size_is(cbstr)] Array of BSTRs whose elements represent the subcategories indicated by <paramref name="cbstr" />.</param>
      <param name="pcActual">[out] Pointer to the number of BSTRs contained in the <paramref name="rgbstrarray" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTestLog.LogIdleTime(System.String)">
      <summary>Logs idle time in seconds.</summary>
      <param name="pszIdle">[in] <paramref name="pszIdle" /> format: ID&lt;TAB&gt;Idle Time in Seconds&lt;TAB&gt;Idle Start Time&lt;TAB&gt;String ID</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.GetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Retrieves the contents of the text buffer.</summary>
      <param name="ppTextBuffer">[out] The contents of the text buffer.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.LockTextBuffer(System.Int32)">
      <summary>Locks the text buffer to prevent editing.</summary>
      <param name="fLock">[in] Set to <see langword="true" /> to lock the text buffer, or <see langword="false" /> to unlock the text buffer.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextBufferProvider.SetTextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Writes the text data to the specified text buffer.</summary>
      <param name="pTextBuffer">[in] Storage for textual data to be placed directly in the DocData.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextOut.VsGetTextExtent(System.UInt32,System.Int32,System.UInt16[],Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Gets the extent of text's Hardware Device Context (HDC), number of characters, and outputs a pointer to the length of the pText parameter. Returns a Windows structure that represents the size of the text.</summary>
      <param name="hdc">[in] Pointer to a long type to a hardware device context (HDC).</param>
      <param name="cch">[in] Number of characters, or -1 if null-terminated.</param>
      <param name="pText">[in] OLE String that represents the text.</param>
      <param name="pSize">[in] Length of the OLE String.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTextOut.VsTextOut(System.UInt32,System.Int32,System.UInt16[],System.UInt32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Outputs text to a location specified to a Hardware Device Context (HDC).</summary>
      <param name="hdc">[in] Pointer to a long type to a hardware device context (HDC).</param>
      <param name="cch">[in] Number of characters, or -1 if null-terminated.</param>
      <param name="pText">[in] OLE String that represents the text.</param>
      <param name="grfETO">[in] ExtTextOut flags.</param>
      <param name="x">[in] X coordinate of the text location.</param>
      <param name="y">[in] Y coordinate of the text location.</param>
      <param name="prc">[in] A Windows rectangle (a struct). </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadSafeCommandWindow.ThreadSafePrintNoShow(System.String)">
      <summary>Like <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindow.PrintNoShow(System.String)" />, but may be called on any thread.</summary>
      <param name="szTextToPrint">[in] The text to be printed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddActiveXItem(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Allows ActiveX controls to be programmatically added to the Toolbox.</summary>
      <param name="clsid">[in] Class identifier defining the ActiveX control to add to the Toolbox.</param>
      <param name="lpszTab">[[in] The localized name of the tab to add the ActiveX control to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="pHierarchy">[in] Not implemented.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)">
      <summary>Adds a data object to the specified tab in the Toolbox.</summary>
      <param name="pDO">[in] <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> to be added to the References tab in the Toolbox.</param>
      <param name="ptif">[in] Structure identifying item characteristics, such as the item name and icon. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the Toolbox tab to add the data object to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddItemFromFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Allows files to be programmatically added to the Toolbox.</summary>
      <param name="pszFilename">[in] Full path of file to add to the Toolbox.</param>
      <param name="pHierSource">[in] Hierarchy that owns the source file. This value can be <see langword="null" />.</param>
      <param name="pfItemAdded">[out, retval] If <see langword="true" />, then the file was successfully added to the Toolbox. If <see langword="false" />, then the file was not added.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddTab(System.String)">
      <summary>Adds a new tab to the Toolbox.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.AddTabEx(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Adds a new tab to the Toolbox and specifies how the tabs are viewed.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the Toolbox tab is shown in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.DataUsed">
      <summary>Called by a designer to inform the Toolbox that the item has been pasted onto the form.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.EnumItems(System.String,Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)">
      <summary>Enumerates items on a given tab in the Toolbox, or all items in the Toolbox.</summary>
      <param name="lpszTab">[in] Toolbox tab to enumerate items on. This value can be <see langword="null" />.</param>
      <param name="pEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface, which is used to enumerate Toolbox items.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.EnumTabs(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)">
      <summary>Enumerates through tabs in the Toolbox.</summary>
      <param name="pEnum">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs" /> interface, which is used to enumerate Toolbox tabs.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns the data object for the selected item in the Toolbox.</summary>
      <param name="ppDO">[out, retval] Toolbox item for which data needs to be returned.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the window frame for the <see langword="Toolbox" />.</summary>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame for the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetTab(System.String@)">
      <summary>Returns the name of the selected tab.</summary>
      <param name="pbstrTab">[out, retval] Name of the selected tab.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.GetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW[])">
      <summary>Returns the tab view for the specified tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to return the view for.</param>
      <param name="ptv">[out, retval] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether the specified Toolbox user is the current user.</summary>
      <param name="pUser">[in] Pointer to the Toolbox user.</param>
      <param name="pfCurrent">[out, retval] If <see langword="true" />, then the specified Toolbox user is the current user. If <see langword="false" />, then the specified user is not the current Toolbox user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RegisterDataProvider(Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider,System.UInt32@)">
      <summary>Registers a Toolbox data provider.</summary>
      <param name="pDP">[in] Pointer to the Toolbox data provider to register.</param>
      <param name="pdwProvider">[out, retval] Unique cookie identifying the newly registered Toolbox data provider.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RemoveItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Removes an item from the Toolbox.</summary>
      <param name="pDO">[in] Data object to remove from the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.RemoveTab(System.String)">
      <summary>Removes a tab from the Toolbox.</summary>
      <param name="lpszTab">[in] Name of the tab to remove from the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SelectItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Programmatically selects an item.</summary>
      <param name="pDO">[in] Pointer to a data object identifying the selected item. This value can be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SelectTab(System.String)">
      <summary>Programmatically selects the referenced Toolbox tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to select.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetCursor">
      <summary>Sets the drop cursor for the current, enabled Toolbox item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Sets information for the referenced item.</summary>
      <param name="pDO">[in] Data object to set information for.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.SetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Sets the type of view for the specified tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to set the view for.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.UnregisterDataProvider(System.UInt32)">
      <summary>Unregisters the specified data provider.</summary>
      <param name="dwProvider">[in] Cookie identifying the data provider to unregister.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox.UpdateToolboxUI">
      <summary>Forces a redraw of the Toolbox UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddActiveXItem(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Allows ActiveX controls to be programmatically added to the Toolbox.</summary>
      <param name="clsid">[in] Class identifier defining the ActiveX control to add to the Toolbox.</param>
      <param name="lpszTab">[[in] The localized name of the tab to add in] Toolbox tab to add the ActiveX control to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="pHierarchy">[in] Not implemented.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddActiveXItem2(System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@)">
      <summary>Adds an ActiveX item to the Toolbox.</summary>
      <param name="clsid">[in] Class identifier defining the ActiveX item to add.</param>
      <param name="lpszTab">[in] [in] The localized name of the Toolbox to add the ActiveX item to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="pHierarchy">[in] Not yet implemented.</param>
      <param name="guidPkg">[in] Not yet implemented</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItem(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String)">
      <summary>Adds a data object to the specified tab in the Toolbox.</summary>
      <param name="pDO">[in] IDataObject to be added to the References tab in the Toolbox.</param>
      <param name="ptif">[in] Structure identifying item characteristics, such as the item name and icon. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the Toolbox tab to add the data object to. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItem2(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[],System.String,System.Guid@)">
      <summary>Adds an item to the referenced Toolbox tab, specifying a package GUID.</summary>
      <param name="pDO">[in] Data object to add to the Toolbox.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" /></param>
      <param name="guidPkg">[in] GUID identifying the package adding the Toolbox item. Package GUID identifying your VSPackage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItemFromFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Allows files to be programmatically added to the Toolbox.</summary>
      <param name="pszFilename">[in]Full path of file to add to the Toolbox.</param>
      <param name="pHierSource">[in]Hierarchy that owns the source file. This value can be <see langword="null" />.</param>
      <param name="pfItemAdded">[out, retval] If <see langword="true" />, then the file was successfully added to the Toolbox. If <see langword="false" />, then the file was not added.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddItemFromFile2(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Guid@,System.Int32@)">
      <summary>Adds an item to the Toolbox from a file, specifying a package GUID.</summary>
      <param name="pszFilename">[in] Name of the file containing the item to add to the Toolbox.</param>
      <param name="pHierSource">[in] Hierarchy containing the file. This parameter can be <see langword="null" /> if the file is not part of a project.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
      <param name="pfItemAdded">[out, retval] If <see langword="true" />, then the item was successfully added from the file to the Toolbox. If <see langword="false" />, then the item was not added.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTab(System.String)">
      <summary>Adds a new tab to the Toolbox.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTab2(System.String,System.Guid@)">
      <summary>Adds a tab to the Toolbox, specifying the tab view.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTabEx(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Adds a new tab to the Toolbox and specifies how the tabs are viewed.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the Toolbox tab is shown in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.AddTabEx2(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW,System.Guid@)">
      <summary>Adds a tab to the Toolbox, specifying a tab view and a package GUID.</summary>
      <param name="lpszTab">[in] The localized name of the tab to add to the Toolbox. The localized name can be obtained from the invariant non-localized name by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)" />.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <param name="guidPkg">[in] Package GUID identifying your VSPackage.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.DataUsed">
      <summary>Called by a designer to inform the Toolbox that the item has been pasted onto the form.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.EnumItems(System.String,Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems@)">
      <summary>Enumerates items on a given tab in the Toolbox, or all items in the Toolbox.</summary>
      <param name="lpszTab">[in] Toolbox tab to enumerate items on. This value can be <see langword="null" />.</param>
      <param name="pEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxItems" /> interface, which is used to enumerate Toolbox items.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.EnumTabs(Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs@)">
      <summary>Enumerates through tabs in the Toolbox.</summary>
      <param name="pEnum">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumToolboxTabs" /> interface, which is used to enumerate Toolbox tabs.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns the data object for the selected item in the Toolbox.</summary>
      <param name="ppDO">[out, retval] Toolbox item for which data needs to be returned.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the window frame for the Toolbox.</summary>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame for the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetTab(System.String@)">
      <summary>Returns the name of the selected tab.</summary>
      <param name="pbstrTab">[out, retval] Name of the selected tab.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.GetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW[])">
      <summary>Returns the tab view for the specified tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to return the view for.</param>
      <param name="ptv">[out, retval] Determines whether the tab is in list view or icon view. For a list of <paramref name="ptv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.IsCurrentUser(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether the specified Toolbox user is the current user.</summary>
      <param name="pUser">[in] Pointer to the Toolbox user.</param>
      <param name="pfCurrent">[out, retval] If <see langword="true" />, then the specified Toolbox user is the current user. If <see langword="false" />, then the specified user is not the current Toolbox user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RegisterDataProvider(Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider,System.UInt32@)">
      <summary>Registers a Toolbox data provider.</summary>
      <param name="pDP">[in] Pointer to the Toolbox data provider to register.</param>
      <param name="pdwProvider">[out, retval] Unique cookie identifying the newly registered Toolbox data provider.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RemoveItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Removes an item from the Toolbox.</summary>
      <param name="pDO">[in] Data object to remove from the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.RemoveTab(System.String)">
      <summary>Removes a tab from the Toolbox.</summary>
      <param name="lpszTab">[in] Name of the tab to remove from the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SelectItem(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Programmatically selects an item.</summary>
      <param name="pDO">[in] Pointer to a data object identifying the selected item. This value can be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SelectTab(System.String)">
      <summary>Programmatically selects the referenced Toolbox tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to select.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetCursor">
      <summary>Sets the drop cursor for the current, enabled Toolbox item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Sets information for the referenced item.</summary>
      <param name="pDO">[in] Data object to set information for.</param>
      <param name="ptif">[in] Structure containing the item information to set for the data object. For a list of <paramref name="ptif" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.SetTabView(System.String,Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW)">
      <summary>Sets the type of view for the specified tab.</summary>
      <param name="lpszTab">[in] Toolbox tab to set the view for.</param>
      <param name="tv">[in] Determines whether the tab is in list view or icon view. For a list of <paramref name="tv" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTBXTABVIEW" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.UnregisterDataProvider(System.UInt32)">
      <summary>Unregisters the specified data provider.</summary>
      <param name="dwProvider">[in] Cookie identifying the data provider to unregister.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2.UpdateToolboxUI">
      <summary>Forces a redraw of the Toolbox UI.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.AreDataObjectsAvailable(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,System.Int32@)">
      <summary>Determines whether any items are available to preview in the clipboard ring.</summary>
      <param name="pTarget">[in] Used by the Toolbox to ensure that the next item is supported.</param>
      <param name="pbItemsAvailable">[out] If <see langword="true" />, then items are available to preview. If <see langword="false" />, then items are not available.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.BeginCycle">
      <summary>Forces the clipboard cycle to start at the top of the list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxClipboardCycler.GetAndSelectNextDataObject(Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Gets the next data object for the target Toolbox user's clipboard ring.</summary>
      <param name="pTarget">[in] Target Toolbox user to cycle through clipboard items.</param>
      <param name="ppDO">[out] Pointer to the next data object in the list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.FileDropped(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)">
      <summary>Sends notification that a file is being dropped on the Toolbox.</summary>
      <param name="pszFilename">[in] Name of file dropped.</param>
      <param name="pHierSource">[in] Source hierarchy containing the dropped file. This value may be <see langword="null" /> if the file is not associated with a hierarchy.</param>
      <param name="pfFileProcessed">[out, retval] If <see langword="true" />, then the file was successfully processed. If <see langword="false" />, then the file was not processed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.GetItemInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Returns the item information for the specified data object.</summary>
      <param name="pDO">[in] Data object for which to return item information.</param>
      <param name="ptif">[out] Item information. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" /> structure.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.IsDataSupported(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Determines the appropriate clipboard data format for a data object .</summary>
      <param name="pfetc">[in] Generalized clipboard format. For more information, see the <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> structure in the MSDN Library.</param>
      <param name="pstm">[in] Generalized global memory handle used for data transfer operations by <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" />. For more information, see <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> in the MSDN Library.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether or not a data object is supported by a data provider and can be added to the Toolbox.</summary>
      <param name="pDO">[in] Data object to be added to the Toolbox.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser.IsSupported(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the Toolbox user supports the referenced data object.</summary>
      <param name="pDO">[in] Data object to be supported.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxUser.ItemPicked(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Sends notification that an item in the Toolbox is selected through a click, or by pressing ENTER.</summary>
      <param name="pDO">[in] Data object that is selected.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowFactory.CreateToolWindow(System.Guid@,System.UInt32)">
      <summary>Enables the environment to create multiple on-demand tool windows that are implemented by VSPackages.</summary>
      <param name="rguidPersistenceSlot">[in] Unique identifier of the tool window.</param>
      <param name="dwToolWindowId">[in] Double word containing the tool window ID.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.GetBorder(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the border information for a tool window.</summary>
      <param name="prc">[out] Pointer to the location and size of the tool window border.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar.SetBorderSpace(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Sets the border space for a tool window after the toolbar is placed. </summary>
      <param name="pbw">[in] Border space for the tool window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.AddToolbar(Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION,System.Guid@,System.UInt32)">
      <summary>Adds a toolbar to the tool window.</summary>
      <param name="dwLoc">[in] Specifies the location of the toolbar within the tool window. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSTWT_LOCATION" /> enumeration.</param>
      <param name="pguid">[in] Pointer to a unique identifier for the toolbar's menu group.</param>
      <param name="dwId">[in] DWORD that, in combination with <paramref name="pguid" />, identifies the toolbar to be added.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.BorderChanged">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Close(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">[in] Reserved. Must be 0.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ForceUpdateUI">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Hide(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ProcessMouseActivation(System.IntPtr,System.UInt32,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ProcessMouseActivationModal(System.IntPtr,System.UInt32,System.UInt32,System.Int32,System.Int32@)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="msg">Do not use.</param>
      <param name="wp">Do not use.</param>
      <param name="lp">Do not use.</param>
      <param name="plResult">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.Show(System.UInt32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="dwReserved">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost.ShowHideToolbar(System.Guid@,System.UInt32,System.Int32)">
      <summary>This method is for the environment's use only. Method information is not provided. Do not use this method.</summary>
      <param name="pguid">Do not use.</param>
      <param name="dwId">Do not use.</param>
      <param name="fShow">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.AdviseTrackProjectDocumentsEvents(Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2,System.UInt32@)">
      <summary>This method enables clients to receive notifications of project documents events.</summary>
      <param name="pEventSink">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" /> interface.</param>
      <param name="pdwCookie">[out] Pointer to an abstract handle that identifies the client to be advised of project documents events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.BeginBatch">
      <summary>This method starts a batch of IVsTrackProjectDocuments2.OnAfter* method calls.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.EndBatch">
      <summary>This method ends the batch started by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.BeginBatch" /> and displays any user interface (UI) that was generated within the batch.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.Flush">
      <summary>This method displays the UI for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2" /> calls completed so far without ending the batch.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])">
      <summary>This method is called by a project after directories have been added to the project.</summary>
      <param name="pProject">[in] Project for which the directories have been added.</param>
      <param name="cDirectories">[in] Number of directories that were added.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were added. This is the same size as <paramref name="cFiles" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectoriesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
      <summary>This method is called by a project after directories have been added to the project. This method is equivalent to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])" />, but it also takes flags.</summary>
      <param name="pProject">[in] Project for which the directories have been added.</param>
      <param name="cDirectories">[in] Number of directories that were added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were added. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[])">
      <summary>This method is called by a project after files have been added to the project.</summary>
      <param name="pProject">[in] Project to which the files have been added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterAddFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
      <summary>This method is called by a project after files have been added to the project.</summary>
      <param name="pProject">[in] Project to which the files have been added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
      <summary>This method is called by a project after directories have been removed from the project.</summary>
      <param name="pProject">[in] Project from which the directories have been removed.</param>
      <param name="cDirectories">[in] Number of directories that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cDirectories)] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in, size_is(cDirectories)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
      <summary>This method is called by a project after files have been removed from the project.</summary>
      <param name="pProject">[in] Project from which the files have been removed.</param>
      <param name="cFiles">[in] Number of files that were removed.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in, size_is(cFiles)] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
      <summary>This method is called by a project after a directory has been renamed in the project.</summary>
      <param name="pProject">[in] Project containing the renamed directories.</param>
      <param name="cDirs">[in] Number of directories to rename.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old names of the directories.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new names of the directories.</param>
      <param name="rgFlags">[in] Flags specifying information about the renamed directories. For a list of <paramref name="rgflags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)">
      <summary>This method is called by a project after a file has been renamed in the project.</summary>
      <param name="pProject">[in] Project containing the files that were renamed.</param>
      <param name="pszMkOldName">[in] Path for the old file.</param>
      <param name="pszMkNewName">[in] Path for the renamed file.</param>
      <param name="flags">[in] For a list of flags values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
      <summary>This method is called by a project after files have been renamed in the project.</summary>
      <param name="pProject">[in] Project containing the files that were renamed.</param>
      <param name="cFiles">[in] Number of files that were renamed.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old files' names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new files' names.</param>
      <param name="rgFlags">[in] For a list of <paramref name="rgflags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnAfterSccStatusChanged(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.UInt32[])">
      <summary>This method is called by the Source Control Stub to inform listeners that source control status has changed. Do not call this method.</summary>
      <param name="pProject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject" /> interface.</param>
      <param name="cFiles">[in] Number of files.</param>
      <param name="rgpszMkDocuments">[in, size_is(cFiles)] Array of file paths.</param>
      <param name="rgdwSccStatus">[in, size_is(cFiles)] Array of status values for each file. Values are taken from the <see langword="SccStatus" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories can be added to the project.</summary>
      <param name="pProject">[in] Project containing the renamed directories.</param>
      <param name="cDirectories">[in] Number of directories to be added.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to add.</param>
      <param name="rgFlags">[in] Flags identifying information about each directory. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddNotOK" />; if the results for all directories are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be added to the project.</summary>
      <param name="pProject">[in] Project to which the files will be added.</param>
      <param name="cFiles">[in] Number of files to add. It is not valid for <paramref name="cFiles" /> to be zero.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be added. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags associated with each file. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file in the array is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results for each individual file. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories can be removed from the project.</summary>
      <param name="pProject">[in] Project containing the directories to remove.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in] Array of directory removal flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS" /></param>
      <param name="pSummaryResult">[out] ] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS.VSQUERYREMOVEDIRECTORYRESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results[]. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be removed from the project.</summary>
      <param name="pProject">[in] Project containing the files to remove.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
      <summary>This method is called by a project to determine whether directories in the project can be renamed.</summary>
      <param name="pProject">[in] Project containing the directories to rename.</param>
      <param name="cDirs">[in] Number of directories to be renamed.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old directory names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new directory names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS" /></param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgszMkOldNames" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFile(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS,System.Int32@)">
      <summary>This method is called by a project to determine whether a file in the project can be renamed.</summary>
      <param name="pProject">[in] Project containing the file to be renamed.</param>
      <param name="pszMkOldName">[in] Path to the old file name.</param>
      <param name="pszMkNewName">[in] Path to the new file name.</param>
      <param name="flags">[in] For a list of flags values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
      <param name="pfRenameCanContinue">[out] This value is <see langword="true" /> if file renaming can continue.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
      <summary>This method is called by a project to determine whether files can be renamed in the project.</summary>
      <param name="pProject">[in] Project in which the files will be renamed.</param>
      <param name="cFiles">[in] Number of files to rename in the project.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old file names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgszMkOldNames" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.
            Note   If you pass in <see langword="null" /> for this parameter, then only the summary result will be returned (<paramref name="pSummaryResult" />).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.UnadviseTrackProjectDocumentsEvents(System.UInt32)">
      <summary>This method prevents clients from receiving notifications of project documents events.</summary>
      <param name="dwCookie">[in] Abstract handle that identifies the client to be unadvised of project documents events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])">
      <summary>This method notifies the client after directories are added to the project.</summary>
      <param name="cProjects">[in] Number of projects to which directories were added.</param>
      <param name="cDirectories">[in] Number of directories added.</param>
      <param name="rgpProjects">[in] Array of projects to which directories were added.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were added. This is the same size as <paramref name="cDirectories" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])">
      <summary>This method notifies the client after a project has added files.</summary>
      <param name="cProjects">[in] Number of projects to which files were added.</param>
      <param name="cFiles">[in] Number of files that were added.</param>
      <param name="rgpProjects">[in] Array of projects to which files were added.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were processed. This is the same size as <paramref name="cFiles" />.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])">
      <summary>This method notifies the client when directories have been removed from the project.</summary>
      <param name="cProjects">[in] Number of projects from which directories were removed.</param>
      <param name="cDirectories">[in] Number of directories removed.</param>
      <param name="rgpProjects">[in] Array of projects from which directories were removed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories that were removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])">
      <summary>This method notifies the client after files are removed from the project.</summary>
      <param name="cProjects">[in] Number of projects from which files were removed.</param>
      <param name="cFiles">[in] Number of files removed.</param>
      <param name="rgpProjects">[in] Array of projects from which files were removed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files that were removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])">
      <summary>This method notifies the client when directories have been renamed in the project.</summary>
      <param name="cProjects">[in] Number of projects with renamed directories.</param>
      <param name="cDirs">[in] Number of directories renamed.</param>
      <param name="rgpProjects">[in] Array of projects from which directories were renamed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each directory belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old names of the directories.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new names of the directories.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])">
      <summary>This method notifies the client when files have been renamed in the project.</summary>
      <param name="cProjects">[in] Number of projects in which files have been renamed.</param>
      <param name="cFiles">[in] Number of files renamed.</param>
      <param name="rgpProjects">[in] Array of projects in which files were renamed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old file names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])">
      <summary>This method notifies the client when source control status has changed.</summary>
      <param name="cProjects">[in] Number of projects for which source control status has changed.</param>
      <param name="cFiles">[in] Number of files.</param>
      <param name="rgpProjects">[in] Array of projects for which source control status has changed.</param>
      <param name="rgFirstIndices">[in] Array of first indices identifying which project each file belongs to. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2" />.</param>
      <param name="rgpszMkDocuments">[in] Array of file paths.</param>
      <param name="rgdwSccStatus">[in] Array of status values for each file. Values are taken from the <see langword="SccStatus" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to add directories.</summary>
      <param name="pProject">[in] Project to which the directories will be added.</param>
      <param name="cDirectories">[in] Number of directories to add.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to add.</param>
      <param name="rgFlags">[in] Flags identifying information about each directory. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddNotOK" />; if the results for all directories are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS.VSQUERYADDDIRECTORYRESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to add files.</summary>
      <param name="pProject">[in] Project requesting to add files.</param>
      <param name="cFiles">[in] Number of files to add.</param>
      <param name="rgpszMkDocuments">[in] Array of files to add to the project.</param>
      <param name="rgFlags">[in] Array of flags associated with each file. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file in the array is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS.VSQUERYADDFILERESULTS_AddOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results for each individual file. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to remove directories.</summary>
      <param name="pProject">[in] Project from which the directories will be removed.</param>
      <param name="cDirectories">[in] Number of directories to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the directories to remove.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgpszMkDocuments" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to remove files.</summary>
      <param name="pProject">[in] Project from which the files will be removed.</param>
      <param name="cFiles">[in] Number of files to remove.</param>
      <param name="rgpszMkDocuments">[in] Array of paths for the files to be removed.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgpszMkDocuments" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS.VSQUERYREMOVEFILERESULTS_RemoveOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results[].For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])">
      <summary>This method notifies the client when a project has requested to rename directories.</summary>
      <param name="pProject">[in] Project requesting to rename directories.</param>
      <param name="cDirs">[in] Number of directories to rename.</param>
      <param name="rgszMkOldNames">[in] Array of paths for the old directory names.</param>
      <param name="rgszMkNewNames">[in] Array of paths for the new directory names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of directories passed in <paramref name="rgszMkOldNames" />. If the result for a single directory is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS.VSQUERYRENAMEDIRECTORYRESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents2.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])">
      <summary>This method notifies the client when a project has requested to rename files.</summary>
      <param name="pProject">[in] Project requesting to rename files.</param>
      <param name="cFiles">[in] Number of files to rename.</param>
      <param name="rgszMkOldNames">[in] Array of old file names.</param>
      <param name="rgszMkNewNames">[in] Array of new file names.</param>
      <param name="rgFlags">[in] Array of flags. For a list of <paramref name="rgFlags" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS" />.</param>
      <param name="pSummaryResult">[out] Summary result object. This object is a summation of the yes and no results for the array of files passed in <paramref name="rgszMkOldNames" />. If the result for a single file is no, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameNotOK" />; if the results for all files are yes, then <paramref name="pSummaryResult" /> is equal to <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS.VSQUERYRENAMEFILERESULTS_RenameOK" />. For a list of <paramref name="pSummaryResult" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
      <param name="rgResults">[out] Array of results. For a list of <paramref name="rgResults" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@,System.IntPtr@)">
      <summary>Returns the current selection.</summary>
      <param name="ppHier">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current selection.</param>
      <param name="pitemid">[out] Pointer to the item identifier of the current selection. For a list of valid <paramref name="pitemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="ppMIS">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface of the window containing the current selection.</param>
      <param name="ppSC">[out] Pointer to a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface of the current selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.IsMyHierarchyCurrent(System.Int32@)">
      <summary>Determines whether the user's hierarchy is current.</summary>
      <param name="pfCurrent">[out] Pointer to a flag that is set to <see langword="true" /> if the user's hierarchy is current and <see langword="false " />if it is not current.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnElementValueChange(System.UInt32,System.Int32,System.Object)">
      <summary>Informs the environment that a change in an element value has occurred. Element values are attached to a window's selection context and used in the same way to update the environment's user interface.</summary>
      <param name="elementid">[in] Identifier of the element that has changed. For a list of valid <paramref name="elementid" /> values, see <see cref="T:Microsoft.VisualStudio.VSConstants.VSSELELEMID" />.</param>
      <param name="fDontPropagate">[in] Flag that indicates whether or not selected values should be broadcast throughout the environment. If set to <see langword="true" />, the information stored in <paramref name="varValue" /> relating to the element is kept private. If set to <see langword="false" />, the <paramref name="varValue" /> information is made available to the environment.</param>
      <param name="varValue">[in] Private data related to the element identified by <paramref name="elementid" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnSelectChange(Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)">
      <summary>Reports that the current selection container has changed.</summary>
      <param name="pSC">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface to access Properties window data for the current selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackSelectionEx.OnSelectChangeEx(System.IntPtr,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,System.IntPtr)">
      <summary>Informs the environment that a change in the current selection has occurred.</summary>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the new selection.</param>
      <param name="itemid">[in] Identifier of the project item of the new selection. For a list of valid <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pMIS">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface of the window containing the new selection.</param>
      <param name="pSC">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> interface of the window containing the new selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.GetMainWrapperFilename(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the filename for a given type library.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the file name. </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.GetMainWrapperFriendlyName(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the name that is displayed in the project system when the component is referred to.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type lib to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the friendly file name. </param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.NeedsRegeneration(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a given wrapper for a given type library needs to be regenerated.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="wszKeyFile">[in] Specifies <paramref name="wszkey" /> file.</param>
      <param name="wszKeyContainerName">[in] Specifies <paramref name="wszkey" /> container name.</param>
      <param name="bDelaySign">[in] Boolean indicating whether delay signed. If <see langword="true" />, the assembly is partially signed.</param>
      <param name="bCurrentlyDelaySigned">[in] Boolean indicating whether currently delay signed.</param>
      <param name="wszExistingWrapperFilename">[in] Specifies the wrapper filename.</param>
      <param name="pbNeedsRegeneration">[out] <see langword="false" /> if the wrapper does not need to be regenerated. <see langword="true" /> if the wrapper needs to be regenerated.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapper.WrapTypeLibrary(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback,System.IntPtr[],System.IntPtr[],System.IntPtr[],System.IntPtr[],System.UInt32@)">
      <summary>Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type library you want to wrap.</param>
      <param name="wszDestinationDirectory">[in] Specifies wszdestination folder.</param>
      <param name="wszKeyFile">[in] Specifies wszkey file.</param>
      <param name="wszKeyContainer">[in] Specifies wszkey container.</param>
      <param name="bDelaySign">[in] Byte containing the delay sign.</param>
      <param name="pCallback">[in] Pointer to a callback object. For more information see, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback" />.</param>
      <param name="rgbstrWrapperPaths">[out] Indicates the type library wrapper path(s).There may be more than one generated wrapper since the method also wraps the dependencies of the type library.</param>
      <param name="rgWrappedTypeLibs">[out] Holds a <see cref="T:Microsoft.VisualStudio.OLE.Interop.TLIBATTR" /> structure for each wrapped type library. Only the GUID, LCID, and major/minor versions are guaranteed to be set in this structure, the rest of the parameters are zero.</param>
      <param name="rgbGenerated">[out] If the wrapper about to be generated already exists on disk and has not expired, the wrapper is not regenerated and corresponding entry in <paramref name="rgbGenerated" /> is set to <see langword="false" />. If the wrapper does not exist on disk, <paramref name="rgbGenerated" /> is set to <see langword="true" /> and the wrapped is generated.</param>
      <param name="rgbstrWrapperTools">[out] This array indicates which tool was used for each returned wrapper. The possible return values are "Tlbimp", "Aximp", and "Primary".</param>
      <param name="pcWrappedTypeLibs">[out] Pointer to the size of wrapped type libraries.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetAssembly(System.String,System.String@)">
      <summary>Returns a path to an assembly if the assembly is referenced. If the assembly is not referenced, returns an error code.</summary>
      <param name="wszFusionName">[in] Specifies assembly name.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the assembly.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetComClassic(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.Int32@,System.String@,System.String@)">
      <summary>Returns a COM classic <see cref="T:Microsoft.VisualStudio.OLE.Interop.TLIBATTR" /> wrapper structure for a given type library and wrapper tool combination.</summary>
      <param name="pTypeLibAttr">[in] Pointer to a type library attribute object.</param>
      <param name="wszWrapperTool">[in] Specifies the wrapper tool.</param>
      <param name="pDelaySigned">[out] Boolean indicating whether the object is delay signed.</param>
      <param name="pbstrWrapperTool">[out] Pointer to the wrapper tool.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the wrapper.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback.GetComClassicByTypeLibName(System.String,Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.Int32@,System.String@,System.String@)">
      <summary>Returns a COM classic wrapper name for a given type library and wrapper tool combination.</summary>
      <param name="wszTypeLibName">[in] Specifies type library name.</param>
      <param name="pTypeLibAttr">[out] Pointer to a type library attribute object.</param>
      <param name="pDelaySigned">[out] Pointer to a delay signed object.</param>
      <param name="pbstrWrapperTool">[out] Pointer to a string containing the wrapper tool name.</param>
      <param name="pbstrPath">[out] Pointer to a string containing the path for the wrapper.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)">
      <summary>Allows clients to hook up for event notifications without making the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <param name="pEventSink">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents" /> interface on the object requesting notification of hierarchy events.</param>
      <param name="pdwCookie">[out] Pointer to a unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.UnadviseHierarchyEvents(System.UInt32)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Close">
      <summary>Closes and cleans up a hierarchy once the environment determines that it is no longer used.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Executes a command on a specific item within a UI hierarchy window, or on the hierarchy itself.</summary>
      <param name="itemid">[in] Identifier of the item affected by the command passed to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" />. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />. For single selection, this value is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">[in, unique] Unique identifier of the command group; can be <see langword="null" /> to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" /></param>
      <param name="nCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">[in] Values describe how the object should execute the command.[1|1] nCmdexecopt value[1|2] Value[1|3] Description[2|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT" />[2|2] 0[2|3] Prompt the user for input or not, depending on the default behavior[3|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_PROMPTUSER" />[3|2] 1[3|3] Execute the command after obtaining user input.[4|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_DONTPROMPTUSER" />[4|2] 2[4|3] Execute the command without prompting the user. For example, clicking the Print toolbar button causes a document to be immediately printed without user input. [5|1] <see cref="F:Microsoft.VisualStudio.OLE.Interop.OLECMDEXECOPT.OLECMDEXECOPT_SHOWHELP" />[5|2] 3[5|3] Show help for the corresponding command, but do not execute. </param>
      <param name="pvaIn">[in, unique] Pointer to a <see langword="VARIANTARG" /> structure containing input arguments. Can be <see langword="null" />.</param>
      <param name="pvaOut">[in, out, unique] <see langword="VARIANTARG" /> structure to receive command output. Can be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetCanonicalName(System.UInt32,System.String@)">
      <summary>Used for workspace persistence, for example, for remembering window positions.</summary>
      <param name="itemid">[in] Identifier of the hierarchy item. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="pbstrName">[out] Pointer to the canonical name of the hierarchy item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Identifies the "type" of a particular node.</summary>
      <param name="itemid">[in] Identifier of hierarchy item whose property is to be retrieved. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="propid">[in] Identifier of the property of the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pguid">[out] Pointer to a GUID property specified in <paramref name="propid" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)">
      <summary>Makes it possible for a node of a given hierarchy to be a shortcut to the middle of another hierarchy.</summary>
      <param name="itemid">[in] Item identifier of the node whose nested hierarchy information is requested. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="iidHierarchyNested">[in] Identifier of the interface to be returned in <paramref name="ppHierarchyNested" />. To implement, first get the object that represents the nested hierarchy and run <see langword="IUnknown::QueryInterface" /> on it to obtain the interface ID (IID). Then, pass the IID in with <paramref name="iidHierarchyNested" />. The result of the <see langword="QueryInterface" /> call goes into <paramref name="ppHierarchyNested" />.</param>
      <param name="ppHierarchyNested">[out, iid_is(iidHierarchyNested)] Pointer to the interface whose identifier was passed in <paramref name="iidHierarchyNested" />.</param>
      <param name="pitemidNested">[out] Pointer to an item identifier of the root node of the nested hierarchy. For a list of <paramref name="pitemidnested" /> values, see <see langword="VSITEMID" />. Although the interface is set up to support shortcutting to any node in another hierarchy, the environment currently only supports shortcutting to the root node of the nested hierarchy, in which case <paramref name="pitemidNested" /> must be set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</param>
      <returns>If <paramref name="itemid" /> is not a nested hierarchy, this method returns <see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />. If the requested interface is not supported on the hierarchy object, <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE" /> is returned. The caller would then treat this node as if it had no children, if the requested interface had been essential (as is often the case when the requested interface is IID_IVsUIHierarchy).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)">
      <summary>Gets properties of a given node or of the hierarchy.</summary>
      <param name="itemid">[in] Item identifier of an item in the hierarchy. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets the service provider from which to access the services.</summary>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface of the service provider.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.ParseCanonicalName(System.String,System.UInt32@)">
      <summary>Returns the identifier of the hierarchy item, given its canonical name.</summary>
      <param name="pszName">[in] Pointer to the canonical name of the hierarchy item.</param>
      <param name="pitemid">[out] Pointer to the item identifier for the hierarchy item. For a list of <paramref name="pitemid" /> values, see <see langword="VSITEMID" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryClose(System.Int32@)">
      <summary>Determines whether the given hierarchy can be closed.</summary>
      <param name="pfCanClose">[out] If <see langword="true" />, then the hierarchy can be closed. If <see langword="false" />, then the hierarchy cannot be closed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <summary>Queries the object for the command status.</summary>
      <param name="itemid">[in] Identifier of the item affected by this command. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />. For single selection, this is the actual item ID. For multiple selections, set <paramref name="itemid" /> equal to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pguidCmdGroup">[in, unique] Pointer to a unique identifier of the command group. The <paramref name="pguidCmdGroup" /> parameter can be <see langword="null" /> to specify the standard group.</param>
      <param name="cCmds">[in] The number of commands in the <paramref name="prgCmds" /> array.</param>
      <param name="prgCmds">[in, out, size_is(cCmds)] A caller-allocated array of <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMD" /> structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration.</param>
      <param name="pCmdText">[in, out, unique] Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT" /> structure in which to return the name and/or status information of a single command. Can be <see langword="null" /> to indicate that the caller does not require this information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)">
      <summary>Sets properties whose values are GUIDs.</summary>
      <param name="itemid">[in] Identifier of the hierarchy item that is to be set. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="propid">[in] Identifier of the property in the given hierarchy item. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="rguid">[in] GUID value of the property specified in <paramref name="propid" /> that is returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetProperty(System.UInt32,System.Int32,System.Object)">
      <summary>Sets properties of a specific node or of the hierarchy.</summary>
      <param name="itemid">[in] Item identifier of the hierarchy item whose properties are to be set. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="propid">[in] Identifier of the hierarchy property. For a list of <paramref name="propid" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID" />.</param>
      <param name="var">[in] Variant that contains property information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Sets the service provider from which to access the services.</summary>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface of the service provider to be set.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.UnadviseHierarchyEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy events without requiring that the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <param name="dwCookie">[in] Abstract handle to the client that was disabled from receiving notifications of hierarchy events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused0">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused1">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused2">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused3">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy.Unused4">
      <summary>Unused. Return <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.AddUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32)">
      <summary>Adds an additional root UI hierarchy node to the list managed by the UI hierarchy window.</summary>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to add.</param>
      <param name="grfAddOptions">[in] Sets selection behavior in the hierarchy window when a new hierarchy is added. For a list of <paramref name="grfAddOptions" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)">
      <summary>Controls the state or appearance of items in the hierarchy.</summary>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to modify the appearance of.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. To change the appearance of the hierarchy itself, set <paramref name="itemid" /> to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="expf">[in] Specifies the state or appearance of the hierarchy or items within the hierarchy, such as whether the hierarchy or item is expanded, highlighted, or shown in bold font. For a list of <paramref name="expf" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.FindCommonSelectedHierarchy(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@)">
      <summary>Finds the lowermost hierarchy that is the nearest ancestor to every selected node.</summary>
      <param name="grfOpt">[in] Controls whether this method returns the Solution as the common hierarchy. For a list of <paramref name="grfOpt" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS" />.</param>
      <param name="lppCommonUIH">[out, retval] Common <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface for the selected hierarchy.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@)">
      <summary>Gets the alternate itemID of the current selection when an alternate UIHierarchy is used.</summary>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current project hierarchy.</param>
      <param name="pitemid">[out] Pointer to the identifier for the current project item. If <paramref name="pitemid" /> is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />, the current selection involves multiple items. These items can be accessed using the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface pointed to by <paramref name="ppMIS" />.</param>
      <param name="ppMIS">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to be used to access a multiple selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.GetItemState(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Returns the state or appearance of the hierarchy.</summary>
      <param name="pHier">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface to determine the state or appearance of.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. For a list of <paramref name="itemid" /> values, see <see langword="VSITEMID" />.</param>
      <param name="dwStateMask">[in] Mask values used to determine which <paramref name="pdwState" /> values are provided. For a list of <paramref name="dwStateMask" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" />.</param>
      <param name="pdwState">[out, retval] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" /> enumeration, which were passed in with <paramref name="expf" /> in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)">
      <summary>Initializes a custom use of a UI hierarchy window.</summary>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to initialize.</param>
      <param name="grfUIHWF">[in] Characteristics of the UI hierarchy window. For a list of values, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS" /> enumeration.</param>
      <param name="ppunkOut">[out] Pointer to the <see langword="IUnknown" /> interface of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object containing the UI hierarchy window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.RemoveUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy)">
      <summary>Removes a root UI hierarchy node from the UI hierarchy window.</summary>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface representing the UI hierarchy node to remove.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.SetCursor(System.IntPtr,System.IntPtr@)">
      <summary>This method is obsolete.  Calling it has no effect. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.SetWindowHelpTopic(System.String,System.UInt32)">
      <summary>Sets the Help topic for the hierarchy window.</summary>
      <param name="lpszHelpFile">[in] Help file name.</param>
      <param name="dwContext">[in] Context for the Help topic.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.AdviseClipboardHelperEvents(Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents,System.UInt32@)">
      <summary>Establishes client notification of hierarchy clipboard helper events without the hierarchy implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <param name="pSink">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents" /> interface on the object requesting notification of hierarchy events.</param>
      <param name="pdwCookie">[out] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.UnadviseClipboardHelperEvents(System.UInt32)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Copy(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Copies a data object from a hierarchy to the clipboard.</summary>
      <param name="pDataObject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> copied from the source hierarchy.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Cut(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Cuts a data object from a hierarchy to the clipboard.</summary>
      <param name="pDataObject">[in] Pointer to a data object cut from the source hierarchy.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Paste(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32)">
      <summary>Pastes a data object from the clipboard to the hierarchy.</summary>
      <param name="pDataObject">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface on the item being pasted. This data object contains the data being transferred in the paste operation. If the paste occurs, then this data object (hierarchy item) is incorporated into the target hierarchy.</param>
      <param name="dwEffects">[in] Pointer to the value of the <paramref name="pdwEffect" /> parameter of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object, identifying all effects that the hierarchy supports.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.UnadviseClipboardHelperEvents(System.UInt32)">
      <summary>Disables client notification of hierarchy clipboard helper events without requiring that the hierarchy implement <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" />.</summary>
      <param name="dwCookie">[in] Abstract handle to the client that was disabled from receiving notifications of hierarchy clipboard helper events.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents.OnClear(System.Int32)">
      <summary>Signals that the clipboard has been cleared.</summary>
      <param name="fDataWasCut">[in] This flag informs the source that the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Cut(Microsoft.VisualStudio.OLE.Interop.IDataObject)" /> method was called (<see langword="true" />), rather than <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelper.Copy(Microsoft.VisualStudio.OLE.Interop.IDataObject)" /> (<see langword="false" />), so the source knows whether to "un-cut-highlight" the items that were cut.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierWinClipboardHelperEvents.OnPaste(System.Int32,System.UInt32)">
      <summary>Signals that a paste operation has occurred.</summary>
      <param name="fDataWasCut">[in] If <see langword="true" />, then the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> has been successfully pasted into a target hierarchy. If <see langword="false" />, then the cut or copy operation was cancelled.</param>
      <param name="dwEffects">[in] Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. These should be the same visual effects used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataSource.OnDropNotify(System.Int32,System.UInt32)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)">
      <summary>Adds a new backward and forward navigation item.</summary>
      <param name="pWindowFrame">[in] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="bstrData">[in] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="punk">[in] Pointer to a specific interface for the navigation point.</param>
      <param name="fReplaceCurrent">[in] If <see langword="true" />, then the current navigation item is replaced.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CenterDialogOnWindow(System.IntPtr,System.IntPtr)">
      <summary>Centers the provided dialog box HWND on the parent HWND (if provided), or on the main IDE window.</summary>
      <param name="hwndDialog">[in] Specifies HWND dialog.</param>
      <param name="hwndParent">[in] Specifies HWND parent.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>This method creates a document window containing the embedding indicated by the <paramref name="punkDocView" /> parameter.</summary>
      <param name="grfCDW">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /><see langword="DWORD" />.</param>
      <param name="pszMkDocument">[in] Path to the document. This path is used by the environment to register this view in the Running Document Table (RDT).</param>
      <param name="pUIH">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy item containing this document.</param>
      <param name="itemid">[in] Identifier of the item within the hierarchy corresponding to this document. Value is taken from the <see langword="VSITEMID" /> enumeration.</param>
      <param name="punkDocView">[in] Pointer to the <see langword="IUnknown" /> interface for the document view object to be displayed within this window. The document view object can be a document object, such as <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleDocument" />, a control, such as <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleObject" /> or <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleControl" />, or a simple environment embedding, such as <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />.</param>
      <param name="punkDocData">[in] Pointer to the <see langword="IUnknown" /> interface of an object representing the document data object of this document in situations where there is view or data separation. For example, the core text editor has a text view object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />) and the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" />). This parameter can be <see langword="null" />. Passing <see langword="null" /> causes the environment to create an instance of a default implementation of the <paramref name="punkDocData" /> on the caller's behalf.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor factory that created an instance of the document view and document data objects. This should be GUID_NULL if the document is not constructed using an editor factory (that is, an instance is created with private knowledge of a particular project).</param>
      <param name="pszPhysicalView">[in] String to identify the physical view type for the editor. Some editor factories can support creating multiple physical view types. For example, it is possible for a single editor factory to support creating a graphical designer view (<see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer" />) as well as a textual code view (<see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code" />). The editor factory must register information in the system registry for the mapping between logical and physical view types under the LogicalViewMap registry subkey.</param>
      <param name="rguidCmdUI">[in] Indicates what set of menus should be merged into the main menu bar when this document is active. This type of menu merging is recommended over OLE2 menu merging, which can be used if this parameter is GUID_NULL. The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="psp">[in] Pointer to the <see langword="IServiceProvider" /> interface. Can be <see langword="null" />. This is an additional service provider provided by the caller (typically a project) making it possible for the caller to provide extra context (by means of services) to the embedded editor. Thus, when the embedded object makes a service request, the frame attempts to satisfy this request. If the service is not provided by the frame, <paramref name="psp" /> is tried. If the service is not found there, then the environment's global service provider is queried.</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Form]). The initial value of this parameter is returned as an [out] parameter in the IVsEditorFactory::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="pfDefaultPosition">[out] Can be <see langword="null" /> if the caller does not desire this information. <see langword="true" /> if the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), hence it was placed in some default location on the screen. <see langword="false" /> if this window was placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the frame containing this editor, which can be used to manipulate the location, size, caption, and other properties of the window. It can also be used to get the <see langword="IUnknown" /> interface pointer of the embedding (that is, the <paramref name="punkDocView" />) or the <paramref name="punkDocData" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>This method creates a tool window containing the embedding indicated by <paramref name="punkDocView" />, or the <paramref name="clsidDocView" /> parameter, if the <paramref name="punkDocView" /> parameter is <see langword="null" />.</summary>
      <param name="grfCTW">[in] Specifies how a new tool window is created. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" />.</param>
      <param name="dwToolWindowId">[in] Tool window instance ID. If you are creating a single-instance tool window, then pass in a pass of zero for this parameter. If you are creating a multi-instance tool window, then pass in the identifier for the next available tool window.</param>
      <param name="punkTool">[in] View object to be displayed in the client area of the tool window. This object can be an Active X control (such as, <see langword="IOleInPlaceActiveObject" />, <see langword="IOleControl" />), an Active X document (such as <see langword="IOleView" />, <see langword="IOleDocument" />), or a simple environment embedding (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane" />). Can be <see langword="null" /> if a value is provided for <paramref name="rclsidTool" />.</param>
      <param name="rclsidTool">[in] Tool to create class ID for the type of tool window. The indicated class is created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry2.CreateInstance(System.Guid,System.Object,System.Guid@,System.UInt32,System.IntPtr@)" /> (clsidTool). This functionality is a convenience for the caller. Can be GUID_NULL if a value is provided for <paramref name="punkTool" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for this tool window so the environment can retain information (for example, window position, docking status, and so on) about this tool window across sessions. No two tool windows can share the same GUID. If so, the second tool window would fail in creation.</param>
      <param name="rguidAutoActivate">[in] Must be GUID_NULL. Do not use. For more information about how tool window visibility is controlled, see Tool Window Overview.</param>
      <param name="psp">[in] Pointer to the <see langword="IServiceProvider" /> interface. Can be <see langword="null" />. This parameter allows the caller to specify an additional service provider provided for the tool window, and thus provide extra context to the tool window through the service. When the embedding makes a service request, the frame attempts to satisfy this request. If the service is not provided by the frame, then the service specified in the psp parameter is queried. If the service is not found there, then the environment's global service provider is queried.</param>
      <param name="pszCaption">[in] Tool window caption.</param>
      <param name="pfDefaultPosition">[out] Pointer to the default position of the tool window. Can be <see langword="null" />, if the caller does not desire this information. If <see langword="false" />, then the environment did not have any information saved about the last position of this tool window (that is, <paramref name="guidPersistenceSlot" /> was not found), and the tool window is placed in some default location on the screen. If set to <see langword="true" />, then the window is placed where the user last located and sized it.</param>
      <param name="ppWindowFrame">[out] Pointer to the window frame containing the tool window. Use this pointer to manipulate the location, size, caption, and so on of the tool window and to get the <see langword="IUnknown" /> interface pointer of the embedding.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.EnableModeless(System.Int32)">
      <summary>Enables or disables a frame's modeless dialog box.</summary>
      <param name="fEnable">[in] <see langword="true" /> when exiting a modal state. <see langword="false" /> when entering a modal state.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.FindToolWindow(System.UInt32,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> pointer for the requested single-instance tool window.</summary>
      <param name="grfFTW">[in] Provides criteria used to find a tool window in the environment. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for a tool window created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />. The caller of this method can use predefined identifiers that map to tool windows if those tool windows are known to the caller.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object containing the tool window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.FindToolWindowEx(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> pointer for the requested single- or multi-instance tool window.</summary>
      <param name="grfFTW">[in] Provides criteria used to find a tool window in the environment. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN" />.</param>
      <param name="rguidPersistenceSlot">[in] Unique identifier for a tool window created using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />. The caller of this method can use predefined identifiers that map to tool windows if those tool windows are known to the caller.</param>
      <param name="dwToolWinId">[in] Identifier of the requested tool window in the multi-instanced tool window. The first instance of a multi-instance tool window has an identifier of zero, the second instance has an identifier of one, and so on.</param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the desired tool window</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetAppName(System.String@)">
      <summary>Returns the name of the application.</summary>
      <param name="pbstrAppName">[out] Pointer to the name of the application</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetCurrentBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the current backward and forward navigation item.</summary>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point. This is the interface passed in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.AddNewBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.String,System.Object,System.Int32)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDialogOwnerHwnd(System.IntPtr@)">
      <summary>Returns the HWND that can be used to parent modal dialogs.</summary>
      <param name="phwnd">[out] Pointer to a window handle that can be used to parent modal dialogs.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDirectoryViaBrowseDlg(Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW[])">
      <summary>Brings up the Browse dialog box to find a directory location.</summary>
      <param name="pBrowse">[in, out] Pointer to a browse file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the directory location selected by the user. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" /> structure for more information.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetDocumentWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Returns an enumerator that iterates through all existing document windows in the environment.</summary>
      <param name="ppenum">[out] Pointer to the document window enumerator.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetErrorInfo(System.String@)">
      <summary>Gets the text of error messages.</summary>
      <param name="pbstrErrText">[out] Pointer to a string containing the error text.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetNextBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the next backward and forward navigation item.</summary>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetOpenFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW[])">
      <summary>Brings up the Open dialog box to obtain an open file name.</summary>
      <param name="pOpenFileName">[in, out] Pointer to an open file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the user's file selection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetPreviousBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.String@,System.Object@)">
      <summary>Returns the previous backward and forward navigation item.</summary>
      <param name="ppWindowFrame">[out] Pointer to the window frame for the window containing the backward and forward navigation item.</param>
      <param name="pbstrData">[out] Any arbitrary data that is needed for the navigation point (insertion point).</param>
      <param name="ppunk">[out] Pointer to a specific interface for the navigation point.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetSaveFileNameViaDlg(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[])">
      <summary>Brings up the Save As dialog box to save a file.</summary>
      <param name="pSaveFileName">[in, out] Pointer to a save file name structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the file name selected by the user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetToolWindowEnum(Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Returns an enumerator that iterates through all of the existing tool windows in the environment.</summary>
      <param name="ppenum">[out] Pointer to the tool window enumerator.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetURLViaDlg(System.String,System.String,System.String,System.String@)">
      <summary>Brings up Open Project From Web dialog box to obtain a URL from a user.</summary>
      <param name="pszDlgTitle">[in] Pointer to the dialog box title.</param>
      <param name="pszStaticLabel">[in] Pointer to the static label above the drop-down list box.</param>
      <param name="pszHelpTopic">[in] An F1 keyword that points to a specific Help topic for this dialog box. </param>
      <param name="pbstrURL">[out] URL entered by the user.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.GetVSSysColor(Microsoft.VisualStudio.Shell.Interop.VSSYSCOLOR,System.UInt32@)">
      <summary>This method is deprecated. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)" /> instead.</summary>
      <param name="dwSysColIndex">Do not use.</param>
      <param name="pdwRGBval">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.OnModeChange(Microsoft.VisualStudio.Shell.Interop.DBGMODE)">
      <summary>Internal method. Do not use.</summary>
      <param name="dbgmodeNew">[in] Internal method. Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.PostExecCommand(System.Guid@,System.UInt32,System.UInt32,System.Object@)">
      <summary>Allows asynchronous execution of commands.</summary>
      <param name="pguidCmdGroup">[in, unique] Unique identifier of the command group; can be <see langword="null" /> to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="nCmdexecopt">[in] Values describe how the object should execute the command.</param>
      <param name="pvaIn">[in, unique] Pointer to a VARIANTARG structure containing input arguments. Can be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.PostSetFocusMenuCommand(System.Guid@,System.UInt32)">
      <summary>Sets focus in a combo box.</summary>
      <param name="pguidCmdGroup">[in] Pointer to a GUID specifying the command group.</param>
      <param name="nCmdID">[in] Integer containing the command group ID.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RefreshPropertyBrowser(System.Int32)">
      <summary>Makes it possible for a project (or any other selected object being browsed by the Properties window) to keep the Properties window in sync with property changes without implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer" /> and firing <see cref="M:Microsoft.VisualStudio.OLE.Interop.IPropertyNotifySink.OnChanged(System.Int32)" /> events.</summary>
      <param name="dispid">[in] Dispatch ID of the property that has changed. Pass DISPID_UNKNOWN to refresh all properties.</param>
      <returns>S_OK if the method succeeds, otherwise a failure code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveAdjacentBFNavigationItem(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)">
      <summary>Removes an adjacent navigation item in the specified direction.</summary>
      <param name="rdDir">[in] Specifies which direction the navigation item to be removed is located in.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.RemoveCurrentNavigationDupes(Microsoft.VisualStudio.Shell.Interop.RemoveBFDirection)">
      <summary>Removes navigation duplicates in backward and forward navigation.</summary>
      <param name="rdDir">[in] Specifies in which direction the navigation item to be removed is located.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ReportErrorInfo(System.Int32)">
      <summary>Helper method that displays an error message to the user.</summary>
      <param name="hr">[in] Error message to display.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SaveDocDataToFile(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.Object,System.String,System.String@,System.Int32@)">
      <summary>Helper method used by editors that implement the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData" /> interface.</summary>
      <param name="grfSave">[in] Specifies file Save options. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS" />.</param>
      <param name="pPersistFile">[in] Pointer to the <see langword="IUnknown" /> interface of the file in which the doc data is to be saved.</param>
      <param name="pszUntitledPath">[in] File path to which the doc data for an as-yet unsaved document is to be saved.</param>
      <param name="pbstrDocumentNew">[out] New document file name.</param>
      <param name="pfCanceled">[out] Set to <see langword="true" /> if the user aborts the save by clicking the Cancel button.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetErrorInfo(System.Int32,System.String,System.UInt32,System.String,System.String)">
      <summary>Helper method that records rich information about an error.</summary>
      <param name="hr">[in] Error message to display.</param>
      <param name="pszDescription">[in] Rich error information.</param>
      <param name="dwReserved">[in] Must be zero.</param>
      <param name="pszHelpKeyword">[in] Pointer to the F1 keyword to attach to the Help button on the message box. This keyword links through the environment to a Help file (.HxS) registered with the Visual Studio Help collection. For more information about developing F1 keywords, see Unique F1 Keywords.</param>
      <param name="pszSource">[in] Pointer to pass to the <see langword="SetSource" /> method of the standard Windows <see langword="ICreateErrorInfo" /> interface, which sets the language-dependent <paramref name="ProgID" /> for the class or application that raised the error.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetForegroundWindow">
      <summary>Activates the environment application window by calling the SetForegroundWindow Win32 API.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetMRUComboText(System.Guid@,System.UInt32,System.String,System.Int32)">
      <summary>Adds information to a combo box list.</summary>
      <param name="pguidCmdGroup">[in] Unique identifier of the command group; can be <see langword="null" /> to specify the standard group. All the commands that are passed in the <paramref name="nCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="dwCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="lpszText">[in] Specifies the text to place in the combo box list.</param>
      <param name="fAddToList">[in] If <see langword="true" />, then the text in <paramref name="lpszText" /> is added to the combo box.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetMRUComboTextW(System.Guid[],System.UInt32,System.String,System.Int32)">
      <summary>Adds information to a combo box list.</summary>
      <param name="pguidCmdGroup">[in] Unique identifier of the command group; can be <see langword="null" /> to specify the standard group. All the commands that are passed in the <paramref name="dwCmdID" /> must belong to the group specified by <paramref name="pguidCmdGroup" />.</param>
      <param name="dwCmdID">[in] The command to be executed. This command must belong to the group specified with <paramref name="pguidCmdGroup" />.</param>
      <param name="pwszText">[in] Text to place in the combo box.</param>
      <param name="fAddToList">[in] If <see langword="true" />, then the text in <paramref name="lpszText" /> is added to the combo box and the associated list. If <see langword="false" />, then the <paramref name="lpszText" /> is only added to the combo box, but not added to the associated list.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetToolbarVisibleInFullScreen(System.Guid[],System.UInt32,System.Int32)">
      <summary>Sets the toolbar to visible when the window is in full-screen mode.</summary>
      <param name="pguidCmdGroup">[in] Unique identifier of the toolbar group; can be <see langword="null" /> to specify the standard group.</param>
      <param name="dwToolbarId">[in] Double word containing the toolbar id.</param>
      <param name="fVisibleInFullScreen">[in] <see langword="true" /> indicates that the toolbar is visible in full-screen mode. The default value is <see langword="false" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetupToolbar(System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar,Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost@)">
      <summary>Called by VSPackage that creates a tool window in order to attach a toolbar to the tool window.</summary>
      <param name="hwnd">[in] Handle to the window in which the toolbar is to be set up.</param>
      <param name="ptwt">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbar" /> interface for the new toolbar.</param>
      <param name="pptwth">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.SetWaitCursor">
      <summary>Changes the cursor to the hourglass cursor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ShowContextMenu(System.UInt32,System.Guid@,System.Int32,Microsoft.VisualStudio.Shell.Interop.POINTS[],Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Shows the context menu for the active menu object.</summary>
      <param name="dwCompRole">[in] Do not use.</param>
      <param name="rclsidActive">[in] Specifies the GUID of the context menu in the .ctc file.</param>
      <param name="nMenuId">[in] Identifier of the context menu to show from the .ctc file.</param>
      <param name="pos">[in] Specifies the position to place the context menu.</param>
      <param name="pCmdTrgtActive">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> interface of the active menu object. Can be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.ShowMessageBox(System.UInt32,System.Guid@,System.String,System.String,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON,Microsoft.VisualStudio.Shell.Interop.OLEMSGICON,System.Int32,System.Int32@)">
      <summary>Manages implementation of a message box event.</summary>
      <param name="dwCompRole">[in] Do not use.</param>
      <param name="rclsidComp">[in] Do not use.</param>
      <param name="pszTitle">[in] Pointer to the title of the message box.</param>
      <param name="pszText">[in] Pointer to the text of the message box.</param>
      <param name="pszHelpFile">[in] F1 keyword that corresponds to a specific Help topic. For more information, see Unique F1 Keywords.</param>
      <param name="dwHelpContextID">[in] Pass in zero.</param>
      <param name="msgbtn">[in] Specifies the set of buttons to appear in the message box. This parameter is similar to the <paramref name="uType" /> parameter of the <see langword="Win32 MessageBox" /> function in that it uses similar values with similar semantics. For a list of valid <paramref name="msgbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGBUTTON" />.
            Note   OLEMSGBUTTON_YESALLNOCANCEL is not supported and returns the same result as OLEMSGBUTTON_OK.</param>
      <param name="msgdefbtn">[in] Specifies the default button for the message box. For a list of valid <paramref name="msgdefbtn" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGDEFBUTTON" />.</param>
      <param name="msgicon">[in] Specifies the icon and type of the message. For a list of valid <paramref name="msgicon" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.OLEMSGICON" />.</param>
      <param name="fSysAlert">[in] If <see langword="true" />, this flag causes the <see langword="MB_SYSTEMMODAL" /> flag to be set when showing the message. If <see langword="false" />, no system flag is set during the message display.</param>
      <param name="pnResult">[out] Specifies the result of the message display. If <see langword="ShowMessageBox" /> succeeds, <paramref name="pnResult" /> is set to one of the following menu item values returned by the dialog box.ValueDescriptionIDABORT
                    Abort button was clicked.IDCANCEL
                    Cancel button was clicked or the ESC key was pressed. If the message box does not have a Cancel button, pressed the ESC key has no effect.IDIGNORE
                    Ignore button was clicked.IDNONo button was clicked.IDOK
                    OK button was clicked.IDRETRY
                    Retry button was clicked.IDYES
                    Yes button was clicked.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.TranslateAcceleratorAsACmd(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Causes the environment to use the active key binding table to convert, if possible, a keyboard message into the appropriate command, then route the command using the usual command routing mechanism.</summary>
      <param name="pMsg">[in] Pointer to a message structure.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.UpdateCommandUI(System.Int32)">
      <summary>Informs the environment to update the state of the command bars (menus and toolbars).</summary>
      <param name="fImmediateUpdate">[in] <see langword="true" /> if the update is performed synchronously (immediately). It is strongly recommended to pass <see langword="false" /> for this parameter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.UpdateDocDataIsDirtyFeedback(System.UInt32,System.Int32)">
      <summary>Makes it possible for a document data object to synchronously inform the environment when their document must be changed.</summary>
      <param name="docCookie">[in] An abstract value representing the document in the Running Document Table.</param>
      <param name="fDirty">The value of this parameter is ignored. The document's <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistHierarchyItem.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)" /> method is called to determine the document's dirty state.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr.ReopenDocumentWindows(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Reopens all document windows from the window position information in the stream.</summary>
      <param name="pStream">[in] A pointer to an object of type IStream.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellDocumentWindowMgr.SaveDocumentWindowPositions(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves the window positions and <paramref name="guidEditorType/pszPhysicalView" /> for each open document window into a stream.</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pStream">[in] A pointer to an object of type IStream.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.AddStandardPreviewer(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.UInt32)">
      <summary>Adds a Web browser to the list of available previewers.</summary>
      <param name="pszExePath">[in] Full path to the executable file you want to launch for the previewer.</param>
      <param name="pszDisplayName">[in] Name that appears in the Browse With dialog box.</param>
      <param name="fUseDDE">[in] Set to <see langword="true" /> to use Dynamic Data Exchange (DDE). For more information, see Dynamic Responding to Dynamic Data Exchange (DDE)</param>
      <param name="pszDDEService">[in] Identifies the DDE service.</param>
      <param name="pszDDETopicOpenURL">[in] Identifies the topic open URL.</param>
      <param name="pszDDEItemOpenURL">[in] Provides the path to the file that is being browsed.</param>
      <param name="pszDDETopicActivate">[in] Identifies the topic activate URL.</param>
      <param name="pszDDEItemActivate">[in] Identifies the topic activate string.</param>
      <param name="aspAddPreviewerFlags">[in] Sets the viewer to be one of the system defaults. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.GetFirstDefaultPreviewer(System.String@,System.Int32@,System.Int32@)">
      <summary>Returns the .exe file path of the first default web browser.</summary>
      <param name="pbstrDefBrowserPath">[out] Pointer to the full path to the default browser.</param>
      <param name="pfIsInternalBrowser">[out] <see langword="true" /> if the default browser is internal.</param>
      <param name="pfIsSystemBrowser">[out] <see langword="true" /> if the default browser is the system browser.</param>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if a default previewer is defined. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if there are no default previewers.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.GetStandardEditorFactory(System.UInt32,System.Guid@,System.String,System.Guid@,System.String@,Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory@)">
      <summary>Returns the editor factory associated with a specific document (for example, a file type).</summary>
      <param name="dwReserved">[in] Reserved for future use.</param>
      <param name="pguidEditorType">[in, out] GUID of the editor factory you want returned. To indicate which editor factory should be returned, specify a value for <paramref name="pguidEditorType" /> or <paramref name="pszMkDocument" />. Do not provide values for both parameters.</param>
      <param name="pszMkDocument">[in] String form of the moniker identifier of the document in the project system, for example, the full path to the file. To indicate which editor factory should be returned, specify a value for <paramref name="pszMkDocument" /> or <paramref name="pguidEditorType" />. Do not provide values for both parameters.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="pbstrPhysicalView">[out] Physical view string corresponding to the view that is associated with the logical view GUID passed in <paramref name="rguidLogicalView" />.</param>
      <param name="ppEF">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> implementation for the requested editor.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.InitializeEditorInstance(System.UInt32,System.IntPtr,System.IntPtr,System.String,System.Guid@,System.String,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Initializes an instance of the document editor.</summary>
      <param name="grfIEI">[in] Flags controlling the initialization of the editor. For a list of enumeration values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS" />. If you specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_DoNotLoadDocData" /> for this parameter, then this method does not attempt to load your <see langword="DocData" /> by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData2.LoadDocData(System.String)" />.</param>
      <param name="punkDocView">[in] Pointer to the <see langword="IUnknown" /> interface of the document data object.</param>
      <param name="punkDocData">[in] Pointer to the <see langword="IUnknown" /> interface of the document data object.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in]GUID of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View. If you implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on your document data object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is displayed. The editor window is displayed when the editor is instantiated. By specifying the logical view GUID, the caller of <see langword="IVsUIShellOpenDocument::InitializeEditorInstance" /> can request the specific view that matches the reason the caller is requesting the view. For example, the caller would specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging view, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the format: "ProjectName – ItemName."</param>
      <param name="pszEditorCaption">[in] Initial caption defined by the document editor for the document window. This is typically a string enclosed in square brackets (for example, [Form]). The initial value of this parameter is returned as an [out] parameter in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> method.</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the document.</param>
      <param name="itemid">[in] UI hierarchy item identifier of the document in the project system. For more information see <see langword="VSITEMID" />.</param>
      <param name="punkDocDataExisting">[in] Pointer to the <see langword="IUnknown" /> interface of the document data object if the document data object already exists in the running document table.</param>
      <param name="pSPHierContext">[in] Project-specific service provider. For more information, see <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
      <param name="rguidCmdUI">[in] Command UI GUID of the commands to display for this editor.</param>
      <param name="ppWindowFrame">[out, retval] The window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsDocumentInAProject(System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,System.Int32@)">
      <summary>Determines whether a document is part of the project.</summary>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="ppUIH">[out] If the document is open, this is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface implementation of the project that contains the document. If the document is not open, the value of this parameter is <see langword="null" />. You can call <see langword="Query Interface" /> From <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to obtain a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project system. For more information see <see langword="VSITEMID" />.</param>
      <param name="ppSP">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the project.</param>
      <param name="pDocInProj">[out, retval] Flags that indicate whether a document is part of a project. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsDocumentOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)">
      <summary>Determines whether a document is currently open.</summary>
      <param name="pHierCaller">[in] If the document is open, this is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface implementation of the project that contains the document. If the document is not open, this is <see langword="null" />. You can call <see langword="Query Interface" /> from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to obtain a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the project. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />.</param>
      <param name="itemidCaller">[in] Hierarchy item identifier of the document in the project. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />. For more information, see <see langword="VSITEMID" />.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="grfIDO">[in] Flags that control what actions are performed on an open document. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS" />.</param>
      <param name="ppHierOpen">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that contains the Open document. If <paramref name="pfOpen" /> is <see langword="false" />, then this parameter is <see langword="null" />.</param>
      <param name="pitemidOpen">[out] Pointer to the hierarchy item identifier of the open document in the project system. For more information see <see langword="VSITEMID" />. </param>
      <param name="ppWindowFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the window frame that contains the editor in which the document is being edited. If <paramref name="pfOpen" /> is <see langword="false" />, then this parameter is <see langword="null" />.</param>
      <param name="pfOpen">[out, retval] <see langword="true" /> if the document is currently open; <see langword="false" /> if the document is not open.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsSpecificDocumentViewOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)">
      <summary>Determines whether a specified document view is open.</summary>
      <param name="pHierCaller">[in] Hierarchy identifier of the caller passed as a pointer to the caller's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> implementation. This parameter is used by the environment's implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.IsSpecificDocumentViewOpen(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.String,System.Guid@,System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,System.Int32@)" /> if the caller specifies a value of IDO_ActivateIfOpen for the <paramref name="grfIDO" /> parameter..</param>
      <param name="itemidCaller">[in] UI hierarchy item identifier of the caller. Used with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen" />. For more information see <see langword="VSITEMID" />.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in] GUID of the editor factory. This value, in combination with <paramref name="pszPhysicalView" /> is used to create the unique identifier of the specified document view.</param>
      <param name="pszPhysicalView">[in] Physical view string. This value, in combination with <paramref name="rguidEditorType" />, is used to create the unique identifier of the specified document view.</param>
      <param name="grfIDO">[in] Flags that control what actions are performed on the open document. For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS" />.</param>
      <param name="ppHierOpen">[out] If <paramref name="pfOpen" /> is <see langword="true" />, then this parameter is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> implementation of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> that owns the view. If <paramref name="pfOpen" /> is <see langword="false" />, then this parameter is <see langword="null" />.</param>
      <param name="pitemidOpen">[out] If pfOpen is <see langword="true" />, then this parameter is a pointer to the UI hierarchy item identifier of the open document that is represented by the specified view. If <paramref name="pfOpen" /> is <see langword="false" />, then this parameter is <see langword="null" />. For more information see <see langword="VSITEMID" />.</param>
      <param name="ppWindowFrame">[out] If pfOpen is <see langword="true" />, then this parameter is a pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> containing the specified view.</param>
      <param name="pfOpen">[out, retval] <see langword="true" /> if the specified document view is open. <see langword="false" /> if the specified document view is not open.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.MapLogicalView(System.Guid@,System.Guid@,System.String@)">
      <summary>Maps a physical view to a logical view.</summary>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="rguidLogicalView">[in] GUID of the logical view. For a list of logical view GUID, see Logical View and Physical View.</param>
      <param name="pbstrPhysicalView">[out, retval] Pointer to the physical view.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenCopyOfStandardEditor(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Used to implement Window.NewWindow functionality.</summary>
      <param name="pWindowFrame">[in] Pointer to the original window frame to clone.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View.</param>
      <param name="ppNewWindowFrame">[out] Pointer to the new, cloned window frame.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Finds an appropriate project to open the document.</summary>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown, when the editor is instantiated. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="ppSP">[out] Pointer to the IServiceProvideroledbinterfaces_implemented_by_the_provider interface.</param>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that can open the document.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project. For more information see <see langword="VSITEMID" />.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProjectWithSpecific(System.String,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Finds a specified project to open this document.</summary>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="grfEditorFlags">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS" /> enumeration.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Unique identifier of the physical view.</param>
      <param name="rguidLogicalView">[in] Unique identifier of the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown, when the editor is instantiated. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="ppSP">[out] Pointer to the <see langword="IServiceProvider" /> interface.</param>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface of the project that can open the document.</param>
      <param name="pitemid">[out] Pointer to the hierarchy item identifier of the document in the project. For more information see <see langword="VSITEMID" />.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the window frame that contains the editor. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens a specified editor.</summary>
      <param name="grfOpenSpecific">[in] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidEditorType">[in] Unique identifier of the editor type.</param>
      <param name="pszPhysicalView">[in] Name of the physical view. If <see langword="null" />, the environment calls <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory.MapLogicalView(System.Guid@,System.String@)" /> on the editor factory to determine the physical view that corresponds to the logical view. In this case, <see langword="null" /> does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. For a list of logical view GUIDS, see Logical View and Physical View. If you implement <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on your document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown when the editor is instantiated. By specifying the logical view GUID, the caller of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.InitializeEditorInstance(System.UInt32,System.IntPtr,System.IntPtr,System.String,System.Guid@,System.String,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> can request the specific view that matches the reason the caller is requesting the view. For example, the caller would specify LOGVIEWID_Debugging to get the view appropriate for debugging view, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</param>
      <param name="itemid">[in] UI hierarchy item identifier for the specified editor. For more information see <see langword="VSITEMID" />.</param>
      <param name="punkDocDataExisting">[in] Pointer to the <see langword="IUnknown" /> interface.</param>
      <param name="pSPHierContext">[in] Pointer to the <see langword="IServiceProvide" /> interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens the standard editor.</summary>
      <param name="grfOpenStandard">[in] Flags whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS" /> enumeration.</param>
      <param name="pszMkDocument">[in] String form of the unique moniker identifier of the document in the project system, for example, the full path to the file. In non-file cases, this identifier is often in the form of a URL.</param>
      <param name="rguidLogicalView">[in] GUID identifying the logical view. If the editor implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiViewDocumentView" /> on the document view object, then the value passed into the <paramref name="rguidLogicalView" /> parameter determines which view is activated when the editor window is shown. By specifying the logical view GUID, you can request the specific view that matches the reason you are requesting the view. For example, specify <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> to get the view appropriate for debugging, or <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" /> to get the view appropriate for the text editor (that is, a view that implements <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />).</param>
      <param name="pszOwnerCaption">[in] Initial caption defined by the document owner (that is, the project) for the document window. This is often of the form: "ProjectName – ItemName."</param>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface.</param>
      <param name="itemid">[in] UI hierarchy item identifier of the standard editor. For more information see <see langword="VSITEMID" />.</param>
      <param name="punkDocDataExisting">[in] Pointer to the <see langword="IUnknown" /> interface of the document data object.</param>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
      <param name="ppWindowFrame">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardPreviewer(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.UInt32)">
      <summary>Opens a standard web browser for the specified document.</summary>
      <param name="ospOpenDocPreviewer">[in] Bitwise flags that indicate how the previewer is opened. These flags control whether the Browse With dialog box is used (<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog" />). For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS" />.</param>
      <param name="pszURL">[in] URL of the document to preview.</param>
      <param name="resolution">[in] Resolution enumeration that determines the resolution in which the browser windows are to be displayed (if supported). Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION" /> enumeration.</param>
      <param name="dwReserved">[in] Reserved for future use. Set to <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.SearchProjectsForRelativePath(System.UInt32,System.String,System.String[])">
      <summary>Converts a relative path for a document to an absolute path that can be passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
      <param name="grfRPS">[in] Flags specifying how the search path should be resolved. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS" />.</param>
      <param name="pszRelPath">[in] Relative path to the document. This might simply be the file name.</param>
      <param name="pbstrAbsPath">[out, retval] Full path name of the document. This is the same as the <paramref name="pszMkDocument" /> string value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Called when the active project configuration for a project in the solution has changed.</summary>
      <param name="pIVsHierarchy">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Begin(System.Int32@)">
      <summary>Called before any build actions have begun. This is the last chance to cancel the build before any building begins.</summary>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Cancel">
      <summary>Called when a build is being cancelled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)">
      <summary>Called when a build is completed.</summary>
      <param name="fSucceeded">[in] <see langword="true" /> if no update actions failed.</param>
      <param name="fModified">[in] <see langword="true" /> if any update action succeeded.</param>
      <param name="fCancelCommand">[in] <see langword="true" /> if update actions were canceled.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents.UpdateSolution_StartUpdate(System.Int32@)">
      <summary>Called before the first project configuration is about to be built.</summary>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>Called when the active project configuration for a project in the solution has changed.</summary>
      <param name="pIVsHierarchy">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)">
      <summary>Called right before a project configuration begins to build.</summary>
      <param name="pHierProj">[in] Pointer to a hierarchy project object.</param>
      <param name="pCfgProj">[in] Pointer to a configuration project object.</param>
      <param name="pCfgSln">[in] Pointer to a configuration solution object.</param>
      <param name="dwAction">[in] Double word containing the action.</param>
      <param name="pfCancel">[in, out] Pointer to a flag indicating cancel.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)">
      <summary>Called right after a project configuration is finished building.</summary>
      <param name="pHierProj">[in] Pointer to a hierarchy project object.</param>
      <param name="pCfgProj">[in] Pointer to a configuration project object.</param>
      <param name="pCfgSln">[in] Pointer to a configuration solution object.</param>
      <param name="dwAction">[in] Double word containing the action.</param>
      <param name="fSuccess">[in] Flag indicating success.</param>
      <param name="fCancel">[in] Flag indicating cancel.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Begin(System.Int32@)">
      <summary>Called before any build actions have begun. This is the last chance to cancel the build before any building begins.</summary>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Cancel">
      <summary>Called when a build is being cancelled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)">
      <summary>Called when a build is completed.</summary>
      <param name="fSucceeded">[in] <see langword="true" /> if no update actions failed.</param>
      <param name="fModified">[in] <see langword="true" /> if any update action succeeded.</param>
      <param name="fCancelCommand">[in] <see langword="true" /> if update actions were canceled.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2.UpdateSolution_StartUpdate(System.Int32@)">
      <summary>Called before the first project configuration is about to be built.</summary>
      <param name="pfCancelUpdate">[in, out] Pointer to a flag indicating cancel update.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddAttribute(Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE,System.String,System.String)">
      <summary>Adds an attribute, lookup keyword, or F1 keyword to the context or subcontext bag.</summary>
      <param name="usage">[in] Type of item (attribute, keyword, or F1 keyword) to add to the context or suncontext bag. For a list of usage values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE" />.</param>
      <param name="szName">[in] If you are adding an attribute to the context or subcontext bag, then specify the name of the attribute for this parameter. If you are adding a lookup keyword or an F1 keyword, enter the term "keyword" for this parameter.</param>
      <param name="szValue">[in] If you are adding an attribute to the context or subcontext bag, then specify the value of the attribute for this parameter. If you are adding a lookup keyword or F1 keyword, enter the actual text of the keyword for this parameter.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddSubcontext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.Int32,System.UInt32@)">
      <summary>Links a subcontext bag to a parent context bag.</summary>
      <param name="pSubCtx">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface (the subcontext bag).</param>
      <param name="lPriority">[in] Priority of the subcontext. For a list of <paramref name="lPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
      <param name="pdwCookie">[out, retval] Pointer to a unique identifier for the subcontext.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AdviseUpdate(Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate,System.UInt32@)">
      <summary>Enables clients to receive notification when the user context property bag is changed.</summary>
      <param name="pUpdate">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" /> interface, which sends an update notification.</param>
      <param name="pdwCookie">[out, retval] Unique identifier for the referenced event sink. This value is required to unadvise the event sink using <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.UnadviseUpdate(System.UInt32)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.CountAttributes(System.String,System.Int32,System.Int32@)">
      <summary>Returns the number of attributes or keywords present in the context or subcontext bag.</summary>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to determine the number of attributes of a given name in the context bag. Specify "keyword" to determine the number of F1 or lookup keywords in the context or subcontext bag.</param>
      <param name="fIncludeChildren">[in] If <see langword="true" />, then the number of subcontext attributes or keywords are also returned in the count. If <see langword="false" />, then the subcontext is excluded from the count.</param>
      <param name="pc">[out, retval] Pointer to an integer that indicates the number of attributes of a specific name or the number of keywords.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.CountSubcontexts(System.Int32@)">
      <summary>Returns the number of subcontext bags associated with the context bag.</summary>
      <param name="pc">[out, retval] Pointer to an integer that indicates the number of subcontext bags associated with the context bag.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttribute(System.Int32,System.String,System.Int32,System.String@,System.String@)">
      <summary>Returns the specified attribute or keyword from the context or subcontext bag based on index position or name.</summary>
      <param name="iAttribute">[in] Index into the collection of attributes and keywords in the context or subcontext bag.</param>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to access a specific attribute. Specify "keyword" to access an F1 or lookup keyword.</param>
      <param name="fIncludeChildren">[in] If <see langword="true" />, then the subcontext bags associated with the context bag are also returned. If <see langword="false" />, then the subcontext is excluded.</param>
      <param name="pbstrName">[out] Pointer to the specific attribute name or the value keyword, if a match is found.</param>
      <param name="pbstrValue">[out, retval] Pointer to the specific attribute value or the keyword text, if a match is found.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttributePri(System.Int32,System.String,System.Int32,System.Int32@,System.String@,System.String@)">
      <summary>Returns a specified attribute or keyword from the context or subcontext bag based on index position, name, or priority.</summary>
      <param name="iAttribute">[in] Index into the collection of attributes and keywords in the context or subcontext bag.</param>
      <param name="pszName">[in] Attribute name or keyword. Specify the attribute name to access a specific attribute in the context or subcontext bag. Specify keyword to access an F1 or lookup keyword.</param>
      <param name="fIncludeChildren">[in] If <see langword="true" />, then the subcontext elements associated with the context bag are also returned. If <see langword="true" />, then the subcontext is excluded.</param>
      <param name="piPriority">[out] Priority of the attribute or keyword. For a list of <paramref name="piPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
      <param name="pbstrName">[out] Pointer to the specific attribute name or the value keyword, if a match is found.</param>
      <param name="pbstrValue">[out, retval] Pointer to the specific attribute value or the keyword text, if a match is found.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetAttrUsage(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE[])">
      <summary>Returns the type of context (attribute, lookup keyword, or F1 keyword) that is present at a specified index position in the context or subcontext bag.</summary>
      <param name="index">[in] Index position of the context item in the context bag. The index is zero based.</param>
      <param name="fIncludeChildren">[in] If <see langword="true" />, then the subcontext associated with the context bag is included. If <see langword="false" />, then the subcontext is excluded.</param>
      <param name="pUsage">[out] Specifies whether an attribute or keyword is located at the specified index position in the context bag. For a list of <paramref name="pUsage" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetPriority(System.Int32@)">
      <summary>Determines the priority of an attribute or keyword in the context or subcontext bag.</summary>
      <param name="lPriority">[out] Priority of the attribute or keyword. For a list of <paramref name="lPriority" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTPRIORITY" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.GetSubcontext(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUserContext@)">
      <summary>Returns a specified subcontext bag from the parent context bag.</summary>
      <param name="i">[in] Index position of the subcontext bag on the parent context bag. This index is zero based.</param>
      <param name="ppSubCtx">[out, retval] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> interface, representing the subcontext bag.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.IsDirty(System.Int32@)">
      <summary>Determines whether the user context has changed in the context or subcontext bag.</summary>
      <param name="pfDirty">[out, retval] If <see langword="true" />, then the user context has changed. If <see langword="false" />, then the user context is unchanged.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAllSubcontext">
      <summary>Removes all subcontext bags associated with the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAttribute(System.String,System.String)">
      <summary>Removes an attribute or keyword from a context or subcontext bag.</summary>
      <param name="szName">[in] Name of attribute or keyword to be removed.</param>
      <param name="szValue">[in] Attribute value to remove.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveAttributeIncludeChildren(System.String,System.String)">
      <summary>Removes an attribute or keyword from the context bag and from any associated subcontext bags.</summary>
      <param name="szName">[in] Attribute name or keyword. If you are removing an attribute, then specify the name of the attribute. If you are removing a lookup keyword or an F1 keyword, then enter the term keyword.</param>
      <param name="szValue">[in] Attribute or keyword value. If you are removing an attribute, then specify the value of the attribute. If you are removing a lookup keyword or F1 keyword, then enter the actual text of the keyword.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.RemoveSubcontext(System.UInt32)">
      <summary>Removes the specified subcontext bag.</summary>
      <param name="dwCookie">[in] Pointer to a unique identifier for the subcontext bag. This is the value returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AddSubcontext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.Int32,System.UInt32@)" /> method when a subcontext bag is linked to the parent context bag.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.SetDirty(System.Int32)">
      <summary>Flags the context or subcontext bag for update.</summary>
      <param name="fDirty">[in] If <see langword="true" />, then clients are informed that the user context has changed. If <see langword="false" />, then clients are not informed that the user context has not changed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.UnadviseUpdate(System.UInt32)">
      <summary>Disables clients from receiving notification of updates to the user context.</summary>
      <param name="dwCookie">[in] Unique identifier for the referenced event sink. This is the same value returned by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.AdviseUpdate(Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate,System.UInt32@)" /> method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContext.Update">
      <summary>Updates user context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextCustomize.GetLimitKeywordSource(System.Int32@)">
      <summary>Gets the limits of how keywords are searched for context help.</summary>
      <param name="pLimKwdSrc">[out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE" /> enumeration that specifies the limits.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.Command(System.String@)">
      <summary>Outputs the F1 command's String value.</summary>
      <param name="pbstrCommand">[out] The String value of the F1 command.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.CountAttributes(System.String,System.Int32@)">
      <summary>Counts the attributes of the user-selected item in the shell.</summary>
      <param name="pszAttrName">[in] The string name of the attribute of the UserContextItem.</param>
      <param name="pc">[out] The number of attributes in the UserContextItem.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.GetAttribute(System.String,System.Int32,System.String[],System.String[])">
      <summary>Gets the attributes of the user-selected item in the shell.</summary>
      <param name="pszAttrName">[in] The name of the attribute of the selected item in the shell to search for.</param>
      <param name="index">[in] The integer entry point into the array of strings containing attributes.</param>
      <param name="pbstrName">[out] The string array of attributes that match the name of the attribute searched for.</param>
      <param name="pbstrValue">[out] The string array of values that correspond to the string array of attributes returned by the member when called.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem.Name(System.String@)">
      <summary>Returns the name of the UserContextItem selected by the user in the shell.</summary>
      <param name="pbstrName">[out] The name of the UserContextItem in the shell.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection._NewEnum(System.Object@)">
      <summary>Returns an enumerator to use for going through the collection.</summary>
      <param name="pEnum">[out] Pointer to the enumerator interface, <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.Count(System.Int32@)">
      <summary>Returns the number of items in the collection.</summary>
      <param name="pCount">[out] Pointer to an integer containing the number of items in the collection.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.Item(System.Object,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem@)">
      <summary>Retrieves an item from the collection according to a VARIANT index.</summary>
      <param name="index">[in] A variant. The index of the item to retrieve.</param>
      <param name="ppItem">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem" /> interface giving access to the item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection.ItemAt(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem@)">
      <summary>Retrieves an item from the collection by integer index.</summary>
      <param name="index">[in] Long integer. The index of the item.</param>
      <param name="ppItem">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItem" /> interface giving access to the item.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemEvents.OnUserContextItemsAvailable(Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection)">
      <summary>Method to call when there are context-sensitive Help items available.</summary>
      <param name="pList">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection" /> interface providing access to a collection of user context items.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.GetProperty(System.Int32,System.Object@)">
      <summary>Gets the specified project.</summary>
      <param name="Property">[in] The property.</param>
      <param name="Pvar">[out] The value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.KeywordLookup(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@,Microsoft.VisualStudio.Shell.Interop.IVsMonitorUserContext,System.Int32,System.Int32)">
      <summary>Looks up the specified keyword.</summary>
      <param name="pwzTargetAttr">[in]</param>
      <param name="pwzTargetAttrValue">[in]</param>
      <param name="Pplist">[out]</param>
      <param name="pCMUC">[in]</param>
      <param name="fCheckIdle">[in]</param>
      <param name="fContinueInterrupt">[in]</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.LookupEnabled(System.Int32@)">
      <summary>Determines whether lookup is enabled.</summary>
      <param name="pfLookupEnabled">[out] True if lookup is enabled, otherwise false.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.PackedAttributeLookup(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemCollection@)">
      <summary>Looks up attributes.</summary>
      <param name="pwzRequired">[in]</param>
      <param name="pwzScope">[in]</param>
      <param name="Pplist">[out] The list of attributes.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.SetProperty(System.Int32,System.Object)">
      <summary>Sets the specified property.</summary>
      <param name="Property">[in] The property.</param>
      <param name="Var">[in] The value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate.UpdateUserContext(Microsoft.VisualStudio.Shell.Interop.IVsUserContext,System.UInt32)">
      <summary>Sends notification that the context is being updated. This method also clears the dirty flag from the context bag.</summary>
      <param name="pCtx">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" /> interface (the context bag) to update.</param>
      <param name="dwCookie">[in] Parameter is not currently used.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.GetDocumentInfo(System.UInt32,System.Object@)">
      <summary>Gets information about the specified document.</summary>
      <param name="dwInfoIndex">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX" /> specifying document name, URL, type, etc. to be returned.</param>
      <param name="pvarInfo">[out] The requested info.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Navigate(System.UInt32,System.String)">
      <summary>Navigates to web with Visual Studio internal protocol URLs.</summary>
      <param name="dwFlags">[in] Flags specifying navigation options. Possible values are VSNWB_ForceNew, VSNWB_AddToMRU, VSNWB_VsURLOnly, and VSNWB_WebURLOnly.</param>
      <param name="lpszURL">[in] The URL to which to navigate.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.NavigateEx(System.UInt32,System.String,System.Object@,System.Object@,System.Object@)">
      <summary>Navigates to web with external protocol URLs.</summary>
      <param name="dwFlags">[in] Flags specifying navigation options. Possible values are VSNWB_ForceNew, VSNWB_AddToMRU, VSNWB_VsURLOnly, and VSNWB_WebURLOnly.</param>
      <param name="lpszURL">[in] The URL to which to navigate.</param>
      <param name="pvarTargetFrame">[in] The target frame.</param>
      <param name="pvarPostData">[in] The data to post.</param>
      <param name="pvarHeaders">[in] Headers.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Refresh(System.UInt32)">
      <summary>Refreshes the browser contents.</summary>
      <param name="dwRefreshType">[in] Specifies the type of refresh. Possible values are VSWBR_Normal, VSWBR_IfExpired, and VSWBR_Completely.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Stop">
      <summary>Stops the browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.Disconnect">
      <summary>Disconnects the web browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.FilterDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Modifies the specified data object with a filter.</summary>
      <param name="pDataObjIn">[in] The data object before modification.</param>
      <param name="ppDataObjOut">[out] The data object after modification.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCmdUIGuid(System.Guid@)">
      <summary>Gets the command UI GUID of this web browser user.</summary>
      <param name="pguidCmdUI">[out] Returns the command UI GUID.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomMenuInfo(System.Object,System.Object,System.UInt32,System.UInt32,System.Guid@,System.Int32@)">
      <summary>Gets information needed to customize a menu.</summary>
      <param name="pUnkCmdReserved">[in] Reserved <see langword="IUnknown" /> pointer.</param>
      <param name="pDispReserved">[in] Reserved <see langword="IDispatch" /> pointer.</param>
      <param name="dwType">[in] The type of the menu.</param>
      <param name="dwPosition">[in] The position of the menu.</param>
      <param name="pguidCmdGroup">[in] The command group GUID.</param>
      <param name="pdwMenuID">[in] The identifier of the menu.</param>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if user is implementing a custom menu. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if menus are suppressed altogether.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomURL(System.UInt32,System.String@)">
      <summary>Gets a custom URL for the specified page.</summary>
      <param name="nPage">[in] The page for which custom URL is desired.</param>
      <param name="pbstrURL">[out] The custom URL for the specified page.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetDropTarget(Microsoft.VisualStudio.OLE.Interop.IDropTarget,Microsoft.VisualStudio.OLE.Interop.IDropTarget@)">
      <summary>Gets an alternative drop target for the specified drop target.</summary>
      <param name="pDropTgtIn">[in] The drop target for which to get an alternative.</param>
      <param name="ppDropTgtOut">[out] The alternative for the specified drop target.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetExternalObject(System.Object@)">
      <summary>Gets the external object, if there is one.</summary>
      <param name="ppDispObject">[out] The external object.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> when user is replacing the external object, and <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />when user is suppressing the external object. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetOptionKeyPath(System.UInt32,System.String@)">
      <summary>Gets the registry key under which to save user preferences.</summary>
      <param name="dwReserved">[in] Reserved.</param>
      <param name="pbstrKey">[out] The registry key under which to save user preferences.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.Resize(System.Int32,System.Int32)">
      <summary>Resizes the browser frame to the specified x and y dimensions.</summary>
      <param name="cx">[in] The x dimension.</param>
      <param name="cy">[in] The y dimension.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.TranslateAccelarator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Translate the specified message.</summary>
      <param name="lpmsg">[in] The message to be translated.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.TranslateUrl(System.UInt32,System.String,System.String@)">
      <summary>Translate or modify the specified URL.</summary>
      <param name="dwReserved">[in] Reserved.</param>
      <param name="lpszURLIn">[in] The URL to be modified.</param>
      <param name="lppszURLOut">[out] The modified URL.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateExternalWebBrowser(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.String)">
      <summary>Create an instance of an external Web browser.</summary>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Constructed from values in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="dwResolution">[in] Display resolution. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION" /> enumeration.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL of the page to display.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowser(System.UInt32,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Create an instance of a Web browser within the Visual Studio user interface.</summary>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Created using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="rguidOwner">[in] The GUID of the owner of the window frame in which the browser appears.</param>
      <param name="lpszBaseCaption">[in] Pointer to a string containing the base (first part) of the caption for the browser window. Default is WebBrowser.</param>
      <param name="lpszStartURL">[in] Pointer to a string containing the URL of the page to display.</param>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser" /> interface to use in controlling the browser.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowserEx(System.UInt32,System.Guid@,System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Create an instance of a Web browser. Extension of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.CreateWebBrowser(System.UInt32,System.Guid@,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method.</summary>
      <param name="dwCreateFlags">[in] Bit flags specifying browser options. Created using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER" /> enumeration.</param>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="dwId">[in] Integer identifier for the window. Use 0 for next available.</param>
      <param name="lpszBaseCaption">[in] Pointer to a string containing the window caption. Use <see langword="null" /> for the default caption.</param>
      <param name="lpszStartURL">[in] Pointer to a string containing the URL of the page to display. Use <see langword="null" /> for the default, the Visual Studio home page.</param>
      <param name="pUser">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser" /> interface to use in controlling the browser. Should be <see langword="null" /> if you specify GUID_NULL for <paramref name="rguidPersistenceSlot" />.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser. May be <see langword="null" />.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser. May be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.GetFirstWebBrowser(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser@)">
      <summary>Get the first available Web browser.</summary>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="ppFrame">[out] Pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the browser.</param>
      <param name="ppBrowser">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser" /> interface of the browser. May be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.GetWebBrowserEnum(System.Guid@,Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames@)">
      <summary>Get an enumerator for the current Web browsers.</summary>
      <param name="rguidPersistenceSlot">[in] Pointer to the browser window GUID. A window must be registered in order to be saved and restored when Visual Studio starts up. Use GUID_NULL to use the default.</param>
      <param name="ppenum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumWindowFrames" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.Navigate(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Navigates to the specified URL.</summary>
      <param name="lpszURL">[in] String containing the URL to navigate to. You can navigate to sites using Web and Visual Studio internal protocols.</param>
      <param name="dwNaviageFlags">[in] Bit flags setting navigation options. Constructed using values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS" /> enumeration.</param>
      <param name="ppFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the browser window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebFavorites.AddFavorite(System.String,System.String,System.String,System.Int32,System.String[])">
      <summary>Add an item to the Favorites list.</summary>
      <param name="lpszURL">[in] Pointer to a string containing the URL to add.</param>
      <param name="lpszName">[in] Pointer to a string containing the default display name.</param>
      <param name="pszIconFileName">[in] Pointer to string containing the name of the file containing the icon to display next to the URL. May be <see langword="null" />.</param>
      <param name="iIconIndex">[in] Integer. The index of the icon within the file given in <paramref name="pszIconFileName" />.</param>
      <param name="pbstrFilename">[out] Pointer to the file containing the shortcut to the favorite. May be <see langword="null" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview">
      <summary>Activates the preview set by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)">
      <summary>Provides the information for the preview. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview" /> to display the preview.</summary>
      <param name="pAction">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction" /> interface providing callbacks for the preview process.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL to be previewed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)">
      <summary>Provides the information for the preview. Extension of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURL(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String)" />. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.ActivatePreview" /> to display the preview.</summary>
      <param name="pAction">[in] [in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction" /> interface providing callbacks for the preview process. May be <see langword="null" />.</param>
      <param name="lpszURL">[in] Pointer to a string containing the URL to be previewed.</param>
      <param name="opt">[in] Integer. Options for displaying the preview window. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS" /> enumeration.</param>
      <param name="cx">[in] Integer. Horizontal position of upper left corner of preview. Can be zero (0), the default.</param>
      <param name="cy">[in] Integer. Vertical position of upper left corner of preview. Can be zero (0), the default.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.Resize(System.Int32,System.Int32)">
      <summary>Resize the preview window.</summary>
      <param name="cx">[in] Integer. The new horizontal length of the preview window.</param>
      <param name="cy">[in] Integer. The new vertical length of the preview window.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewClose">
      <summary>Method called when the preview window closes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewLoaded(System.Object)">
      <summary>Method called when the preview window has loaded its document.</summary>
      <param name="pDispDocument">[in] Pointer to the <see langword="IDispatch" /> interface of the loaded document.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction.OnPreviewLoadStart">
      <summary>Method called when the preview window starts loading its document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU.AddURL(System.String)">
      <summary>Add a URL to the most recently used (MRU) list.</summary>
      <param name="bstrUrl">[in] Pointer to a string containing the URL to add.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebURLMRU.GetURLArray(System.Object@)">
      <summary>Retrieve the URLs in the most recently used (MRU) list.</summary>
      <param name="pvarURLs">[out] Pointer to a VARIANT containing an array of URLs.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.CloseFrame(System.UInt32)">
      <summary>Closes a window.</summary>
      <param name="grfSaveOptions">[in] Save options whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS[],System.Guid@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the position of the window.</summary>
      <param name="pdwSFP">[out] Pointer to the frame position to set. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS" /> enumeration.</param>
      <param name="pguidRelativeTo">[out] Not used (set to <see langword="null" />).</param>
      <param name="px">[out] Pointer to the absolute x ordinate.</param>
      <param name="py">[out] Pointer to the absolute y ordinate.</param>
      <param name="pcx">[out] Pointer to the x ordinate relative to <paramref name="px" />.</param>
      <param name="pcy">[out] Pointer to the y ordinate relative to <paramref name="py" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>Returns a window frame property based on a supplied GUID.</summary>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> enumeration.</param>
      <param name="pguid">[out] Pointer to the unique identifier of the property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetProperty(System.Int32,System.Object@)">
      <summary>Returns a window property.</summary>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> enumeration.</param>
      <param name="pvar">[out] Pointer to a VARIANT.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.Hide">
      <summary>Hides a window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.IsOnScreen(System.Int32@)">
      <summary>Returns <see langword="true" /> if the window frame is on the screen.</summary>
      <param name="pfOnScreen">[out] <see langword="true" /> if the window frame is visible on the screen.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.IsVisible">
      <summary>Determines whether or not the window is visible.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> if the window is visible, otherwise returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.QueryViewInterface(System.Guid@,System.IntPtr@)">
      <summary>Provides <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> with a view helper (VSFPROPID_ViewHelper) inserted into its list of event notifications.</summary>
      <param name="riid">[in] Identifier of the window frame being requested.</param>
      <param name="ppv">[out, iid_is(riid)] Address of pointer variable that receives the window frame pointer requested in <paramref name="riid" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetFramePos(Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position of the window.</summary>
      <param name="dwSFP">[in] Frame position whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSETFRAMEPOS" /> enumeration.</param>
      <param name="rguidRelativeTo">[in] Not used (set to <see langword="null" />).</param>
      <param name="x">[in] Absolute x ordinate.</param>
      <param name="y">[in] Absolute y ordinate.</param>
      <param name="cx">[in] x ordinate relative to <paramref name="x" />.</param>
      <param name="cy">[in] y ordinate relative to <paramref name="y" />.</param>
      <returns>If the method succeeds, it returns. <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>Sets a window frame property based on a supplied GUID.</summary>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />  enumeration.</param>
      <param name="rguid">[in] Unique identifier of the property to set.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.SetProperty(System.Int32,System.Object)">
      <summary>Sets a window frame property.</summary>
      <param name="propid">[in] Identifier of the property whose values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />  enumeration.</param>
      <param name="var">[in] The value depends on the property set (see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" /> ).</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.Show">
      <summary>Renders this window visible, brings the window to the top, and activates the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.ShowNoActivate">
      <summary>Shows or makes a window visible and brings it to the top, but does not make it the active window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnDockableChange(System.Int32)">
      <summary>Notifies the VSPackage that a window's docked state is being altered.</summary>
      <param name="fDockable">[in] <see langword="true" /> if the window frame is being docked.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnMove">
      <summary>Notifies the VSPackage that a window is being moved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnShow(System.Int32)">
      <summary>Notifies the VSPackage of a change in the window's display state.</summary>
      <param name="fShow">[in] Specifies the reason for the display state change. Value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify.OnSize">
      <summary>Notifies the VSPackage that a window is being resized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify2.OnClose(System.UInt32@)">
      <summary>Notifies the VSPackage that a window frame is closing and tells the environment what action to take.</summary>
      <param name="pgrfSaveOptions">[in, out] Specifies options for saving window content. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" /> enumeration.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.ClosePane">
      <summary>Closes a window pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.CreatePaneWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr@)">
      <summary>Creates a window pane.</summary>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="x">[in] Absolute x ordinate.</param>
      <param name="y">[in] Absolute y ordinate.</param>
      <param name="cx">[in] x ordinate relative to <paramref name="x" />.</param>
      <param name="cy">[in] y ordinate relative to <paramref name="y" />.</param>
      <param name="hwnd">[out] Pointer to a handle to the new window pane.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.GetDefaultSize(Microsoft.VisualStudio.OLE.Interop.SIZE[])">
      <summary>Returns the default size of a given window pane.</summary>
      <param name="pSize">[out] Pointer to the size of a given window pane.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.LoadViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Loads a view state.</summary>
      <param name="pStream">[in] Pointer to the <see langword="IStream" /> interface of the view state to load.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SaveViewState(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <summary>Saves a view state of a document window.</summary>
      <param name="pStream">[in] Pointer to the <see langword="IStream" /> interface of the view state to save.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes a new window pane.</summary>
      <param name="psp">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPane.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])">
      <summary>Handles the translation of special navigation keys.</summary>
      <param name="lpmsg">[in] Keyboard character or character combination to be handled.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommit.CommitPendingEdit(System.Int32@)">
      <summary>Allows a window to commit pending edits in a control with focus before another command is invoked.</summary>
      <param name="pfCommitFailed">[out] Indicates whether the commit failed. Set to <see langword="true" /> if the commit failed.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.GetGuidProperty(System.Int32,System.Guid@)">
      <summary>Retrieves the value of a GUID property.</summary>
      <param name="propid">[in] Integer. The property to retrieve. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="pguid">[out] Pointer to the GUID that is the value of the property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.GetProperty(System.Int32,System.Object@)">
      <summary>Retrieves the value of a property.</summary>
      <param name="propid">[in] Integer. The property to retrieve. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="pvar">[out] Pointer to a VARIANT containing the property's value.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.SetGuidProperty(System.Int32,System.Guid@)">
      <summary>Set the value of a GUID property.</summary>
      <param name="propid">[in] Integer. The property to set. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="rguid">[in] Reference to a GUID. The value to assign to the property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowView.SetProperty(System.Int32,System.Object)">
      <summary>Set the value of a property.</summary>
      <param name="propid">[in] Integer. The property to set. A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID" /> enumeration.</param>
      <param name="var">[in] A VARIANT containing the value to assign to the property.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetParamCount(System.Int32@)">
      <summary>Gets the number of parameters for a member.</summary>
      <param name="piParams">[out] Parameter count</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets description of a specified parameter.</summary>
      <param name="iParam">[in] Parameter location in signature</param>
      <param name="pbstrName">[out] Parameter name</param>
      <param name="pbstrText">[out] Description of parameter</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetRemarksText(System.String@)">
      <summary>Gets remarks about a member.</summary>
      <param name="pbstrRemarks">[out] Remarks describing a member.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetReturnsText(System.String@)">
      <summary>Gets a description of the return value.</summary>
      <param name="pbstrReturns">[out] Description of the return value of a method.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData.GetSummaryText(System.String@)">
      <summary>Gets summary text describing a member.</summary>
      <param name="pbstrSummary">[in] Summary text of describing a member.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.BuildMemberIndex">
      <summary>Creates or updates the XML file member index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberDataFromXML(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData@)">
      <summary>Returns an interface (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" />) that extracts and renders text from a given XML file.</summary>
      <param name="pszXML">[in] Pointer to a string containing the XML file name.</param>
      <param name="ppObj">[out] Pointer to an IVsXMLMemberData interface.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)">
      <summary>Retrieves the XML source corresponding to a given member. </summary>
      <param name="dwId">[in] Unsigned integer. A member identifier generated by the underlying parser. Obtain the identifier from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.ParseMemberSignature(System.String,System.UInt32@)" /> method.</param>
      <param name="pbstrXML">[out] Pointer to a string containing the XML source.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.ParseMemberSignature(System.String,System.UInt32@)">
      <summary>Parses a member signature into a unique member identifier. </summary>
      <param name="pszSignature">[in] A string containing a member signature.</param>
      <param name="pdwID">[out] Unsigned integer. A member identifier generated by the underlying parser. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)" />.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.CreateXMLMemberIndex(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex@)">
      <summary>Creates a member index object for the given metadata binary.  </summary>
      <param name="pszBinaryName">[in] Pointer to a string containing the fully qualified name of the metadata file.</param>
      <param name="ppIndex">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex" /> interface providing an index to the metadata.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndexService.GetMemberDataFromXML(System.String,Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData@)">
      <summary>Retrieves XML for a member based on a segment of XML.</summary>
      <param name="pszXML">[in] Pointer to a string containing the XML to look for. Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberIndex.GetMemberXML(System.UInt32,System.String@)" /> to obtain the XML.</param>
      <param name="ppObj">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" /> interface for the member data.</param>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.#ctor">
      <summary>Initializes a new instance of the VSPIAImporterClass class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.GetMainWrapperFilename(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the filename for a given type library.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the file name. </param>
      <returns>Returns <see langword="S_OK" /> if the method is successful, <see langword="E_FAIL" /> if the method fails.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.GetMainWrapperFriendlyName(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String@)">
      <summary>Gets the name that is displayed in the project system when the component is referred to.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type lib to be wrapped.</param>
      <param name="pbstrFilename">[out] Pointer to a string containing the friendly file name. </param>
      <returns>Returns <see langword="S_OK" /> if the method is successful, <see langword="E_FAIL" /> if the method fails.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.NeedsRegeneration(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.Int32,System.Int32,System.String,System.Int32@)">
      <summary>Determines whether a given wrapper for a given type library needs to be regenerated.</summary>
      <param name="pTypeLibToWrap">[in] Pointer to a type library to be wrapped.</param>
      <param name="wszKeyFile">[in] Specifies <paramref name="wszkey" /> file.</param>
      <param name="wszKeyContainerName">[in] Specifies <paramref name="wszkey" /> container name.</param>
      <param name="bDelaySign">[in] Boolean indicating whether delay signed. If <see langword="true" />, the assembly is partially signed.</param>
      <param name="bCurrentlyDelaySigned">[in] Boolean indicating whether currently delay signed.</param>
      <param name="wszExistingWrapperFilename">[in] Specifies the wrapper filename.</param>
      <param name="pbNeedsRegeneration">[out] <see langword="false" /> if the wrapper does not need to be regenerated. <see langword="true" /> if the wrapper needs to be regenerated.</param>
      <returns>Returns <see langword="S_OK" /> if the method is successful, <see langword="E_FAIL" /> if the method fails.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.VSPIAImporterClass.WrapTypeLibrary(Microsoft.VisualStudio.OLE.Interop.TLIBATTR[],System.String,System.String,System.String,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperCallback,System.IntPtr[],System.IntPtr[],System.IntPtr[],System.IntPtr[],System.UInt32@)">
      <summary>Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</summary>
      <param name="pTypeLibToWrap">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszDestinationDirectory">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszKeyFile">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="wszKeyContainer">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="bDelaySign">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="pCallback">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbstrWrapperPaths">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgWrappedTypeLibs">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbGenerated">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="rgbstrWrapperTools">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <param name="pcWrappedTypeLibs">Finds or encapsulates wrappers for the requested type library as well as any dependent type libraries.</param>
      <returns>Returns <see langword="S_OK" /> if the method is successful, <see langword="E_FAIL" /> if the method fails.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS">
      <summary>Editor Factory Notify flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ClonedFromTemplate">
      <summary>AddNewItem operation. File passed was cloned from a template file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAdded">
      <summary>AddItem operation. File passed was added as an existing file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAddedFromSaveAs">
      <summary>AddItem operation. File passed was added as a result of a Save As operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__EFNFLAGS.EFN_ItemAddedAsCopyOf">
      <summary>AddItem operation. File added as a "Copy of file" (copy/paste to same folder scenario).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS">
      <summary>The FCFONTFLAGS enumeration is used to specify font display properties that are not provided by the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" /> enumeration for a font used by a given Display Item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCFONTFLAGS.FCFF_TRACK_PLAINTEXT_BOLD">
      <summary>Specifies that the "bold" attribute of this Display Item is tracking (will be the same as) the "bold" attribute of the "plain text" item (see the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_PLAINTEXT" /> member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS" />).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS">
      <summary>The FCITEMFLAGS enumeration is used to specify non-display attributes for a font used by a given Display Item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ISMARKER">
      <summary>Specifies that the item is a marker type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWFGCHANGE">
      <summary>Enables the Foreground Color drop-down box that allows the user to change the foreground color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWBGCHANGE">
      <summary>Enables the Background Color drop-down box that allows the user to change the background color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWBOLDCHANGE">
      <summary>Enables the Bold checkbox that allows the user to change the bold attribute.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_ALLOWCUSTOMCOLORS">
      <summary>Enables the Custom buttons that allows the user to create and select customized colors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCITEMFLAGS.FCIF_PLAINTEXT">
      <summary>Indicates that the Display Items is to be treated as "plain text." This means that the color used to display the item will track the environment wide font and color settings for plain text color.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY">
      <summary>The FCPRIORITY enumeration is used to group categories within the list of categories provided by the Fonts and Colors page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_EDITOR">
      <summary>Specifies the base priority of Text Editor and Printer categories.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_ENVIRONMENT">
      <summary>Specifies the base priority of general environment categories, such as Dialogs and Tool Windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCPRIORITY.FCP_CLIENTS">
      <summary>Specifies the base priority for all other categories.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS">
      <summary>The FCSTORAGEFLAGS enumeration's values are used by a VSPackage managing fonts and color to indicate the mode used by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.OpenCategory(System.Guid@,System.UInt32)" /> to open a category's registry key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_READONLY">
      <summary>Registry will be opened for read only access. If this flag is omitted, when calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.OpenCategory(System.Guid@,System.UInt32)" /> to open a category without stored font and color information, the method will create entries of for the information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_LOADDEFAULTS">
      <summary>Settings that have not been saved to the registry are loaded directly from the VSPackage providing font and color defaults. If it is not set, only settings that have been changed from their defaults will be retrievable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_PROPAGATECHANGES">
      <summary>Registry updates will generate an event which can be handled by VSPackages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FCSTORAGEFLAGS.FCSF_NOAUTOCOLORS">
      <summary>Color values returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage.GetItem(System.String,Microsoft.VisualStudio.Shell.Interop.ColorableItemInfo[])" /> will be real RGB values. If a color had been specified as a COLORREF_AUTO value, it will now be converted to an RGB value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS">
      <summary>The FONTCOLORFLAGS enumeration is used to indicate to the Visual Studio Environment how to handle the changes made through the Fonts and Colors properties page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_MUSTRESTART">
      <summary>Instructs Visual Studio to warn that the IDE must be restarted for changes to take effect.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_ONLYTTFONTS">
      <summary>Restricted the Font dropdown box of the Fonts and Colors property page to presenting TrueType fonts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_SAVEALL">
      <summary>If set the Visual Studio environment will save all customizable Display Item attributes if even on has been modified (normally, only attributes that have changed from their defaults are saved).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_ONLYNEWINSTANCES">
      <summary>Generates a warning that changes will take effect only for new of the UI component.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FONTCOLORFLAGS.FCF_AUTOFONT">
      <summary>Instructs the Fonts and Colors page to display an item called Automatic in the Fontdropdown box which corresponds to the current "icon" system font setting in Windows. Automatic will be the default setting for the category.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE">
      <summary>Specifies close options when closing a window frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_NoSave">
      <summary>Do not save the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_SaveIfDirty">
      <summary>Save the document if it is dirty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE.FRAMECLOSE_PromptSave">
      <summary>Prompt for document save.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW">
      <summary>Specifies the state of a window frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_Hidden">
      <summary>Obsolete; use WinHidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinHidden">
      <summary>Window (tabbed or otherwise) is hidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinShown">
      <summary>A nontabbed window is made visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_TabActivated">
      <summary>A tabbed window is activated (made visible).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_TabDeactivated">
      <summary>A tabbed window is deactivated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinRestored">
      <summary>Window is restored to normal state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinMinimized">
      <summary>Window is minimized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinMaximized">
      <summary>Window is maximized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_WinClosed">
      <summary>Window is closed and persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_DestroyMultInst">
      <summary>Multi-instance tool window destroyed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW.FRAMESHOW_AutoHideSlideBegin">
      <summary>Autohidden window is about to slide into view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID">
      <summary>Specifies Special Project Files that can be created or queried for with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_LAST">
      <summary>Indicates the last PSFFIELDID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_AppConfig">
      <summary>Get AppConfig files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_Licenses">
      <summary>Get Licenses.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFILEID.PSFFILEID_FIRST">
      <summary>Indicates the first PSFFIELDID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS">
      <summary>Specifies how <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectSpecialFiles.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)" /> is to handle Project Special Files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS.PSFF_CreateIfNotExist">
      <summary>Create the file if it doesn't exist.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__PSFFLAGS.PSFF_FullPath">
      <summary>Filename includes the full path.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS">
      <summary>Specifies toolbox item options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_DELETEBITMAP">
      <summary>Toolbox deletes bitmap.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_DONTPERSIST">
      <summary>Item is not persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_CANTREMOVE">
      <summary>User cannot remove item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__TBXITEMINFOFLAGS.TBXIF_IMAGEINDEX">
      <summary>The two elements <paramref name="iImageIndex" /> and <paramref name="iImageWidth" />, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" /> structure, are valid.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS">
      <summary>Controls characteristics of a UI hierarchy window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_ActAsProjectTypeWin">
      <summary>Determines whether the UI hierarchy window tracks the environment's selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_DoNotSortRootNodes">
      <summary>Default is alpha sort on caption enabled toolbars in UIHierarchyWindow tool window. Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost" /> to access the window's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars">
      <summary>To control features pertaining to a tool window's toolbar, call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame.GetProperty(System.Int32,System.Object@)" /> and specify a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost" />. This allows you to access the tool window's <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolWindowToolbarHost" /> implementation and add a toolbar. This approach is only valid if the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> method is called and a value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars" /> is specified for the <paramref name="grfUIHWF" /> parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_ForceSingleSelect">
      <summary>Forces selection of a single node in a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_InitWithHiddenRootHierarchy">
      <summary>Indicates that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer passed in with the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> is actually a special hidden root hierarchy</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_UseSolutionAsHiddenRootHierarchy">
      <summary>Indicates that the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> pointer passed in with the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" /> is actually a special hidden root hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_LinesAtRoot">
      <summary>Style set on the tree view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SortChildNodes">
      <summary>Specifies whether non-root nodes in your hierarchy window should be sorted, or left in the order in which the hierarchy enumerates them to the hierarchy window (<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstChild" /> and <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextSibling" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_NoStateIcon">
      <summary>Specifies whether your hierarchy window shows state icons. A treeview can have two icon channels, of which the state icon is the leftmost icon channel. For example, in the project window the state icon may show the source control in/out state of the item, while the normal icon shows the normal glyph for that type of file. If do not want your hierarchy window to show any state icons, then specify this flag in a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_InitWithHiddenParentRoot">
      <summary>Creates a hidden root hierarchy that is the parent of your top-level nodes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_PropagateAltHierarchyItem">
      <summary>If specified, when <see cref="T:EnvDTE.UIHierarchy" /> selects a node, <see cref="T:EnvDTE.UIHierarchy" /> creates alternate hierarchies.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_RouteCmdidDelete">
      <summary>Controls the handling of the delete command within the hierarchy window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_HandlesCmdsAsActiveHierarchy">
      <summary>This is for windows that handle commands when they are the active hierarchy even if their hierarchy doesn't have focus (like Project/Add Item).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS">
      <summary>Sets selection behavior in the hierarchy window when a new hierarchy is added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS.ADDHIEROPT_DontSelectNewHierarchy">
      <summary>Adds the new hierarchy without changing the current selection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS">
      <summary>Controls the characteristics of items added to a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowMultiSelect">
      <summary>Allows multiple selections in the existing tab. This flag is included for future expansion and not yet implemented. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_HideNameField">
      <summary>Disables the item name field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_SuggestTemplateName">
      <summary>Suggests template name for item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowLocationField">
      <summary>Shows the location field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowDontShowAgain">
      <summary>Shows the Don't show again check box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowStickyFilter">
      <summary>Allows <paramref name="pbstrFilter" />[out] parameter to be returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AddNewItems">
      <summary>Uses the Add New Item dialog box (mutually exclusive with VSADDITEM_AddExistingItems).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AddExistingItems">
      <summary>Uses the Add Existing Item dialog box (mutually exclusive with VSADDITEM_AddNewItems).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ProjectHandlesLinks">
      <summary>Project adds items as links—enables Link menu item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_NewDirectoryForItem">
      <summary>Item is placed in new directory (location field tracks name field).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowHiddenTreeView">
      <summary>Allows tree view to be hidden if only one template node is present.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_NoOpenButtonDropDown">
      <summary>Doesn't show drop-down menu under Open button on dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowSingleTreeRoot">
      <summary>Allows the tree view to have only one root node (default is to use subnodes).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ExpandSingleTreeRoot">
      <summary>Asks the tree view to expand a single root node (default is to not expand it).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_ShowProjectTypesOnly">
      <summary>Shows only project types in the dialog box; does not show items associated with projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDITEMFLAGS.VSADDITEM_AllowOnlyFileSysLocs">
      <summary>Allows only local file system locations in the Add Existing Item dialog. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS">
      <summary>Determines whether to add a new virtual project to the Project window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_AddToProjectWindow">
      <summary>Add the virtual project to the Solution Explorer window hierarchy. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromBuild">
      <summary>Exclude the virtual project from the build. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromDebugLaunch">
      <summary>Exclude the virtual project from debugging. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromDeploy">
      <summary>Exclude the virtual project from deployment of the project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromSCC">
      <summary>Exclude items within the virtual project from source code control. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromEnumOutputs">
      <summary>Exclude the virtual project from enumeration output groups. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSADDVPFLAGS.ADDVP_ExcludeFromCfgUI">
      <summary>Exclude the virtual project from the configuration UI. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS">
      <summary>Sets a viewer to be one of the system defaults.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS.ASP_MakeDefault">
      <summary>Make this viewer a default. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSASPFLAGS.ASP_UnsetOldDefaults">
      <summary>Unset all other default viewers. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS">
      <summary>Provides settings for project configurations. Currently, these flags are unused.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS.CFGFLAG_CfgsAreNotBrowsable">
      <summary>This flag is currently unused. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGFLAGS.CFGFLAG_CfgsUseIndependentPages">
      <summary>This flag is currently unused. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID">
      <summary>Identifies configuration properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_LAST">
      <summary>Indicates the last VSCFGPROPID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_Reserved1">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_Reserved2">
      <summary>Reserved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgAdd">
      <summary>If <see langword="true" />, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfCfgName(System.String,System.String,System.Int32)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgDelete">
      <summary>If <see langword="true" />, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfCfgName(System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsCfgRename">
      <summary>If <see langword="true" />, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.RenameCfgsOfCfgName(System.String,System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPlatformAdd">
      <summary>If <see langword="true" />, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.AddCfgsOfPlatformName(System.String,System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPlatformDelete">
      <summary>If <see langword="true" />, indicates that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider2.DeleteCfgsOfPlatformName(System.String)" /> can be called on this object. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_SupportsPrivateCfgs">
      <summary>Reserved. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_IntrinsicExtenderCATID">
      <summary>Establishes the basis for automation extenders to make the configuration automation assignment extensible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCFGPROPID.VSCFGPROPID_FIRST">
      <summary>Indicates the first VSCFGPROPID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS">
      <summary>Controls whether the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow.FindCommonSelectedHierarchy(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@)" /> can return the solution as the common hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS.COMHIEROPT_RootHierarchyOnly">
      <summary>Return project nodes only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS.COMHIEROPT_AllowHiddenRoot">
      <summary>Okay to return Solution node hierarchy.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS">
      <summary>Specifies attributes for an AddReference dialog box that the user can use to add components to the specified project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_MultiSelectMode">
      <summary>Allows selection of multiple components.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_ShowOnlySpecifiedTab">
      <summary>Shows only the tab specified by <paramref name="rguidShowOnlyThisTab" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideCOMPlusTab">
      <summary>Doesn't show the COM+ tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideCOMClassicTab">
      <summary>Doesn't show the COM Classic tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideSolutionTab">
      <summary>Doesn't show the Solution tab provided by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_HideBrowseButton">
      <summary>Doesn't show the Browse button on the dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCOMPSELFLAGS.VSCOMSEL_IgnoreMachineName">
      <summary>Doesn't use <paramref name="lpszMachineName" />—enumerates local machine.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN">
      <summary>Controls how a new document window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_RDTFLAGS_MASK">
      <summary>Mask for running document table flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fDockable">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fAltDocData">
      <summary>Used for editing sub-pieces of a larger document in individual document windows. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fCreateNewWindow">
      <summary>Allows an additional window to be created for Window.NewWindow support.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS">
      <summary>Controls how a new editor is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_CLONEFILE">
      <summary>Mutually exclusive with<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENFILE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENFILE">
      <summary>Mutually exclusive with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_CLONEFILE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_SILENT">
      <summary>Editor factory should create editor silently.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEEDITORFLAGS.CEF_OPENASNEW">
      <summary>Editor factory should perform necessary fixups.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS">
      <summary>Controls how a project is created or opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_CLONEFILE">
      <summary>Create a new project based on an existing project template already on disk.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OPENFILE">
      <summary>Project already exists on disk. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OPENDIRECTORY">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_SILENT">
      <summary>Use when you do not want to report any failure, as in the case of automation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_OVERWRITE">
      <summary>If there is a project of the same name on disk already, then overwrite this project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_NOTINSLNEXPLR">
      <summary>Project is not shown as a normal project in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS.CPF_NONLOCALSTORE">
      <summary>Project uses nonlocal storage and different save mechanism.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS">
      <summary>Controls how a new solution is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_SILENT">
      <summary>Creates the solution silently; does not query the user at all.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_OVERWRITE">
      <summary>Overwrites existing solution if one exists with the specified name at the specified location.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_TEMPORARY">
      <summary>Creates a temporary solution—solution items cannot be added until it is saved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATESOLUTIONFLAGS.CSF_DELAYNOTIFY">
      <summary>Delays OnAfterOpenSolution notification until after creation of first project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN">
      <summary>Controls how a new tool window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_RESERVED_MASK">
      <summary>Reserved bits.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fInitNew">
      <summary>Initialize a new tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fActivateWithProject">
      <summary>Activate tool window when a project is opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fActivateWithDocument">
      <summary>Activate tool window when a document is opened. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fForceCreate">
      <summary>Tool window is created at Visual Studio startup.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fHasBorder">
      <summary>Tool window has a border.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fMultiInstance">
      <summary>Tool window can be created multiple times. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fToolbarHost">
      <summary>Tool window can host a toolbar. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER">
      <summary>Specifies flags for creating a Web browser with the methods of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AutoShow">
      <summary> Show the browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AddToMRU">
      <summary>Add to most recently used list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_ReuseExisting">
      <summary>Reuse an existing browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_ForceNew">
      <summary>Force create.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameMdiChild">
      <summary>Default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameFloat">
      <summary>Float the now browser frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_FrameDock">
      <summary>Dock the new browser frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartHome">
      <summary>Open the browser at the home page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartSearch">
      <summary>Open the browser at the search page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartCustom">
      <summary>Open the browser at a custom page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoHistory">
      <summary>Do not keep browse history. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoReadCache">
      <summary>Do not cache read pages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NoWriteToCache">
      <summary>Do not write to the cache.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_AllowAutosearch">
      <summary>Enable autosearch in browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionNoDocProps">
      <summary>Disable document properties options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionShowDocProps">
      <summary> Show document properties options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionCustomDocProps">
      <summary>Use custom document properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableFind">
      <summary>Disable the Find menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableDockable">
      <summary> Do not enable browser to be dockable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionDisableStatusBar">
      <summary>Disable the Status bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_StartURLMask">
      <summary>Lets start URLs conform to a mask.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_NavOptionMask">
      <summary>Hide specified navigation controls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEWEBBROWSER.VSCWB_OptionsMask">
      <summary>Use Options mask.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS">
      <summary>Specifies flags that control how the debugger is started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_Silent">
      <summary>Start the debugger without prompting the user</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_LocalDeploy">
      <summary>Passed to M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)   to allow optimizations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_NoDebug">
      <summary>Launches without attaching a debugger.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_DetachOnStop">
      <summary>Detaches instead of terminating when debugging stopped.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_Selected">
      <summary>Launches selected project instead of startup project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_StopDebuggingOnEnd">
      <summary>When this process ends, debugging is stopped.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDBGLAUNCHFLAGS.DBGLAUNCH_WaitForAttachComplete">
      <summary>When <see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_LaunchByWebServer" />, waits for the attachment to finish before continuing to launch other targets.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION">
      <summary>Specifies how an item is deleted from a hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_DeleteFromStorage">
      <summary>Physically deletes item. This is valid if <paramref name="itemid" /> parameter is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION.DELITEMOP_RemoveFromProject">
      <summary>Does not physically delete item. This is invalid if <paramref name="itemid" /> parameter is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS">
      <summary>VSDIR flags for items and projects to indicate desired AddProject/AddItem dialog state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_NonLocalTemplate">
      <summary>Uses "nonlocal" UI behavior and saves mechanisms.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_BlankSolution">
      <summary>Creates a "blank" (empty) solution—doesn't create a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableBrowseButton">
      <summary>Disables the Browse button for this project/item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DontAddDefExtension">
      <summary>Doesn't append a default extension to the name provided for the item (invalid for project).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableLocationField">
      <summary>Disables the location field for this project/item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DontInitNameField">
      <summary>Doesn't initialize the name field for this project/item with a valid name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDIRFLAGS.VSDIRFLAG_DisableNameField">
      <summary>Disables the name field for this project/item.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT">
      <summary>Determines whether a document is part of a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocNotInProject">
      <summary>Document is not in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocInProject">
      <summary>Document is in the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDOCINPROJECT.DOCINPROJ_DocInExtFilesProject">
      <summary>Document resides as a file external to the project. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT">
      <summary>Specifies the deployment services in a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_WEB">
      <summary> Web deployment project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_SERVER">
      <summary> Server deployment project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSDPLSVCSINPROJECT.VSDPLSVCSINPROJECT_MTS">
      <summary>Microsoft Transaction Server (MTS) deployment project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN">
      <summary>Controls how an editor document window is created.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN.ECDW_UserCanceled">
      <summary>User has canceled CreateEditorInstance operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEDITORCREATEDOCWIN.ECDW_CDWFLAGS_MASK">
      <summary>Legal values taken from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSEHI">
      <summary>Specifies Enum Hierarchy Items to return via <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumHierarchyItems" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Leaf">
      <summary>Returns leaf nodes (nonexpandable).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Branch">
      <summary>Returns branch nodes (expandable).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_Nest">
      <summary>Visits nested hierarchies.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_AllowSideEffects">
      <summary>Recurse into nodes that return true for <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HasEnumerationSideEffects" /> (requires VSEHI_NEST) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_DataConn">
      <summary>Obsolete. Use VSEHI_AllowSideEffects instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSEHI.VSEHI_OmitHier">
      <summary>Doesn't fill <paramref name="pHier" /> member of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> (incompatible with VSEHI_Nest).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS">
      <summary>Specifies which projects to enumerate within a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_LOADEDINSOLUTION">
      <summary>Normal projects referenced in the solution file and currently loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_UNLOADEDINSOLUTION">
      <summary>Normal projects referenced in the solution file and currently not loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLINSOLUTION">
      <summary>All normal projects referenced in the solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_MATCHTYPE">
      <summary>All normal projects referenced in the solution file projects with project type GUID matching parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_VIRTUALVISIBLEPROJECT">
      <summary>"Virtual" projects are visible as top-level projects in Solution Explorer.  </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_VIRTUALNONVISIBLEPROJECT">
      <summary>"Virtual" projects are not visible as top-level projects in Solution Explorer. NOTE: these are projects that are not directly referenced in the solution file and are usually displayed as nested (a.k.a. sub) projects in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLVIRTUAL">
      <summary>All 'virtual' projects of any kind.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSENUMPROJFLAGS.EPF_ALLPROJECTS">
      <summary>All projects including normal projects directly referenced in the solution file as well as all virtual projects including nested (a.k.a. sub) projects.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN">
      <summary>Finds a tool window within the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fForceCreate">
      <summary>Forces a tool window to be created. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fFindFirst">
      <summary>Finds first <paramref name="multiinst" /> tool window (ignores <paramref name="dwToolWinId" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFINDTOOLWIN.FTW_fFrameOnly">
      <summary>Gets the frame; no affect if there's an object behind it.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID">
      <summary>Specifies property identifiers for window frames, document frames, and tool window frames.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_NIL">
      <summary>NIL. -1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_LAST">
      <summary>Indicates the last <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Type">
      <summary>I4. Frame type - document or tool. For all frame windows, 1== Document Frame, 2 == Tool Frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocView">
      <summary>UNK. Object that fills the client area of the window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_SPFrame">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> which is site object for <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocView" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_SPProjContext">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> provided by the owning <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Caption">
      <summary>BSTR. Full window caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowState">
      <summary>I4. Normal, Minimized, or Maximized</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_FrameMode">
      <summary>I4. Docked, float, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_IsWindowTabbed">
      <summary>I2. Tabbed state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_UserContext">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ViewHelper">
      <summary>UNK. Additional interfaces for control (for all frame windows).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ShortCaption">
      <summary>BSTR. Partial window caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowHelpKeyword">
      <summary>BSTR. Keyword for <paramref name="cmdidWindowHelp." /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_WindowHelpCmdText">
      <summary>BSTR. Command text for <paramref name="cmdidWindowHelp." /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocCookie">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable" /> (RDT) key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_OwnerCaption">
      <summary>BSTR. Portion of caption defined by owning <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_EditorCaption">
      <summary>BSTR. Portion of caption that is defined by editor implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_pszMkDocument">
      <summary>BSTR. <paramref name="pszMkDocument" /> passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_DocData">
      <summary>UNK. Returns <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> if available. Otherwise, returns RDTDocData. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_Hierarchy">
      <summary>UNK. Owns <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ItemID">
      <summary>I4. VSITEMID of document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CmdUIGuid">
      <summary>GUID used to control visibility of toolbars and AutoVisible tool windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CreateDocWinFlags">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> flags passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateDocumentWindow(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,System.IntPtr,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_guidEditorType">
      <summary>GUID. Uniquely identifies which <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> created the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_pszPhysicalView">
      <summary>BSTR. Identifies the type of window created by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEditorFactory" /> (for example "Form").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_InheritKeyBindings">
      <summary>GUID. Most often used by a window to inherit the key bindings of the <see cref="T:EnvDTE.TextEditor" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_RDTDocData">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> registered in the RDT for the document in this frame.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData">
      <summary>UNK. If this window edits a piece of a larger document, then <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> is the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for the piece of the document that is being edited in the window, whereas the <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_RDTDocData" /> is the <see cref="T:Microsoft.VisualStudio.Shell.Design.Serialization.DocData" /> object for all of the document registered in the RDT. <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> objects are not registered in the RDT. Document Windows that have <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_AltDocData" /> objects are created by using <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN.CDW_fAltDocData" /> flag. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_GuidPersistenceSlot">
      <summary>GUID. Uniquely identifies a tool window type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_GuidAutoActivate">
      <summary>OBSOLETE. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_CreateToolWinFlags">
      <summary>
          <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN" /> flags passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell.CreateToolWindow(System.UInt32,System.UInt32,System.Object,System.Guid@,System.Guid@,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.String,System.Int32[],Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ExtWindowObject">
      <summary>UNK. Environment's "Window" automation IDispatch object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_MultiInstanceToolNum">
      <summary>I4. ID of a multi-instance tool window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_BitmapResource">
      <summary>I4. Resource number of bitmaps in satellite dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_BitmapIndex">
      <summary>I4. Index into strip if bitmap handle is a strip.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_ToolbarHost">
      <summary>UNK. IVsToolbarHost used to add toolbars to window. Property is only valid if <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSCREATETOOLWIN.CTW_fToolbarHost" /> or <see cref="F:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS.UIHWF_SupportToolWindowToolbars" /> is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_HideToolwinContainer">
      <summary>I2. Makes the tool window's container hidden when and saves the data file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSFPROPID.VSFPROPID_FIRST">
      <summary>Indicates the first property ID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS">
      <summary>Denotes that user specified files will not be loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSGETPROJFILESFLAGS.GPFF_SKIPUNLOADEDPROJECTS">
      <summary>Skips the projects that will not be loaded (by user preference).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS">
      <summary>Provides information about selection items and the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSGSIFLAGS.GSI_fOmitHierPtrs">
      <summary>Indicates that the <paramref name="pHier" /> field of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION" /> structure should not be filled in (and therefore not AddRef()'d). This is useful in a case where a selection is within one hierarchy, as this value does not need to be filled. The <paramref name="pHier" /> was already obtained through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.GetCurrentSelection(System.IntPtr@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@,System.IntPtr@)" /> or through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSelectionEvents.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)" />.  </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE">
      <summary>Controls the display state or appearance of a hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_FIRST">
      <summary>First item in the hierarchy. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Selected">
      <summary>Hierarchy item is selected. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_CutHighlight">
      <summary>Hierarchy item has cut highlighting, which is a dim, grayed out appearance indicating a pending cut operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Bold">
      <summary>Hierarchy item is bold. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_Expanded">
      <summary>Folder node is expanded. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE.HIS_LAST">
      <summary>Last item in the hierarchy. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID">
      <summary>Specifies property settings for a hierarchy. Extended by <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID2" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NIL">
      <summary>NIL. -1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_LAST">
      <summary>INT_PTR. Specifies the last property ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Parent">
      <summary>I4. <see langword="Itemid" /> of the parent node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no parent.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstChild">
      <summary>
          <see langword="Itemid" /> of first child node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no children.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextSibling">
      <summary>INT_PTR. <see langword="Itemid" /> of next sibling node. (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> if no more siblings.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Root">
      <summary>[obsolete] <see langword="Itemid" /> of Root must be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeGuid">
      <summary>GUID to identify the type of node/hierarchy; searches on GUID_ItemType.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SaveName">
      <summary>BSTR. File name specified on the FileSave menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Caption">
      <summary>BSTR. Required so the the environment (project window) can display UI.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconImgList">
      <summary>I4. Handle to an imagelist. (Only for <see langword="itemid==" /><see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconIndex">
      <summary>I4. If Expandable=<see langword="true" />, then IconIndex+1 is used for the open icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Expandable">
      <summary>BOOL. Specifies whether the environment should display the "open-this-folder" plus sign.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExpandByDefault">
      <summary>BOOL. Specifies whether the environment should expand this item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectName">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Name" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Name">
      <summary>BSTR. Name for project (<see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />) or item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IconHandle">
      <summary>I4. Handle to an icon; UIHierarchyWindow will not call DestroyIcon on it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OpenFolderIconHandle">
      <summary>I4. [optional] Handle of an icon for an open folder. UIHierarchyWindow will not call DestroyIcon on it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OpenFolderIconIndex">
      <summary>I4. [optional] Index for OpenFolder icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_CmdUIGuid">
      <summary>GUID for command bars (for root only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SelContainer">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.ISelectionContainer" /> for use with property browsing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_BrowseObject">
      <summary>DISP. [optional] Returns an IDispatch for property browsing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AltHierarchy">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AltItemid">
      <summary>I4. [optional] Returns an <see langword="itemid" /> for <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsTrackSelectionEx" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectDir">
      <summary>BSTR. [optional] Full path of the project directory (for <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_SortPriority">
      <summary>I4. [optional] Sort priority in UIHierarchyWindow. By default, standard projects have priority zero.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_UserContext">
      <summary>UNK. [optional] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" /> for the project or item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_EditLabel">
      <summary>BSTR. [optional] String displayed for the in-place editing node caption.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExtObject">
      <summary>DISP. [optional] For ITEMID_ROOT, this is the ext.object of the project (Project).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ExtSelectedItem">
      <summary>DISP. [optional] Returns a custom <see cref="T:EnvDTE.SelectedItem" /> object for the given <see langword="itemid" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StateIconIndex">
      <summary>I4. State icon index. Use <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectType">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeName" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_TypeName">
      <summary>BSTR. Displays a name to identify the type of node/hierarchy. (Used in the title bar.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ReloadableProjectFile">
      <summary>[obsolete] Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HandlesOwnReload" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HandlesOwnReload">
      <summary>BOOL. [optional] Project handles unload/reload itself. (Otherwise, the environment handles it.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ParentHierarchy">
      <summary>UNK. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> that owns this hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ParentHierarchyItemid">
      <summary>INT_PTR. The <see langword="itemid" /> of this hierarchy in its parent hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ItemDocCookie">
      <summary>INT_PTR. [optional] The document cookie (an abstract value) of the hierarchy item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_Expanded">
      <summary>BOOL. Specifies whether the node is currently expanded in the UIHierarchyWindow. Starts as <see langword="false" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ConfigurationProvider">
      <summary>OBSOLETE. Use <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGetCfgProvider" /> instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ImplantHierarchy">
      <summary>UNK. [optional] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> implant for this hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OwnerKey">
      <summary>BSTR. [optional] Owner key string that identifies the GUID of the owning project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StartupServices">
      <summary>UNK. [optional] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProjectStartupServices" />* to add services to be started on next project load (for <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> only).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FirstVisibleChild">
      <summary>INT_PTR. [optional] Similar to FirstChild but only walks items to be displayed in UIHierarchyWindow. Required if the hierarchy supports multiple (subsetted or supersetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_NextVisibleSibling">
      <summary>INT_PTR. [optional] Similar to NextSibling but only walks items to be displayed in UIHierarchyWindow. Required if the hierarchy supports multiple (subsetted or supersetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsHiddenItem">
      <summary>BOOL. [optional] Specifies that an item is not displayed in current UIHierarchyWindow view. Required if the hierarchy supports multiple (subsetted) views of its contents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonMemberItem">
      <summary>BOOL. [optional] Specifies that the item is not considered a member of the hierarchy. Required if the hierarchy supports (supersetted) views of its contents—that is, if ShowAllFiles displays files in directories that are not members of the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonLocalStorage">
      <summary>BOOL. [optional] Specifies whether project storage is local. <see cref="T:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat" /> is used for saving the project whether it is a local "file" or not.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_StorageType">
      <summary>BSTR. [optional] Non-localize string that represents storage type. Same as the string that's used in the VSDIR file to differentiate between different location MRU lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ItemSubType">
      <summary>BSTR. [optional] Non-localize string that represents the subtype of the item. It is up to each package to agree on the meaning of this string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_OverlayIconIndex">
      <summary>I4. [optional] Use the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOVERLAYICON" /> enumeration. Overlay for the item's main icon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultNamespace">
      <summary>BSTR. [optional] String that represents the item's folder-based namespace: rootnamespace.folder.subfolder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNonSearchable">
      <summary>BOOL. [optional] Specifies that the item is not subject to search-and-replace through Find/Replace in Files. Should be <see langword="true" /> for the project file itself and for project references.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsFindInFilesForegroundOnly">
      <summary>BOOL. [optional] If <see langword="true" />, FindInFiles runs in the main thread.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_CanBuildFromMemory">
      <summary>BOOL. [optional] If <see langword="true" />, do not prompt to save before building.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_PreferredLanguageSID">
      <summary>GUID. [optional] Preferred SID of the (text editor) language service for the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ShowProjInSolutionPage">
      <summary>BOOL. [optional] Used to filter the project when Visual Basic or C# calls the component picker for add-reference. Returns VARIANT_TRUE to show that the project is in the list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_AllowEditInRunMode">
      <summary>BOOL. [optional] If this is <see langword="false" /> or <see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" />, the compiler disables modifications during run mode. (This is the most common expected behavior.) <see langword="true" /> enables edits.  This property enables VSA scenarios.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_IsNewUnsavedItem">
      <summary>BOOL. [optional] If <see langword="true" />, this is a new, unsaved item (as obtained from File.New.File) and therefore, the moniker is a temporary name and the caption should be used in the UI instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ShowOnlyItemCaption">
      <summary>BOOL. [optional] If <see langword="true" />, only the caption is shown in the UI instead of the full moniker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_ProjectIDGuid">
      <summary>GUID. [optional] Identifies a project across solutions. Generated and set when the project is created. Retrieved when the project is opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DesignerVariableNaming">
      <summary>I4. [optional] Value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_VARIABLENAMING" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DesignerFunctionVisibility">
      <summary>I4. [optional] Value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSDESIGNER_FUNCTIONVISIBILITY" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_HasEnumerationSideEffects">
      <summary>BOOL. [optional] If <see langword="true" />, then this hierarchy is not enumerated for FindInFiles and similar hierarchy enumerations. (Useful if enumerating is unacceptably slow or could cause a login dialog box to appear.)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultEnableBuildProjectCfg">
      <summary>BOOL. [optional] By default, specifies whether "Build" should be initially selected in the solution cfg. Typically, "Build" is selected if the project supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_DefaultEnableDeployProjectCfg">
      <summary>BOOL. [optional] By default, specifies whether "Deploy" should be initially selected in the solution cfg. Typically, "Deploy" is selected by if the project supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDeployableProjectCfg" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID.VSHPROPID_FIRST">
      <summary>INT_PTR. Specifies the first property ID.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS">
      <summary>Controls what action or actions to perform on an open document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_ActivateIfOpen">
      <summary>Prompts if owned by different <paramref name="pHier" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIDOFLAGS.IDO_IgnoreLogicalView">
      <summary>Ignore if in the logical view. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS">
      <summary>Controls the initialization of an editor instance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_RDTFLAGS_MASK">
      <summary>Masks Running Document Table flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_CREATEDOCWIN_MASK">
      <summary>Masks RDT flags and Create Doc Window flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_CREATENEWDOCWIN_MASK">
      <summary>Masks RDT flags and Create New Doc Window flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSIEIFLAGS.IEI_DoNotLoadDocData">
      <summary>Do not load document data into this editor instance. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS">
      <summary>Specifies initialization parameters for an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsLiteTree" /> object.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS.LT_ALLOWMULTISELECT">
      <summary>Multi-item selection is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLITETREEOPTS.LT_ALLOWEDITLABELS">
      <summary>Label editing is allowed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS">
      <summary>Determines whether an OPT file being loaded is associated with a Visual Studio .dsw file or an .sln file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSLOADUSEROPTS.LUO_OPENEDDSW">
      <summary>Loads MSDev .DSW file as a solution.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT">
      <summary>Specifies initialization parameters for the Menu Editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_ACCELSUPPORT">
      <summary>Supports Accl.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_VISIBLESUPPORT">
      <summary>Supports visible controls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BOLDSUPPORT">
      <summary>Supports bold formatting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_CONTEXTMENU">
      <summary>Supports a context menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_RADIOCHECKSUPPORT">
      <summary>Supports radio check boxes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_COMMANDIDSUPPORT">
      <summary>Means no Control names. Like VC.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_VIEWCODESUPPORT">
      <summary>Supports the ViewCode command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NOPROPERTIESSUPPORT">
      <summary>Does not support the Properties command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_TEXTLIMIT">
      <summary>Uses the MEINIT <paramref name="dwTextLimit" /> field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_TOPLEVELSEPSUPPORT">
      <summary>Enables separators on the top-level menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_EDITIDSNOTEDITNAMES">
      <summary>Menu item "Edit Names" is displayed as "Edit ID's."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NAMELIMIT">
      <summary>Use the MEINIT <paramref name="dwNameLimit" /> field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_NOUNDOSUPPORT">
      <summary>Does not store undo information, even if passed an undo manager.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BOTTOMDOCKED">
      <summary>This menu should dock on the bottom, and pop-up windows should cascade upward.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_BREAKSUPPORT">
      <summary>Supports the break and barbreak flags on menu items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEINIT.MD_RIGHTJUSTIFYSUPPORT">
      <summary>Supports the right justification of menu bar items (moves all to the right of the bar).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID">
      <summary>Specifies Menu Editor property IDs. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_FIRST">
      <summary>Indicates first VSMEPROPID_</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_NAME">
      <summary>Name</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_CAPTION">
      <summary>Caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_CHECKED">
      <summary>Checked item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_ENABLED">
      <summary>Enabled item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_VISIBLE">
      <summary>Visible item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BOLD">
      <summary>Bold caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_ACCEL">
      <summary>Accelerator (shortcut key)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_RADIOCHECK">
      <summary>Radio check box</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_EXTRAPROPS">
      <summary>Shows that a menu can be expanded to show additional items.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BREAK">
      <summary>Dividing space</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_BARBREAK">
      <summary>Divider bar</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_RIGHTJUSTIFY">
      <summary>Right justified text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEPROPID.VSMEPROPID_LAST">
      <summary>Indicates last VSMEPROPID_</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE">
      <summary>Specifies the state of operations in progress. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsMenuEditor.GetUIState(System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_IDLE">
      <summary>Menu editor is idle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_LABELEDIT">
      <summary>Label edit is in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_ACCELEDIT">
      <summary>Accelerator edit is in progress.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSMEUISTATE.VSMEUISTATE_ACCELLIST">
      <summary>Accelerator listing is in progress.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS">
      <summary>Specifies criteria for the environment's Object Search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NONE">
      <summary>No parameters specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_SHOWUI">
      <summary>Synonym for none.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NOSHOWUI">
      <summary>Shows Find Symbol Results window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_EXPANDREFS">
      <summary>Expands nodes in Find Symbol Results Window (applies only if <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_NOSHOWUI" /> is not set).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOBSEARCHFLAGS.VSOSF_USECURRENTOPTS">
      <summary>Uses current Find Symbol options (as opposed to those passed-in).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS">
      <summary>Determines the best standard editor to open and whether to use a dialog box in the process. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_RDTFLAGS_MASK">
      <summary>Mask that runs the document tables flags. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_UseOpenWithDialog">
      <summary>Use a dialog box to determine which editor to use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_ChooseBestStdEditor">
      <summary>The environment scans the Editors/{guidEditorType}/Extensions sub-key in the Registry to determine which editor can open the file and has the highest priority for doing so.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSEFLAGS.OSE_OpenAsNewFile">
      <summary>Open as a new file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS">
      <summary>Specifies actions to take when opening a specific editor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_RDTFLAGS_MASK">
      <summary>Masks Running Document Table flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration for these values.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_CDWFLAGS_MASK">
      <summary>Masks Create Document Window flags. See <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEDOCWIN" /> enumeration for these values. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS.OSPE_OpenAsNewFile">
      <summary>Set to <see langword="true" /> to open a document as a new file. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS">
      <summary>Opens the standard preview application with a dialog box and launches a new browser.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog">
      <summary>Choose Previewer with a dialog box. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchNewBrowser">
      <summary>Launches a new browser window. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSingleBrowser">
      <summary>Do not launch multiple browsers, even if multiple browsers have been selected as the default operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_SkipInternalIfModal">
      <summary>Valid only with <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSingleBrowser" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_LaunchSystemBrowser">
      <summary>Launch the default windows' browsers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_NoUrlConversion">
      <summary>By default, preview will convert URL to UTF8 and canonicalize it before passing to external browser. No URL conversion is done for internal web browser.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE">
      <summary>Sets the state of a document outline.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE.OUTLINE_DETACHED">
      <summary>Outline is detached from document window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSOUTLINESTATE.OUTLINE_VISIBLE">
      <summary>Outline is visible when not detached.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS">
      <summary>Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsPackage.ResetDefaults(System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_TOOLBOXITEMS">
      <summary>Package to add its default items to toolbox.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_TOOLBOXSETUP">
      <summary>Package to add additional default items to toolbox.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPKGRESETFLAGS.PKGRF_ADDSTDPREVIEWER">
      <summary>Package to add additional previewers to list for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardPreviewer(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.VSPREVIEWRESOLUTION,System.UInt32)" />(<see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSOSPFLAGS.OSP_UsePreviewWithDialog" />,...).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROJRESFLAGS">
      <summary>Specifies action to take with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectResources.GetResourceItem(System.UInt32,System.String,System.UInt32,System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROJRESFLAGS.PRF_CreateIfNotExist">
      <summary>Create the resource if it doesn't exist.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPROPID">
      <summary>Identifies property settings for a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_LAST">
      <summary>Specifies last VSPROPID_.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionDirectory">
      <summary>BSTR: Directory where solution file is saved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionFileName">
      <summary>BSTR; Full path to solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_UserOptionsFileName">
      <summary>BSTR: Full path to user options file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionBaseName">
      <summary>BSTR: (Get/Set) base name of solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionDirty">
      <summary>BOOLEAN: <see langword="true" /> if solution file is dirty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionOpen">
      <summary>BOOLEAN: <see langword="true" /> if a solution file is open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_ProjectCount">
      <summary>I4: Count of projects open in solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_RegisteredProjExtns">
      <summary>BSTR: Semicolon-separated list of all project extensions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_OpenProjectFilter">
      <summary>BSTR: Filter/extension list used in Open Project dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_FileDefaultCodePage">
      <summary>I4: Codepage for saving files (CP_ACP/CP_WINUNICODE).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionFileNameBeingLoaded">
      <summary>BSTR: Full path to file being opened (valid only during open).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionNodeCaption">
      <summary>BSTR: Caption for solution node in Project Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionOpening">
      <summary>BOOLEAN: <see langword="true" /> if a solution file is being opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_IsSolutionSaveAsRequired">
      <summary>BOOLEAN: <see langword="true" /> if saving the solution will require a Save As dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_CountOfProjectsBeingLoaded">
      <summary>I4: Count of projects in file being opened (valid only during open).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_SolutionPropertyPages">
      <summary>BSTR: A semicolon-delimited list of clsids of solution-level property pages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPROPID.VSPROPID_FIRST">
      <summary>Specifies first VSPROPID_.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID">
      <summary>Provides properties to set project-specific editor information in the OpenWith dialog box. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_NIL">
      <summary>NIL; -1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_LAST">
      <summary>This must be the same as the first property defined.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_UseGlobalEditorByDefault">
      <summary>BOOL. Optional. If you set this property, then a &lt;project default editor&gt; entry is added to the OpenWith dialog box. If <see langword="true" />, then the global editor is used by default. If <see langword="false" />, then a project-specific editor is used by default. The project is expected to persist on a per-user/per-machine/per file-type (file extension) basis whether the global standard editor or the project-specific editor should be used. The project then uses this information to know whether to call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> when a project item is opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_ProjectDefaultEditorName">
      <summary>BSTR. Optional. The project can return a name for the editor (to be used instead of "Project default editor".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID.VSPSEPROPID_FIRST">
      <summary>Indicates the first <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSPSEPROPID" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION">
      <summary>Specifies the text image disposition action for CloseItemTextImage calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_Close">
      <summary>Finished using the item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_ToOpen">
      <summary>The item is about to be opened through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenDocumentViaProject(System.String,System.Guid@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_DISPOSITION.VSPTIP_Modified">
      <summary>Finished using the item and it was modified.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE">
      <summary>Specifies the open mode for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectTextImageProvider.OpenItemTextImage(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.VsTextImage@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE.VSPTIP_ReadOnly">
      <summary>Opens as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSPTIP_MODE.VSPTIP_ReadWrite">
      <summary>Opens as editable.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB">
      <summary>Returns information about a document in the running document table (RDT). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_Hierarchy">
      <summary>Hierarchical position of the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_ItemID">
      <summary>Item identifier of the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_MkDocument">
      <summary>Full path to the document in the RDT. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataIsDirty">
      <summary>Flag indicates that the data of the document in the RDT has changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataIsNotDirty">
      <summary>Flag indicates that the data of the document in the RDT has not changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_NOTIFYDOCCHANGEDMASK">
      <summary>A mask for the flags passed to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_DocDataReloaded">
      <summary>This attribute event is fired by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTATTRIB.RDTA_AltHierarchyItemID">
      <summary>This attribute event is fired by calling the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.NotifyDocumentChanged(System.UInt32,System.UInt32)" /> method. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS">
      <summary>Specifies save options for a document in the running document table (RDT). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveIfDirty">
      <summary>Saves only if changes have been made. (This is the default.) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_PromptSave">
      <summary>Prompts user to save the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_ForceSave">
      <summary>Forces a save even if not dirty.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveNoChildren">
      <summary>Saves only the root of the hierarchy passed in; does not include its children.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_SaveOnlyChildren">
      <summary>Saves only children of the hierarchy passed in; does not include the hierarchy itself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_ActivateDocOnErr">
      <summary>Activates the editor window of a document if it generates an error on save.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_DocClose">
      <summary>Indicates that the save is a result of a document close.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS.RDTSAVEOPT_Reserved">
      <summary>Reserved flag, do not use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER">
      <summary>Specifies a weak lock in calls to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.RegisterDocumentLockHolder(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDocumentLockHolder,System.UInt32@)" /> method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREGDOCLOCKHOLDER.RDLH_WeakLockHolder">
      <summary>Specifies a weak document lock holder.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS">
      <summary>Specifies how to resolve a path search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_UseAllSearchStrategies">
      <summary>Uses all strategies to resolve the relative path.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_SkipEnumProjectItems">
      <summary>Skips enumerating items of all projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_SkipGlobalResolvers">
      <summary>Skips asking globally registered implementors of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRelativePathResolver" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSRELPATHSEARCHFLAGS.RPS_MatchByProjectPath">
      <summary>Matches by project path instead of MkDocument.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS">
      <summary>Provides options for removing a virtual project from the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS.REMOVEVP_DontCloseHierarchy">
      <summary>Upon removing a virtual project from the solution, leave the hierarchy open. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSREMOVEVPFLAGS.REMOVEVP_DontSaveHierarchy">
      <summary>Upon removing a virtual project from the solution, do not attempt to save the hierarchy. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS">
      <summary>Specifies close options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_SLNSAVEOPT_MASK">
      <summary>Placeholder for the options in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS" /> enumeration. Both save and close options are passed in together. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_UnloadProject">
      <summary>If not set, the project is removed from the solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNCLOSEOPTIONS.SLNCLOSEOPT_DeleteProject">
      <summary>If set, project is to be deleted from storage; no MRU entry is needed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS">
      <summary>Specifies open options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_Silent">
      <summary>Solution file is opened silently (no user feedback).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_AddToCurrent">
      <summary>Solution file is merged into currently open solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNOPENOPTIONS.SLNOPENOPT_DontConvertSLN">
      <summary>A solution file from a previous product is not opened.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS">
      <summary>Specifies save options for a solution (.sln) file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SaveIfDirty">
      <summary>Save only if the .sln file has been changed. This is the default. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_PromptSave">
      <summary>Prompt user whether to save the .sln file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipDocs">
      <summary>Skip all documents that have been changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipProj">
      <summary>Skips the project file. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipSolution">
      <summary>Skips the solution file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_SkipUserOptFile">
      <summary>Skips the user option file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_NoSave">
      <summary>Inclusive OR of all "skip" flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_ForceSave">
      <summary>Forces save even if the file has not been changed. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSLNSAVEOPTIONS.SLNSAVEOPT_DocClose">
      <summary>Result of closing a document.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS">
      <summary>Specifies options for opening existing project items within a specific editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_DoOpen">
      <summary>Project should open item(s)—meaningful only for AddItem, implied for OpenItem.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_UseEditor">
      <summary>Project should open item(s) via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenSpecificEditor(System.UInt32,System.String,System.Guid@,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> using editor type and physical view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPECIFICEDITORFLAGS.VSSPECIFICEDITOR_UseView">
      <summary>Project should open item(s) via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> using logical view only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID">
      <summary>Specifies shell property settings for the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_LAST">
      <summary>Flag indicating the last property identifier in this group of identifiers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_StartupDir">
      <summary>BSTR directory where running executable started up.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_MDIState">
      <summary>BOOL VARIANT_TRUE if IDE in MDI state, else VARIANT_FALSE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_VirtualRegistryRoot">
      <summary>BSTR registry key name (must be appended to HKLM or HKCU).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_OpenFileFilter">
      <summary>BSTR. Open file filter list string. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_FindInFilesFilter">
      <summary>BSTR. Find in files filter list string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AddExistItemFilter">
      <summary>BSTR. Add existing item filter list string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInOfficeMode">
      <summary>BOOL <see langword="true" /> if environment is in Office mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_InstallDirectory">
      <summary>BSTR. Directory where visual studio executable was installed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreview">
      <summary>I4 One of PBRP_ values (PBRP_SaveChanges/PBRP_DontSaveChanges/PBRP_PromptForSave)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsComplexScriptAvail">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hinstComplexScript">
      <summary>Obsolete. Do not use. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hinstMSO">
      <summary>4. hinst of mso*.dll. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ViewSourceMode">
      <summary>BOOL. Set to <see langword="true" /> if the environment is to be in <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ViewSourceMode" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_RecordState">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRECORDSTATE" /> enumeration type specifying macro recording state of the environment. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_Zombie">
      <summary>BOOL. <see langword="true" /> if the environment is in an inactive state. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AnimationsOn">
      <summary>BOOL. <see langword="true" /> if environment animations are on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ProcessingPendingMessageFilterMsg">
      <summary>BOOL. <see langword="true" /> if Processing Pending MessageFilter message. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInteractive">
      <summary>Obsolete. Do not use. Use <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInCommandLineMode" /> instead. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_DetectFileChanges">
      <summary>BOOL. <see langword="true" /> if editors are supposed to watch for file changes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_OpenFromCurrDocDir">
      <summary>BOOL <see langword="true" /> if OpenFile operation starts in current document's directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ReloadChangedFiles">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSRELOADOPTION" />. Tells editors how to respond to externally modified documents. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_AppDataDir">
      <summary>BSTR. Application data directory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_IsInCommandLineMode">
      <summary>BOOL. <see langword="true" /> if environment is running as a command line tool. Do not display any UI in this case. <see langword="false" /> if the environment is to display ordinary UI. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowOutputPaneOnBuildBegin">
      <summary>BOOL. <see langword="true" /> if the environment is to show the output pane when you start to build a project. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowTasklistOnBuildEnd">
      <summary>BOOL. <see langword="true" /> if the environment is to show the task list when the build is complete. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_hmsoinstMSO">
      <summary>I4. HMSOINST of mso*.dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ShowMiscFilesProject">
      <summary>BOOL. <see langword="true" /> if the environment is to make the Miscellaneous Files project visible in Solution Explorer. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_ObjectMgrTypesImgList">
      <summary>I4. Handle to environment's image list for symbol types (class, interface, method, etc). Do not free because the environment frees it during final shutdown. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_SCCGlyphsImgList">
      <summary>I4. Handle to environment's image list for source code control glyphs, which are indexed by <see cref="T:Microsoft.VisualStudio.Shell.Interop.VsStateIcon" />. Do not free because the environment frees it during final shutdown. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_SuppressMessageFilterBusyDialog">
      <summary>BOOL. If <see langword="true" /> the "Component Busy/Retry/Switch" dialog is suppressed. This element is used by Visual Studio for Applications for break mode. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_VisualStudioProjDir">
      <summary>BSTR. The full path location of the Visual Studio Projects directory. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreviewSaveOpts">
      <summary>I4. <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS" /> to pass to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable.SaveDocuments(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32)" /> when <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_PreBuildRunPreview" /> does not equal PBRP_DontSaveChanges. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID.VSSPROPID_FIRST">
      <summary>Flag indicating the first property identifier in this group of identifiers. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS">
      <summary>OBSOLETE. The VSSWATCHRENDERFLAGS enumeration is a member of the VSSWATCHRENDER structure, a parameter of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSwatchClient.RenderCell(Microsoft.VisualStudio.Shell.Interop.VSSWATCHRENDER[],System.Int32@)" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_DEFAULT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_DISABLED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_SELECTED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSWATCHRENDERFLAGS.VSSRF_FOCUS">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS">
      <summary>Translate accelerator flags for IVsFilterKeys::<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsFilterKeys.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[],System.UInt32,System.Guid@,System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS.VSTAF_Default">
      <summary>Perform the default actions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSTRANSACCELFLAGS.VSTAF_NoFireCommand">
      <summary>Do not execute the command.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS">
      <summary>Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProjectUpgrade.UpgradeProject(System.UInt32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSUPGRADEPROJFLAGS.UPF_SILENTMIGRATE">
      <summary>The user has already been prompted for solution migration, so do not prompt again. This flag will not be passed if the project is opened without an associated solution file.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSURLZONE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSURLZONE.URLZONE_VSAPP">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID">
      <summary>View propertiy ID's for calls to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowView" /> methods. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_NIL">
      <summary>NIL; -1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapGuidPackage">
      <summary>GUID of the package that is providing the bitmap.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapResource">
      <summary>I4: Resource number of bitmap in satellite dll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_BitmapIndex">
      <summary>I4: Index into strip if bitmap handle is a strip.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSVPROPID.VSVPROPID_FIRST">
      <summary>Indicates the first VSVPROPID_.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL">
      <summary>Specifies the type of a custom Web page. Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser.GetCustomURL(System.UInt32,System.String@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Home">
      <summary>A custom Web page for a home page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Search">
      <summary>A custom Web page for searches.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBCUSTOMURL.VSWBCU_Credits">
      <summary>A custom Web page for credits.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX">
      <summary>Specifies the type of document information for a Web page. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.GetDocumentInfo(System.UInt32,System.Object@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocDispatch">
      <summary>The object reference of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocName">
      <summary>The document’s name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocURL">
      <summary>The document’s URL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocType">
      <summary>The type of document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocStatusText">
      <summary>The document’s status text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocBusyStatus">
      <summary>The document’s current busy status.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocReadyState">
      <summary>The document’s current ready state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocSize">
      <summary>The size of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBDOCINFOINDEX.VSWBDI_DocLastCtxMenuPos">
      <summary>The document’s last context menu position.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS">
      <summary>Navigation flags for <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService.Navigate(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_ForceNew">
      <summary>Open the document in a new window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_AddToMRU">
      <summary>Add the document to the most recently used list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_VsURLOnly">
      <summary>Navigate only to a Visual Studio internal URL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBNAVIGATEFLAGS.VSNWB_WebURLOnly">
      <summary>Navigate only to a Web URL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS">
      <summary>Used in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebPreview.PreviewURLEx(Microsoft.VisualStudio.Shell.Interop.IVsWebPreviewAction,System.String,System.UInt32,System.Int32,System.Int32)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameMdiChild">
      <summary>Default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameFloat">
      <summary>Frame is to float.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBPREVIEWOPTIONS.VSWBP_FrameDock">
      <summary>Frame is to be docked.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE">
      <summary>Indicates refresh action to take with calls to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowser.Refresh(System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_Normal">
      <summary>Take normal action.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_IfExpired">
      <summary>Refresh the browser if the page has expired.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSWBREFRESHTYPE.VSWBR_Completely">
      <summary>Refresh the browser completely.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS">
      <summary>Flags for registering an invisible editor with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager.RegisterInvisibleEditor(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProject,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsSimpleDocFactory,Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditor@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._EDITORREGFLAGS.RIEF_ENABLECACHING">
      <summary>Indicates that the invisible editor is to keep the file loaded whenever possible.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS">
      <summary>Determines whether stream or box selection mode is being used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToOutputWindow">
      <summary>Sends all output to the output pane. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PipeStdoutToTaskList">
      <summary>Parses each line of output into the task list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_ClearOutputWindow">
      <summary>Clears the specified pane of the output window before spawning the tool.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LAUNCHPAD_FLAGS.LPF_PauseAfterExecution">
      <summary>Waits for key press to close the process spawned in the external command window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS">
      <summary>Specifies options for adding a component to a browse container.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_NONE">
      <summary>No options specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_ALREADYADDED">
      <summary>[out] Library should return this flag to indicate that the specified component is already added.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_ADDREMOVEOPTIONS.LARO_THRUFILEOPS">
      <summary>[in] Tells library that the component is being added through File Open.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS">
      <summary>Specifies attributes for a Library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_PROJECT">
      <summary>Specifies that the library is a Projects list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_GLOBAL">
      <summary>Specifies that the library is a Globals list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_EXPANDABLE">
      <summary>Library supports <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary.GetLibList(Microsoft.VisualStudio.Shell.Interop.LIB_PERSISTTYPE,Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_FLAGS.LF_HIDEINLIBPICKER">
      <summary>Don't show library or its liblist in the Add Reference dialog box. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES">
      <summary>Specifies the capabilities of an object list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_NONE">
      <summary>The object list has no special capabilities. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASBROWSEOBJ">
      <summary>Items in the object list support property browse objects through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetBrowseObject(System.UInt32,System.Object@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASDESCPANE">
      <summary>Items in the object list support description pane text through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.FillDescription(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsObjectBrowserDescription2)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASSOURCECONTEXT">
      <summary>Items in the object list support <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetSourceContext(System.UInt32,System.IntPtr,System.UInt32@)" />, <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CountSourceItems(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)" />, and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetMultipleSourceItems(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSITEMSELECTION[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_HASCOMMANDS">
      <summary>Items in the object list support their own context menu through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.GetContextMenu(System.UInt32,System.Guid@,System.Int32@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWDRAGDROP">
      <summary>Items in the object list support drag and drop operations through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.QueryDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDragDrop(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32@)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWRENAME">
      <summary>Items in the object list support renaming through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanRename(System.UInt32,System.String,System.Int32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoRename(System.UInt32,System.String,System.UInt32)" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWDELETE">
      <summary>Items in the object list support renaming through <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.CanDelete(System.UInt32,System.Int32@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList.DoDelete(System.UInt32,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTCAPABILITIES.LLC_ALLOWSCCOPS">
      <summary>Unused. Use the <see cref="F:Microsoft.VisualStudio.Shell.Interop._VSTREEDISPLAYSTATE.TDS_STATEIMAGEMASK" /> in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLiteTreeList.GetDisplayData(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSTREEDISPLAYDATA[])" />call to communicate the source code control state of the list item. Source code control commands are routed through the standard <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> and ItemID mechanism. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS">
      <summary>Specifies the controls to implement for an object list search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_NONE">
      <summary>No flags are specified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_IGNORESUBSET">
      <summary>Ignore subsets in the search. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_TRUENESTING">
      <summary>Search true nested items. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_PROJECTONLY">
      <summary>Search only the project. For class view requests only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_USESEARCHFILTER">
      <summary>Use a <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA" /> parameter to limit information selection. For symbol search only. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_DONTUPDATELIST">
      <summary>Don't update the symbol list. For find symbol only </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTFLAGS.LLF_RESOURCEVIEW">
      <summary>Search in resource view. For symbol search only. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE">
      <summary>Specifies the ListType of an object list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_HIERARCHY">
      <summary>Special list type to support the grouped base and derived classes list in Class View. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_NAMESPACES">
      <summary>Specifies that the list contain name spaces. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CLASSES">
      <summary>Specifies that the list contain classes. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_MEMBERS">
      <summary>Specifies that the list contain members. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_PHYSICALCONTAINERS">
      <summary>Specifies that the list contain physical containers. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_PACKAGE">
      <summary>Old name for LLT_PHYSICALCONTAINERS. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CONTAINMENT">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_CONTAINEDBY">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_USESCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_USEDBYCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_NESTEDCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_INHERITEDINTERFACES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_INTERFACEUSEDBYCLASSES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_DEFINITIONS">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_REFERENCES">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIB_LISTTYPE.LLT_DEFEREXPANSION">
      <summary>Special list type to indicate non-preferred expansion mechanism.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT">
      <summary>Specifies the ActiveProject attribute of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT.LCAP_SHOWALWAYS">
      <summary>Specifies that the project always displays in the object list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_ACTIVEPROJECT.LCAP_MUSTBEACTIVE">
      <summary>Specifies that the project must be the active project to be displayed in the object list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS">
      <summary>Specifies the ClassAccess mode of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PUBLIC">
      <summary>Library item is Public. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PRIVATE">
      <summary>Library item is Private. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PROTECTED">
      <summary>Library item is Protected. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_PACKAGE">
      <summary>Library item is a Package. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_FRIEND">
      <summary>Library item is a Friend. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSACCESS.LCCA_SEALED">
      <summary>Library item is Sealed. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE">
      <summary>Specifies the ClassType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_NSPC">
      <summary>Classtype is unspecified. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_CLASS">
      <summary>Library item is a Class. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_INTERFACE">
      <summary>Library item is an Interface. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_STRUCT">
      <summary>Library item is a Struct. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_UNION">
      <summary>Library item is a Union. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_ENUM">
      <summary>Library item is an Enumeration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_TYPEDEF">
      <summary>Library item is a Typedef. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_MODULE">
      <summary>Library item is a Module.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_INTRINSIC">
      <summary>Library item is an Intrinsic. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_DELEGATE">
      <summary>Library item is a Delegate. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_EXCEPTION">
      <summary>Library item is an Exception. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_MAP">
      <summary>Library item is a Map. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_GLOBAL">
      <summary>Library item is a Global. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_CLASSTYPE.LCCT_ERROR">
      <summary>Error condition. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS">
      <summary>Specifies the MemberAccess mode of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PUBLIC">
      <summary>Member access is Public. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PRIVATE">
      <summary>Member access is Private. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PROTECTED">
      <summary>Member access is Protected. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_PACKAGE">
      <summary>Member access is Package. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_FRIEND">
      <summary>Member access is Friend. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERACCESS.LCMA_SEALED">
      <summary>Member access is Sealed. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE">
      <summary>Specifies the MemberType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_METHOD">
      <summary>Library item is a method. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_FUNCTION">
      <summary>Library item is a function. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_OPERATOR">
      <summary>Library item is an operator. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_PROPERTY">
      <summary>Library item is a property. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_FIELD">
      <summary>Library item is a field. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_VARIABLE">
      <summary>Library item is a variable. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_EVENT">
      <summary>Library item is an event. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_CONSTANT">
      <summary>Library item is a constant. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_ENUMITEM">
      <summary>Library item is an enumeration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_TYPEDEF">
      <summary>Library item is a Typedef. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_MAPITEM">
      <summary>Library item is a map item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_DECLARATION">
      <summary>Library item is a declaration. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_MACRO">
      <summary>Library item is a macro. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MEMBERTYPE.LCMT_ERROR">
      <summary>An error occurred. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE">
      <summary>Specifies the ModifierType of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_VIRTUAL">
      <summary>Library item is virtual.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_PUREVIRTUAL">
      <summary>Library item is pure virtual. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_NONVIRTUAL">
      <summary>Library item is non-virtual. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_FINAL">
      <summary>Library item is final. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_MODIFIERTYPE.LCMDT_STATIC">
      <summary>Library item is static. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE">
      <summary>Specifies the node type of a tree list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_SYMBOL">
      <summary>Node is a symbol list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_HIERARCHY">
      <summary>Node is a hierarchy list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_PROJECT">
      <summary>Node is a project list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_NODETYPE.LCNT_FOLDER">
      <summary>Node is a folder list. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY">
      <summary>Specifies the visibility of a library item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY.LCV_VISIBLE">
      <summary>Library item is visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIBCAT_VISIBILITY.LCV_HIDDEN">
      <summary>Library item is hidden.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE">
      <summary>Specifies the limits of how keywords are searched for context help (in which <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContext" />s are searched).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_SelOnly">
      <summary>Only uses keywords from the topmost active context bag.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_NoAmbient">
      <summary>Uses all keywords except Ambient.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_All">
      <summary>Uses all keywords (default).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._LIMITTOPICSOURCE.CCW_LimKwd_Last">
      <summary>The last keyword limitation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS">
      <summary>Specifies help system commands for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem" /> methods.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_Default">
      <summary>Used by All functions. Same as using NULL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_NoErrorMessages">
      <summary>Used by All functions. Sets this to display error messages yourself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_UseBrowser">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_UseHelp">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_Localize">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromURL(System.String,System.UInt32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VHS_COMMANDS.VHS_OutsideCollectionSpace">
      <summary>Used only by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsHelpSystem.DisplayTopicFromIdentifier(System.String,System.UInt32,System.UInt32)" />. Do not show context id in collection's window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID">
      <summary>Specifies the context item provider ID in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.GetProperty(System.Int32,System.Object@)" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserContextItemProvider.SetProperty(System.Int32,System.Object)" /> calls. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop._VSCIPPROPID.VSCIPPROPID_NIL">
      <summary>NIL; -1</summary>
    </me